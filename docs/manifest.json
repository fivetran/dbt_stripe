{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.8", "generated_at": "2024-02-29T18:12:56.664494Z", "invocation_id": "7b26ef71-490f-4fb6-8aee-24614d0825cc", "env": {}, "project_name": "stripe_integration_tests", "project_id": "109848508b1db9729face71a82e6e37e", "user_id": "2bfa9082-ea6e-467b-abdc-d0514ab111d9", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"seed.stripe_integration_tests.fee_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "fee_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "fee_data.csv", "original_file_path": "seeds/fee_data.csv", "unique_id": "seed.stripe_integration_tests.fee_data", "fqn": ["stripe_integration_tests", "fee_data"], "alias": "fee_data", "checksum": {"name": "sha256", "checksum": "2c64d3edd42b0a1c03170433aab3cb53ddc0efe4eb3b57cd1b812f95f3326868"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.343563, "relation_name": "`dbt-package-testing`.`stripe_testing`.`fee_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.refund_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "refund_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "refund_data.csv", "original_file_path": "seeds/refund_data.csv", "unique_id": "seed.stripe_integration_tests.refund_data", "fqn": ["stripe_integration_tests", "refund_data"], "alias": "refund_data", "checksum": {"name": "sha256", "checksum": "ff92e2c930bad7b418a907c9df2f6a4303ed92ca52bef2d3c1e4c0f0f1c23c02"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.353011, "relation_name": "`dbt-package-testing`.`stripe_testing`.`refund_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.invoice_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "invoice_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "invoice_data.csv", "original_file_path": "seeds/invoice_data.csv", "unique_id": "seed.stripe_integration_tests.invoice_data", "fqn": ["stripe_integration_tests", "invoice_data"], "alias": "invoice_data", "checksum": {"name": "sha256", "checksum": "b711771e487cb6b69c9254e8d956c7314e714dd44e084a5eaa7296ea95c8b17b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.3545, "relation_name": "`dbt-package-testing`.`stripe_testing`.`invoice_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.invoice_line_item_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "invoice_line_item_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "invoice_line_item_data.csv", "original_file_path": "seeds/invoice_line_item_data.csv", "unique_id": "seed.stripe_integration_tests.invoice_line_item_data", "fqn": ["stripe_integration_tests", "invoice_line_item_data"], "alias": "invoice_line_item_data", "checksum": {"name": "sha256", "checksum": "cd9ae8ef604054ac122f2e4d3f5b21179edf4f1ad7791ea5ae5de20cb67707f6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.356149, "relation_name": "`dbt-package-testing`.`stripe_testing`.`invoice_line_item_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.price_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "price_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "price_data.csv", "original_file_path": "seeds/price_data.csv", "unique_id": "seed.stripe_integration_tests.price_data", "fqn": ["stripe_integration_tests", "price_data"], "alias": "price_data", "checksum": {"name": "sha256", "checksum": "2509e43b9b6759cc988b3b8c647d107aa15a07837822daf8413c214c121ea12c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.357802, "relation_name": "`dbt-package-testing`.`stripe_testing`.`price_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.dispute_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "dispute_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "dispute_data.csv", "original_file_path": "seeds/dispute_data.csv", "unique_id": "seed.stripe_integration_tests.dispute_data", "fqn": ["stripe_integration_tests", "dispute_data"], "alias": "dispute_data", "checksum": {"name": "sha256", "checksum": "8d27faf045947548896dc45cf158bc54dfa6351488943eeb07ee9748e36d237c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.359391, "relation_name": "`dbt-package-testing`.`stripe_testing`.`dispute_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.credit_note_line_item_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "credit_note_line_item_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "credit_note_line_item_data.csv", "original_file_path": "seeds/credit_note_line_item_data.csv", "unique_id": "seed.stripe_integration_tests.credit_note_line_item_data", "fqn": ["stripe_integration_tests", "credit_note_line_item_data"], "alias": "credit_note_line_item_data", "checksum": {"name": "sha256", "checksum": "7acde9b3c86a258e56fceb56e20f12cdba73559af0f1675276cc8bbcf52e90d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.3608232, "relation_name": "`dbt-package-testing`.`stripe_testing`.`credit_note_line_item_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.subscription_history_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "subscription_history_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "subscription_history_data.csv", "original_file_path": "seeds/subscription_history_data.csv", "unique_id": "seed.stripe_integration_tests.subscription_history_data", "fqn": ["stripe_integration_tests", "subscription_history_data"], "alias": "subscription_history_data", "checksum": {"name": "sha256", "checksum": "43b8a0a4b037b4785f390fa7ae4db98d61ce77819eedd7234d61185aee76ae88"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.36225, "relation_name": "`dbt-package-testing`.`stripe_testing`.`subscription_history_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.charge_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "charge_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "charge_data.csv", "original_file_path": "seeds/charge_data.csv", "unique_id": "seed.stripe_integration_tests.charge_data", "fqn": ["stripe_integration_tests", "charge_data"], "alias": "charge_data", "checksum": {"name": "sha256", "checksum": "f53d3c5a25d9b2d7d650b4b92ab661b69891ec074ca50bc8df545523f9b9598f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string", "balance_transaction_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"balance_transaction_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}", "created": "timestamp"}}, "created_at": 1709229532.3638358, "relation_name": "`dbt-package-testing`.`stripe_testing`.`charge_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.balance_transaction_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "balance_transaction_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "balance_transaction_data.csv", "original_file_path": "seeds/balance_transaction_data.csv", "unique_id": "seed.stripe_integration_tests.balance_transaction_data", "fqn": ["stripe_integration_tests", "balance_transaction_data"], "alias": "balance_transaction_data", "checksum": {"name": "sha256", "checksum": "4a5058283b9c973d8b72ec8f71f9358df2cb7764dc40d1977e253178e5f2b68e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string", "available_on": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"available_on": "timestamp"}}, "created_at": 1709229532.3659542, "relation_name": "`dbt-package-testing`.`stripe_testing`.`balance_transaction_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.payment_method_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "payment_method_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "payment_method_data.csv", "original_file_path": "seeds/payment_method_data.csv", "unique_id": "seed.stripe_integration_tests.payment_method_data", "fqn": ["stripe_integration_tests", "payment_method_data"], "alias": "payment_method_data", "checksum": {"name": "sha256", "checksum": "fed06046c1179ee28f73b719380c71cafe40a8757f1f9f25008c0407f858f171"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.3676648, "relation_name": "`dbt-package-testing`.`stripe_testing`.`payment_method_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.plan_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "plan_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "plan_data.csv", "original_file_path": "seeds/plan_data.csv", "unique_id": "seed.stripe_integration_tests.plan_data", "fqn": ["stripe_integration_tests", "plan_data"], "alias": "plan_data", "checksum": {"name": "sha256", "checksum": "871465e7442edbac8f528b0ea6d2622bb8eb61cb95a7f825d8327ebcb24bbba3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.3691468, "relation_name": "`dbt-package-testing`.`stripe_testing`.`plan_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.customer_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "customer_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "customer_data.csv", "original_file_path": "seeds/customer_data.csv", "unique_id": "seed.stripe_integration_tests.customer_data", "fqn": ["stripe_integration_tests", "customer_data"], "alias": "customer_data", "checksum": {"name": "sha256", "checksum": "22437dfa3694f0d318625811f05e776c9ab800c13b42988b95809678ba88d651"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string", "description": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"description": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.370633, "relation_name": "`dbt-package-testing`.`stripe_testing`.`customer_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.card_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "card_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "card_data.csv", "original_file_path": "seeds/card_data.csv", "unique_id": "seed.stripe_integration_tests.card_data", "fqn": ["stripe_integration_tests", "card_data"], "alias": "card_data", "checksum": {"name": "sha256", "checksum": "ecd181a3b2767ed24c9b3f1074815cffcb0a5de3ba4187178cbb5bf276e7a067"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.372181, "relation_name": "`dbt-package-testing`.`stripe_testing`.`card_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.payment_intent_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "payment_intent_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "payment_intent_data.csv", "original_file_path": "seeds/payment_intent_data.csv", "unique_id": "seed.stripe_integration_tests.payment_intent_data", "fqn": ["stripe_integration_tests", "payment_intent_data"], "alias": "payment_intent_data", "checksum": {"name": "sha256", "checksum": "bd9e9f474669fd085a32823c36f8c5ea258edaccfe1758aec7bf7900674f133d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.373942, "relation_name": "`dbt-package-testing`.`stripe_testing`.`payment_intent_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.payout_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "payout_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "payout_data.csv", "original_file_path": "seeds/payout_data.csv", "unique_id": "seed.stripe_integration_tests.payout_data", "fqn": ["stripe_integration_tests", "payout_data"], "alias": "payout_data", "checksum": {"name": "sha256", "checksum": "0409106da67c7b90516be9509eeb142941f884d1811805ae96cc5e48d9e54e19"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string", "destination_bank_account_id": "string", "destination_card_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"destination_bank_account_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}", "destination_card_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.3753788, "relation_name": "`dbt-package-testing`.`stripe_testing`.`payout_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.credit_note_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "credit_note_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "credit_note_data.csv", "original_file_path": "seeds/credit_note_data.csv", "unique_id": "seed.stripe_integration_tests.credit_note_data", "fqn": ["stripe_integration_tests", "credit_note_data"], "alias": "credit_note_data", "checksum": {"name": "sha256", "checksum": "ee376bbb67979393bab00069cf3c8f4a102f01ea82a81c39f1cf69cd8b4abdd0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.376808, "relation_name": "`dbt-package-testing`.`stripe_testing`.`credit_note_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.account_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "account_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "account_data.csv", "original_file_path": "seeds/account_data.csv", "unique_id": "seed.stripe_integration_tests.account_data", "fqn": ["stripe_integration_tests", "account_data"], "alias": "account_data", "checksum": {"name": "sha256", "checksum": "ca8c3c62469d823879a4aa7c266ba25e9c59345389b548e8e5dd682874f627f9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.378228, "relation_name": "`dbt-package-testing`.`stripe_testing`.`account_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.transfer_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "transfer_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "transfer_data.csv", "original_file_path": "seeds/transfer_data.csv", "unique_id": "seed.stripe_integration_tests.transfer_data", "fqn": ["stripe_integration_tests", "transfer_data"], "alias": "transfer_data", "checksum": {"name": "sha256", "checksum": "d618fff8db4e3adad24ab5325dd4b16ee0d68ab259b39ff52caeab926b4bd74b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.379838, "relation_name": "`dbt-package-testing`.`stripe_testing`.`transfer_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.payment_method_card_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "payment_method_card_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "payment_method_card_data.csv", "original_file_path": "seeds/payment_method_card_data.csv", "unique_id": "seed.stripe_integration_tests.payment_method_card_data", "fqn": ["stripe_integration_tests", "payment_method_card_data"], "alias": "payment_method_card_data", "checksum": {"name": "sha256", "checksum": "41a235914b6f9a704792d779d74bce5f5810c9091bfe2e246232081bfdded372"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.381244, "relation_name": "`dbt-package-testing`.`stripe_testing`.`payment_method_card_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "seed.stripe_integration_tests.subscription_data": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "subscription_data", "resource_type": "seed", "package_name": "stripe_integration_tests", "path": "subscription_data.csv", "original_file_path": "seeds/subscription_data.csv", "unique_id": "seed.stripe_integration_tests.subscription_data", "fqn": ["stripe_integration_tests", "subscription_data"], "alias": "subscription_data", "checksum": {"name": "sha256", "checksum": "9963744a1f45602c27e4c4090348f5f26da54ddf9c25ae91435826d0e6889239"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "string"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": false}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "canceled_at": "timestamp", "voided_at": "timestamp", "invoice_id": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1709229532.382905, "relation_name": "`dbt-package-testing`.`stripe_testing`.`subscription_data`", "raw_code": "", "root_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "depends_on": {"macros": []}}, "model.stripe_source.stg_stripe__transfer": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__transfer", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__transfer.sql", "original_file_path": "models/stg_stripe__transfer.sql", "unique_id": "model.stripe_source.stg_stripe__transfer", "fqn": ["stripe_source", "stg_stripe__transfer"], "alias": "stg_stripe__transfer", "checksum": {"name": "sha256", "checksum": "08a5f9eb32badc2e0df460dc0722237a673ce78b338a05f28b8f0ac58b01ac37"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Properties belonging to a Stripe transfer.", "columns": {"transfer_id": {"name": "transfer_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transfer_amount": {"name": "transfer_amount", "description": "Amount in cents to be transferred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transfer_amount_reversed": {"name": "transfer_amount_reversed", "description": "Amount in cents reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "Balance transaction that describes the impact of this transfer on your account balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transfer_created_at": {"name": "transfer_created_at", "description": "Time that this record of the transfer was first created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transfer_currency": {"name": "transfer_currency", "description": "Three-letter ISO currency code, in lowercase. Must be a supported currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transfer_description": {"name": "transfer_description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transfer_destination": {"name": "transfer_destination", "description": "ID of the Stripe account the transfer was sent to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "destination_payment": {"name": "destination_payment", "description": "If the destination is a Stripe account, the payment that the destination account received for the transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "destination_payment_id": {"name": "destination_payment_id", "description": "If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transfer_metadata": {"name": "transfer_metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transfer_is_reversed": {"name": "transfer_is_reversed", "description": "Boolean of whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_transaction": {"name": "source_transaction", "description": "The source transaction related to this transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_transaction_id": {"name": "source_transaction_id", "description": "ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The source balance this transfer came from. One of card, fpx, or bank_account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transfer_group": {"name": "transfer_group", "description": "A string that identifies this transaction as part of a group. See the Connect documentation for details.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1709229533.191455, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__transfer`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__transfer_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__transfer_tmp')),\n                staging_columns=get_transfer_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas', \n            union_database_variable='stripe_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as transfer_id,\n        amount as transfer_amount,\n        amount_reversed as transfer_amount_reversed,\n        balance_transaction_id,\n        cast(created as {{ dbt.type_timestamp() }}) as transfer_created_at,\n        currency as transfer_currency,\n        description as transfer_description,\n        destination as transfer_destination,\n        destination_payment,\n        destination_payment_id,\n        metadata as transfer_metadata,\n        reversed as transfer_is_reversed,\n        source_transaction,\n        source_transaction_id,\n        source_type,\n        transfer_group,\n        source_relation\n        \n        {% if var('stripe__transfer_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__transfer_metadata')) }}\n        {% endif %}\n\n    from fields\n    {{ livemode_predicate() }}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__transfer_tmp", "package": null, "version": null}, {"name": "stg_stripe__transfer_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_transfer_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.stripe_source.livemode_predicate"], "nodes": ["model.stripe_source.stg_stripe__transfer_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__transfer.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__transfer_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_reversed\n    \n as \n    \n    amount_reversed\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    destination_payment\n    \n as \n    \n    destination_payment\n    \n, \n    \n    \n    destination_payment_id\n    \n as \n    \n    destination_payment_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reversed\n    \n as \n    \n    reversed\n    \n, \n    \n    \n    source_transaction\n    \n as \n    \n    source_transaction\n    \n, \n    \n    \n    source_transaction_id\n    \n as \n    \n    source_transaction_id\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as transfer_id,\n        amount as transfer_amount,\n        amount_reversed as transfer_amount_reversed,\n        balance_transaction_id,\n        cast(created as timestamp) as transfer_created_at,\n        currency as transfer_currency,\n        description as transfer_description,\n        destination as transfer_destination,\n        destination_payment,\n        destination_payment_id,\n        metadata as transfer_metadata,\n        reversed as transfer_is_reversed,\n        source_transaction,\n        source_transaction_id,\n        source_type,\n        transfer_group,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__invoice_line_item": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__invoice_line_item", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__invoice_line_item.sql", "original_file_path": "models/stg_stripe__invoice_line_item.sql", "unique_id": "model.stripe_source.stg_stripe__invoice_line_item", "fqn": ["stripe_source", "stg_stripe__invoice_line_item"], "alias": "stg_stripe__invoice_line_item", "checksum": {"name": "sha256", "checksum": "3de8529632c18937d0953251cd14213817f80c8c8d79f8e5bd265ebfeb34c1bf"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "The different items that an invoice contains", "columns": {"invoice_line_item_id": {"name": "invoice_line_item_id", "description": "Unique identifier for the object. Note that the same line item can be shown across different invoices, so this value can appear multiple times.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The ID of the invoice this item is a part of", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_item_id": {"name": "invoice_item_id", "description": "The ID of the invoice item this item is a part of", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "price_id": {"name": "price_id", "description": "ID of the price object this item pertains to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount, in cents.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_discountable": {"name": "is_discountable", "description": "If true, discounts will apply to this line item. Always false for prorations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The ID of the plan of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "proration": {"name": "proration", "description": "Whether this is a proration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The ID of the subscription that the invoice item pertains to, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_item_id": {"name": "subscription_item_id", "description": "The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "A string identifying the type of the source of this line item, either an invoice item or a subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unique_invoice_line_item_id": {"name": "unique_invoice_line_item_id", "description": "A unique id generated for old invoice line item ID's from a past version of the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_start": {"name": "period_start", "description": "Start of the usage period during which invoice items were added to this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_end": {"name": "period_end", "description": "End of the usage period during which invoice items were added to this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": true}, "created_at": 1709229533.167136, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item`", "raw_code": "{{ config(enabled=var('stripe__using_invoices', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__invoice_line_item_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__invoice_line_item_tmp')),\n                staging_columns=get_invoice_line_item_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas',\n            union_database_variable='stripe_union_databases')\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_line_item_id,\n        invoice_id,\n        invoice_item_id,\n        amount,\n        currency,\n        description,\n        discountable as is_discountable,\n        plan_id,\n        price_id,\n        proration,\n        quantity,\n        subscription_id,\n        subscription_item_id,\n        type,\n        unique_id as unique_invoice_line_item_id,\n        period_start,\n        period_end,\n        source_relation\n        \n        {% if var('stripe__invoice_line_item_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__invoice_line_item_metadata')) }}\n        {% endif %}\n\n    from fields\n    {{ livemode_predicate() }}\n\n    {% if var('stripe__using_invoice_line_sub_filter', true) %}\n    and id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n    {% endif %}\n\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__invoice_line_item_tmp", "package": null, "version": null}, {"name": "stg_stripe__invoice_line_item_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_invoice_line_item_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.stripe_source.livemode_predicate"], "nodes": ["model.stripe_source.stg_stripe__invoice_line_item_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__invoice_line_item.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discountable\n    \n as \n    \n    discountable\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    cast(null as string) as \n    \n    invoice_item_id\n    \n , \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    cast(null as string) as \n    \n    price_id\n    \n , \n    \n    \n    proration\n    \n as \n    \n    proration\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    subscription_item_id\n    \n as \n    \n    subscription_item_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unique_id\n    \n as \n    \n    unique_id\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_line_item_id,\n        invoice_id,\n        invoice_item_id,\n        amount,\n        currency,\n        description,\n        discountable as is_discountable,\n        plan_id,\n        price_id,\n        proration,\n        quantity,\n        subscription_id,\n        subscription_item_id,\n        type,\n        unique_id as unique_invoice_line_item_id,\n        period_start,\n        period_end,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n\n    \n    and id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n    \n\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__payment_intent": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__payment_intent", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__payment_intent.sql", "original_file_path": "models/stg_stripe__payment_intent.sql", "unique_id": "model.stripe_source.stg_stripe__payment_intent", "fqn": ["stripe_source", "stg_stripe__payment_intent"], "alias": "stg_stripe__payment_intent", "checksum": {"name": "sha256", "checksum": "37b32ea39538c4ff5fe028f025b8f6c4261e48f87d6dfcb5ccbfc93a692ee7c7"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A Payment Intent guides you through the process of collecting a payment from your customer.", "columns": {"payment_intent_id": {"name": "payment_intent_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_capturable": {"name": "amount_capturable", "description": "Amount that can be captured from this PaymentIntent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_received": {"name": "amount_received", "description": "Amount that was collected by this PaymentIntent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that created the PaymentIntent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the resulting payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "Populated when status is canceled, this is the time at which the PaymentIntent was canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancellation_reason": {"name": "cancellation_reason", "description": "Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "capture_method": {"name": "capture_method", "description": "Controls when the funds will be captured from the customer\u2019s account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "confirmation_method": {"name": "confirmation_method", "description": "Whether confirmed automatically or manually", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the Customer this PaymentIntent belongs to, if one exists.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method used in this PaymentIntent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "Email address that the receipt for the resulting payment will be sent to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "statement_descriptor": {"name": "statement_descriptor", "description": "For non-card charges, you can use this value as the complete description that appears on your customers\u2019 statements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1709229533.160981, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_intent`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__payment_intent_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__payment_intent_tmp')),\n                staging_columns=get_payment_intent_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas',\n            union_database_variable='stripe_union_databases')\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_intent_id,\n        amount,\n        amount_capturable,\n        amount_received,\n        application,\n        application_fee_amount,\n        cast(canceled_at as {{ dbt.type_timestamp() }}) as canceled_at,\n        cancellation_reason,\n        capture_method,\n        confirmation_method,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        currency,\n        customer_id,\n        description,\n        metadata,\n        payment_method_id,\n        receipt_email,\n        statement_descriptor,\n        status,\n        source_relation\n\n        {% if var('stripe__payment_intent_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__payment_intent_metadata')) }}\n        {% endif %}\n\n    from fields\n    {{ livemode_predicate() }}\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__payment_intent_tmp", "package": null, "version": null}, {"name": "stg_stripe__payment_intent_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_payment_intent_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.stripe_source.livemode_predicate"], "nodes": ["model.stripe_source.stg_stripe__payment_intent_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__payment_intent.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_intent_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_capturable\n    \n as \n    \n    amount_capturable\n    \n, \n    \n    \n    amount_received\n    \n as \n    \n    amount_received\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    capture_method\n    \n as \n    \n    capture_method\n    \n, \n    \n    \n    confirmation_method\n    \n as \n    \n    confirmation_method\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_payment_error_charge_id\n    \n as \n    \n    last_payment_error_charge_id\n    \n, \n    \n    \n    last_payment_error_code\n    \n as \n    \n    last_payment_error_code\n    \n, \n    \n    \n    last_payment_error_decline_code\n    \n as \n    \n    last_payment_error_decline_code\n    \n, \n    \n    \n    last_payment_error_doc_url\n    \n as \n    \n    last_payment_error_doc_url\n    \n, \n    \n    \n    last_payment_error_message\n    \n as \n    \n    last_payment_error_message\n    \n, \n    \n    \n    last_payment_error_param\n    \n as \n    \n    last_payment_error_param\n    \n, \n    \n    \n    last_payment_error_source_id\n    \n as \n    \n    last_payment_error_source_id\n    \n, \n    \n    \n    last_payment_error_type\n    \n as \n    \n    last_payment_error_type\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as string) as \n    \n    metadata\n    \n , \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_intent_id,\n        amount,\n        amount_capturable,\n        amount_received,\n        application,\n        application_fee_amount,\n        cast(canceled_at as timestamp) as canceled_at,\n        cancellation_reason,\n        capture_method,\n        confirmation_method,\n        cast(created as timestamp) as created_at,\n        currency,\n        customer_id,\n        description,\n        metadata,\n        payment_method_id,\n        receipt_email,\n        statement_descriptor,\n        status,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__payment_method": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__payment_method", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__payment_method.sql", "original_file_path": "models/stg_stripe__payment_method.sql", "unique_id": "model.stripe_source.stg_stripe__payment_method", "fqn": ["stripe_source", "stg_stripe__payment_method"], "alias": "stg_stripe__payment_method", "checksum": {"name": "sha256", "checksum": "4bf21902163f688da2945c4ac2836143fba541c5323938fad2abd813f752324f"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": true}, "created_at": 1709229533.162455, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method`", "raw_code": "{{ config(enabled=var('stripe__using_payment_method', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__payment_method_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__payment_method_tmp')),\n                staging_columns=get_payment_method_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas',\n            union_database_variable='stripe_union_databases')\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        customer_id,\n        metadata,\n        type,\n        source_relation\n\n        {% if var('stripe__payment_method_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__payment_method_metadata')) }}\n        {% endif %}\n\n    from fields\n    {{ livemode_predicate() }}\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__payment_method_tmp", "package": null, "version": null}, {"name": "stg_stripe__payment_method_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_payment_method_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.stripe_source.livemode_predicate"], "nodes": ["model.stripe_source.stg_stripe__payment_method_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__payment_method.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    billing_detail_address_city\n    \n as \n    \n    billing_detail_address_city\n    \n, \n    \n    \n    billing_detail_address_country\n    \n as \n    \n    billing_detail_address_country\n    \n, \n    \n    \n    billing_detail_address_line_1\n    \n as \n    \n    billing_detail_address_line_1\n    \n, \n    \n    \n    billing_detail_address_line_2\n    \n as \n    \n    billing_detail_address_line_2\n    \n, \n    \n    \n    billing_detail_address_postal_code\n    \n as \n    \n    billing_detail_address_postal_code\n    \n, \n    \n    \n    billing_detail_address_state\n    \n as \n    \n    billing_detail_address_state\n    \n, \n    \n    \n    billing_detail_email\n    \n as \n    \n    billing_detail_email\n    \n, \n    \n    \n    billing_detail_name\n    \n as \n    \n    billing_detail_name\n    \n, \n    \n    \n    billing_detail_phone\n    \n as \n    \n    billing_detail_phone\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as string) as \n    \n    metadata\n    \n , \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        cast(created as timestamp) as created_at,\n        customer_id,\n        metadata,\n        type,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__refund": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__refund", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__refund.sql", "original_file_path": "models/stg_stripe__refund.sql", "unique_id": "model.stripe_source.stg_stripe__refund", "fqn": ["stripe_source", "stg_stripe__refund"], "alias": "stg_stripe__refund", "checksum": {"name": "sha256", "checksum": "e03571df0920c6d0eba4142f4115dd9375f1f8238ed9ac5bfa95a03eb723e98a"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Details of transactions that have been refunded", "columns": {"refund_id": {"name": "refund_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount, in cents.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID for the balance transaction that describes the impact on your account balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the charge that was refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reason": {"name": "reason", "description": "Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "ID of the payment intent associated with this refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1709229533.1648462, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__refund`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__refund_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__refund_tmp')),\n                staging_columns=get_refund_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas',\n            union_database_variable='stripe_union_databases')\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        payment_intent_id,\n        balance_transaction_id,\n        charge_id,\n        amount,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        currency,\n        description,\n        metadata,\n        reason,\n        receipt_number,\n        status,\n        source_relation\n\n        {% if var('stripe__refund_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__refund_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__refund_tmp", "package": null, "version": null}, {"name": "stg_stripe__refund_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_refund_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp"], "nodes": ["model.stripe_source.stg_stripe__refund_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__refund.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__refund_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    cast(null as string) as \n    \n    payment_intent_id\n    \n , \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_reason\n    \n as \n    \n    failure_reason\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        payment_intent_id,\n        balance_transaction_id,\n        charge_id,\n        amount,\n        cast(created as timestamp) as created_at,\n        currency,\n        description,\n        metadata,\n        reason,\n        receipt_number,\n        status,\n        source_relation\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__subscription": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__subscription", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__subscription.sql", "original_file_path": "models/stg_stripe__subscription.sql", "unique_id": "model.stripe_source.stg_stripe__subscription", "fqn": ["stripe_source", "stg_stripe__subscription"], "alias": "stg_stripe__subscription", "checksum": {"name": "sha256", "checksum": "5241b693a93d2e2f65423c6fcd39dc44c38665a4172519c73b5a04591b81bb03"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Subscriptions allow you to charge a customer on a recurring basis. Please note that the more recent `subscription_history` table replaced the `subscription` table, so the source used in this model depends on which one you have.", "columns": {"subscription_id": {"name": "subscription_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "latest_invoice_id": {"name": "latest_invoice_id", "description": "ID of the latest invoice for this subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "ID of the default payment method for this subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pending_setup_intent_id": {"name": "pending_setup_intent_id", "description": "ID of the payment setup intent for this subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing": {"name": "billing", "description": "How the invoice is billed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_cancel_at_period_end": {"name": "is_cancel_at_period_end", "description": "Boolean indicating whether this subscription should cancel at the end of the current period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date_at": {"name": "start_date_at", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pause_collection_behavior": {"name": "pause_collection_behavior", "description": "The payment collection behavior for this subscription while paused. One of \"keep_as_draft\", \"mark_uncollectible\", or \"void\".", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pause_collection_resumes_at": {"name": "pause_collection_resumes_at", "description": "The time after which the subscription will resume collecting payments.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": true}, "created_at": 1709229533.173419, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`", "raw_code": "{{ config(enabled=var('stripe__using_subscriptions', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__subscription_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__subscription_tmp')),\n                staging_columns=get_subscription_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas',\n            union_database_variable='stripe_union_databases')\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_id,\n        latest_invoice_id,\n        customer_id,\n        default_payment_method_id,\n        pending_setup_intent_id,\n        status,\n        billing,\n        billing_cycle_anchor,\n        cast(cancel_at as {{ dbt.type_timestamp() }}) as cancel_at,\n        cancel_at_period_end as is_cancel_at_period_end,\n        cast(canceled_at as {{ dbt.type_timestamp() }}) as canceled_at,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        current_period_start,\n        current_period_end,\n        days_until_due,\n        metadata,\n        cast(start_date as {{ dbt.type_timestamp() }}) as start_date_at,\n        cast(ended_at as {{ dbt.type_timestamp() }}) as ended_at,\n        pause_collection_behavior,\n        cast(pause_collection_resumes_at as {{ dbt.type_timestamp() }}) as pause_collection_resumes_at,\n        source_relation\n        \n        {% if var('stripe__subscription_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__subscription_metadata')) }}\n        {% endif %}\n\n    from fields\n    {{ livemode_predicate() }}\n    {% if var('stripe__using_subscription_history', does_table_exist('subscription_history')) %}\n        and coalesce(_fivetran_active, true)\n    {% endif %}\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__subscription_tmp", "package": null, "version": null}, {"name": "stg_stripe__subscription_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_subscription_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.stripe_source.livemode_predicate", "macro.stripe_source.does_table_exist"], "nodes": ["model.stripe_source.stg_stripe__subscription_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__subscription.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_active\n    \n as \n    \n    _fivetran_active\n    \n, \n    \n    \n    application_fee_percent\n    \n as \n    \n    application_fee_percent\n    \n, \n    \n    \n    billing\n    \n as \n    \n    billing\n    \n, \n    \n    \n    billing_cycle_anchor\n    \n as \n    \n    billing_cycle_anchor\n    \n, \n    \n    \n    billing_threshold_amount_gte\n    \n as \n    \n    billing_threshold_amount_gte\n    \n, \n    \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n as \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n, \n    \n    \n    cancel_at\n    \n as \n    \n    cancel_at\n    \n, \n    \n    \n    cancel_at_period_end\n    \n as \n    \n    cancel_at_period_end\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    current_period_end\n    \n as \n    \n    current_period_end\n    \n, \n    \n    \n    current_period_start\n    \n as \n    \n    current_period_start\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    days_until_due\n    \n as \n    \n    days_until_due\n    \n, \n    \n    \n    default_source_id\n    \n as \n    \n    default_source_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as string) as \n    \n    latest_invoice_id\n    \n , \n    cast(null as string) as \n    \n    default_payment_method_id\n    \n , \n    cast(null as string) as \n    \n    pending_setup_intent_id\n    \n , \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tax_percent\n    \n as \n    \n    tax_percent\n    \n, \n    \n    \n    trial_end\n    \n as \n    \n    trial_end\n    \n, \n    \n    \n    trial_start\n    \n as \n    \n    trial_start\n    \n, \n    cast(null as string) as \n    \n    pause_collection_behavior\n    \n , \n    cast(null as timestamp) as \n    \n    pause_collection_resumes_at\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_id,\n        latest_invoice_id,\n        customer_id,\n        default_payment_method_id,\n        pending_setup_intent_id,\n        status,\n        billing,\n        billing_cycle_anchor,\n        cast(cancel_at as timestamp) as cancel_at,\n        cancel_at_period_end as is_cancel_at_period_end,\n        cast(canceled_at as timestamp) as canceled_at,\n        cast(created as timestamp) as created_at,\n        current_period_start,\n        current_period_end,\n        days_until_due,\n        metadata,\n        cast(start_date as timestamp) as start_date_at,\n        cast(ended_at as timestamp) as ended_at,\n        pause_collection_behavior,\n        cast(pause_collection_resumes_at as timestamp) as pause_collection_resumes_at,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n    \n        and coalesce(_fivetran_active, true)\n    \n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__card": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__card", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__card.sql", "original_file_path": "models/stg_stripe__card.sql", "unique_id": "model.stripe_source.stg_stripe__card", "fqn": ["stripe_source", "stg_stripe__card"], "alias": "stg_stripe__card", "checksum": {"name": "sha256", "checksum": "9a52adcc9da995a8748db3da531307ec616c7f29d1b5e5a5a46e552f766ad6a3"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Details of a credit card that has been saved to the system.", "columns": {"card_id": {"name": "card_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of account that this card is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_city": {"name": "card_address_city", "description": "City, district, suburb, town, or village.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_country": {"name": "card_address_country", "description": "Two-letter country code (ISO 3166-1 alpha-2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_line_1": {"name": "card_address_line_1", "description": "Address line 1 (e.g., street, PO Box, or company name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_line_2": {"name": "card_address_line_2", "description": "Address line 2 (e.g., apartment, suite, unit, or building).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_state": {"name": "card_address_state", "description": "State, county, province, or region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_postal_code": {"name": "card_address_postal_code", "description": "ZIP or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you\u2019ve collected.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the entry for the card was created", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The customer that this card belongs to.  NULL if belongs to an account or recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_name": {"name": "card_name", "description": "Cardholder name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "funding": {"name": "funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wallet_type": {"name": "wallet_type", "description": "The type of the card wallet, one of amex_express_checkout, apple_pay, google_pay, masterpass, samsung_pay, or visa_checkout. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1709229533.149326, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__card`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__card_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__card_tmp')),\n                staging_columns=get_card_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas', \n            union_database_variable='stripe_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as card_id,\n        account_id,\n        address_city as card_address_city,\n        address_country as card_address_country,\n        address_line_1 as card_address_line_1,\n        address_line_2 as card_address_line_2,\n        address_state as card_address_state,\n        address_zip as card_address_postal_code,\n        wallet_type,\n        brand,\n        country,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        customer_id,\n        name as card_name,\n        recipient,\n        funding,\n        source_relation\n        \n        {% if var('stripe__card_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__card_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__card_tmp", "package": null, "version": null}, {"name": "stg_stripe__card_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_card_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp"], "nodes": ["model.stripe_source.stg_stripe__card_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__card.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__card_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_1_check\n    \n as \n    \n    address_line_1_check\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    address_zip\n    \n as \n    \n    address_zip\n    \n, \n    \n    \n    address_zip_check\n    \n as \n    \n    address_zip_check\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    cvc_check\n    \n as \n    \n    cvc_check\n    \n, \n    \n    \n    dynamic_last_4\n    \n as \n    \n    dynamic_last_4\n    \n, \n    \n    \n    exp_month\n    \n as \n    \n    exp_month\n    \n, \n    \n    \n    exp_year\n    \n as \n    \n    exp_year\n    \n, \n    \n    \n    fingerprint\n    \n as \n    \n    fingerprint\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_4\n    \n as \n    \n    last_4\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    network\n    \n as \n    \n    network\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    tokenization_method\n    \n as \n    \n    tokenization_method\n    \n, \n    cast(null as string) as \n    \n    wallet_type\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as card_id,\n        account_id,\n        address_city as card_address_city,\n        address_country as card_address_country,\n        address_line_1 as card_address_line_1,\n        address_line_2 as card_address_line_2,\n        address_state as card_address_state,\n        address_zip as card_address_postal_code,\n        wallet_type,\n        brand,\n        country,\n        cast(created as timestamp) as created_at,\n        customer_id,\n        name as card_name,\n        recipient,\n        funding,\n        source_relation\n        \n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__invoice": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__invoice", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__invoice.sql", "original_file_path": "models/stg_stripe__invoice.sql", "unique_id": "model.stripe_source.stg_stripe__invoice", "fqn": ["stripe_source", "stg_stripe__invoice"], "alias": "stg_stripe__invoice", "checksum": {"name": "sha256", "checksum": "689033261a37972f23753ba9849be5ca546de996860cfab1ad632682e8da2949"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "Final amount due at this time for this invoice. If the invoice\u2019s total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, in cents, that was paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount remaining, in cents, that is due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auto_advance": {"name": "auto_advance", "description": "Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice\u2019s state will not automatically advance without an explicit action.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_reason": {"name": "billing_reason", "description": "Indicates the reason why the invoice was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the latest charge generated for this invoice, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the customer who will be billed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. Referenced as \u2018memo\u2019 in the Dashboard.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date on which payment for this invoice is due. This value will be null for invoices where collection_method=charge_automatically.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_paid": {"name": "is_paid", "description": "Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer\u2019s account balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The ID of the subscription that the invoice pertains to,.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Total of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_percent": {"name": "tax_percent", "description": "The percent used to calculate the tax amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total": {"name": "total", "description": "Total after discounts and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_start": {"name": "period_start", "description": "Start of the usage period during for which the invoice was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_end": {"name": "period_end", "description": "End of the usage period during for which the invoice was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "ID of the default payment method in this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "ID of the PaymentIntent associated with this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "post_payment_credit_notes_amount": {"name": "post_payment_credit_notes_amount", "description": "Total amount of all post-payment credit notes issued for this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pre_payment_credit_notes_amount": {"name": "pre_payment_credit_notes_amount", "description": "Total amount of all pre-payment credit notes issued for this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_transitions_finalized_at": {"name": "status_transitions_finalized_at", "description": "The time that the invoice draft was finalized.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_transitions_marked_uncollectible_at": {"name": "status_transitions_marked_uncollectible_at", "description": "The time that the invoice was marked uncollectible.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_transitions_paid_at": {"name": "status_transitions_paid_at", "description": "The time that the invoice was paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_transitions_voided_at": {"name": "status_transitions_voided_at", "description": "The time that the invoice was voided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": true}, "created_at": 1709229533.170751, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice`", "raw_code": "{{ config(enabled=var('stripe__using_invoices', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__invoice_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__invoice_tmp')),\n                staging_columns=get_invoice_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas',\n            union_database_variable='stripe_union_databases')\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        default_payment_method_id,\n        payment_intent_id,\n        subscription_id,\n        amount_due,\n        amount_paid,\n        amount_remaining,\n        post_payment_credit_notes_amount,\n        pre_payment_credit_notes_amount,\n        attempt_count,\n        auto_advance,\n        billing_reason,\n        charge_id,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        currency,\n        customer_id,\n        description,\n        due_date,\n        metadata,\n        number,\n        paid as is_paid,\n        receipt_number,\n        status,\n        subtotal,\n        tax,\n        tax_percent,\n        total,\n        period_start,\n        period_end,\n        cast(status_transitions_finalized_at as {{ dbt.type_timestamp() }}) as status_transitions_finalized_at,\n        cast(status_transitions_marked_uncollectible_at as {{ dbt.type_timestamp() }}) as status_transitions_marked_uncollectible_at,\n        cast(status_transitions_paid_at as {{ dbt.type_timestamp() }}) as status_transitions_paid_at,\n        cast(status_transitions_voided_at as {{ dbt.type_timestamp() }}) as status_transitions_voided_at,\n        source_relation\n\n        {% if var('stripe__invoice_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__invoice_metadata')) }}\n        {% endif %}\n\n    from fields\n    {{ livemode_predicate() }}\n    and not coalesce(is_deleted, false)\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__invoice_tmp", "package": null, "version": null}, {"name": "stg_stripe__invoice_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_invoice_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.stripe_source.livemode_predicate"], "nodes": ["model.stripe_source.stg_stripe__invoice_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__invoice.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as INT64) as \n    \n    amount_due\n    \n , \n    cast(null as INT64) as \n    \n    amount_paid\n    \n , \n    cast(null as INT64) as \n    \n    amount_remaining\n    \n , \n    cast(null as INT64) as \n    \n    application_fee_amount\n    \n , \n    cast(null as INT64) as \n    \n    post_payment_credit_notes_amount\n    \n , \n    cast(null as INT64) as \n    \n    pre_payment_credit_notes_amount\n    \n , \n    cast(null as INT64) as \n    \n    attempt_count\n    \n , \n    cast(null as boolean) as \n    \n    attempted\n    \n , \n    cast(null as boolean) as \n    \n    auto_advance\n    \n , \n    cast(null as string) as \n    \n    billing\n    \n , \n    cast(null as string) as \n    \n    billing_reason\n    \n , \n    cast(null as string) as \n    \n    charge_id\n    \n , \n    cast(null as timestamp) as \n    \n    created\n    \n , \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    cast(null as string) as \n    \n    default_source_id\n    \n , \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as timestamp) as \n    \n    due_date\n    \n , \n    cast(null as INT64) as \n    \n    ending_balance\n    \n , \n    cast(null as timestamp) as \n    \n    finalized_at\n    \n , \n    cast(null as string) as \n    \n    footer\n    \n , \n    cast(null as string) as \n    \n    hosted_invoice_url\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as string) as \n    \n    invoice_pdf\n    \n , \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as string) as \n    \n    metadata\n    \n , \n    cast(null as timestamp) as \n    \n    next_payment_attempt\n    \n , \n    cast(null as string) as \n    \n    number\n    \n , \n    cast(null as boolean) as \n    \n    paid\n    \n , \n    cast(null as string) as \n    \n    default_payment_method_id\n    \n , \n    cast(null as string) as \n    \n    payment_intent_id\n    \n , \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    cast(null as string) as \n    \n    receipt_number\n    \n , \n    cast(null as INT64) as \n    \n    starting_balance\n    \n , \n    cast(null as string) as \n    \n    statement_descriptor\n    \n , \n    cast(null as string) as \n    \n    status\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_finalized_at\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_marked_uncollectible_at\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_paid_at\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_voided_at\n    \n , \n    cast(null as INT64) as \n    \n    subscription_proration_date\n    \n , \n    cast(null as INT64) as \n    \n    subtotal\n    \n , \n    cast(null as INT64) as \n    \n    tax\n    \n , \n    cast(null as numeric) as \n    \n    tax_percent\n    \n , \n    cast(null as INT64) as \n    \n    threshold_reason_amount_gte\n    \n , \n    cast(null as INT64) as \n    \n    total\n    \n , \n    cast(null as timestamp) as \n    \n    webhooks_delivered_at\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        default_payment_method_id,\n        payment_intent_id,\n        subscription_id,\n        amount_due,\n        amount_paid,\n        amount_remaining,\n        post_payment_credit_notes_amount,\n        pre_payment_credit_notes_amount,\n        attempt_count,\n        auto_advance,\n        billing_reason,\n        charge_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        customer_id,\n        description,\n        due_date,\n        metadata,\n        number,\n        paid as is_paid,\n        receipt_number,\n        status,\n        subtotal,\n        tax,\n        tax_percent,\n        total,\n        period_start,\n        period_end,\n        cast(status_transitions_finalized_at as timestamp) as status_transitions_finalized_at,\n        cast(status_transitions_marked_uncollectible_at as timestamp) as status_transitions_marked_uncollectible_at,\n        cast(status_transitions_paid_at as timestamp) as status_transitions_paid_at,\n        cast(status_transitions_voided_at as timestamp) as status_transitions_voided_at,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n    and not coalesce(is_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__payout": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__payout", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__payout.sql", "original_file_path": "models/stg_stripe__payout.sql", "unique_id": "model.stripe_source.stg_stripe__payout", "fqn": ["stripe_source", "stg_stripe__payout"], "alias": "stg_stripe__payout", "checksum": {"name": "sha256", "checksum": "efdfc1fb8ac6943fc8f9cacec50841ed0e266ed8a48188b39e769868b8fef2ec"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.", "columns": {"payout_id": {"name": "payout_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount (in cents) to be transferred to your bank account or debit card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "arrival_date_at": {"name": "arrival_date_at", "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_automatic": {"name": "is_automatic", "description": "true if the payout was created by an automated payout schedule, and false if it was requested manually.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this payout on your account balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "destination_bank_account_id": {"name": "destination_bank_account_id", "description": "ID of the bank account the payout was sent to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "destination_card_id": {"name": "destination_card_id", "description": "ID of the card the payout was sent to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "method": {"name": "method", "description": "The method used to send this payout, which can be standard or instant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The source balance this payout came from. One of card, fpx, or bank_account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Can be bank_account or card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1709229533.164043, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payout`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__payout_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__payout_tmp')),\n                staging_columns=get_payout_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas',\n            union_database_variable='stripe_union_databases')\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payout_id,\n        amount,\n        cast(arrival_date as {{ dbt.type_timestamp() }}) as arrival_date_at,\n        automatic as is_automatic,\n        balance_transaction_id,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        currency,\n        description,\n        destination_bank_account_id,\n        destination_card_id,\n        metadata,\n        method,\n        source_type,\n        status,\n        type,\n        source_relation\n\n        {% if var('stripe__payout_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__payout_metadata')) }}\n        {% endif %}\n\n    from fields\n    {{ livemode_predicate() }}\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__payout_tmp", "package": null, "version": null}, {"name": "stg_stripe__payout_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_payout_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.stripe_source.livemode_predicate"], "nodes": ["model.stripe_source.stg_stripe__payout_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__payout.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payout_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    arrival_date\n    \n as \n    \n    arrival_date\n    \n, \n    \n    \n    automatic\n    \n as \n    \n    automatic\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination_bank_account_id\n    \n as \n    \n    destination_bank_account_id\n    \n, \n    \n    \n    destination_card_id\n    \n as \n    \n    destination_card_id\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    method\n    \n as \n    \n    method\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payout_id,\n        amount,\n        cast(arrival_date as timestamp) as arrival_date_at,\n        automatic as is_automatic,\n        balance_transaction_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        description,\n        destination_bank_account_id,\n        destination_card_id,\n        metadata,\n        method,\n        source_type,\n        status,\n        type,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__charge": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__charge", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__charge.sql", "original_file_path": "models/stg_stripe__charge.sql", "unique_id": "model.stripe_source.stg_stripe__charge", "fqn": ["stripe_source", "stg_stripe__charge"], "alias": "stg_stripe__charge", "checksum": {"name": "sha256", "checksum": "c9d5c8785754bba4c1750b2ee320e908259820faee25dea4459515d2751c2081"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.", "columns": {"charge_id": {"name": "charge_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_refunded": {"name": "amount_refunded", "description": "The amount of the charge, if any, that has been refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_captured": {"name": "is_captured", "description": "If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_id": {"name": "card_id", "description": "ID of the card that was charged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the charge took place.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_id": {"name": "connected_account_id", "description": "ID of account connected for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer this charge is for if one exists.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failure_code": {"name": "failure_code", "description": "Error code explaining reason for charge failure if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failure_message": {"name": "failure_message", "description": "Message to user further explaining reason for charge failure if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_paid": {"name": "is_paid", "description": "true if the charge succeeded, or was successfully authorized for later capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "ID of the PaymentIntent associated with this charge, if one exists.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "This is the email address that the receipt for this charge was sent to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_refunded": {"name": "is_refunded", "description": "Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the payment is either succeeded, pending, or failed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "City, district, suburb, town, or village.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Two-letter country code (ISO 3166-1 alpha-2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Address line 1 (e.g., street, PO Box, or company name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Address line 2 (e.g., apartment, suite, unit, or building).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "ZIP or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "State, county, province, or region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_carrier": {"name": "shipping_carrier", "description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Recipient name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Recipient phone (including extension).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_tracking_number": {"name": "shipping_tracking_number", "description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "ID of the source associated. Source objects allow you to accept a variety of payment methods. They represent a cu", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_transfer": {"name": "source_transfer", "description": "The transfer ID which created this charge. Only present if the charge came from another Stripe account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "statement_descriptor": {"name": "statement_descriptor", "description": "Extra information about a source. This will appear on your customer\u2019s statement every time you charge the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "Unique identifier for the payment method object used in this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calculated_statement_descriptor": {"name": "calculated_statement_descriptor", "description": "The full statement descriptor that is passed to card networks, and that is displayed on your customers\u2019 credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_address_city": {"name": "billing_detail_address_city", "description": "City, district, suburb, town, or village.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_address_country": {"name": "billing_detail_address_country", "description": "Two-letter country code (ISO 3166-1 alpha-2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_address_line1": {"name": "billing_detail_address_line1", "description": "Address line 1 (e.g., street, PO Box, or company name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_address_line2": {"name": "billing_detail_address_line2", "description": "Address line 2 (e.g., apartment, suite, unit, or building).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_address_postal_code": {"name": "billing_detail_address_postal_code", "description": "ZIP or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_address_state": {"name": "billing_detail_address_state", "description": "State, county, province, or region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_email": {"name": "billing_detail_email", "description": "Email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_name": {"name": "billing_detail_name", "description": "Full name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_phone": {"name": "billing_detail_phone", "description": "Billing phone number (including extension).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1709229533.1557271, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__charge_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__charge_tmp')),\n                staging_columns=get_charge_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas', \n            union_database_variable='stripe_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n\n    select \n        id as charge_id, \n        amount,\n        amount_refunded,\n        application_fee_amount,\n        balance_transaction_id,\n        captured as is_captured,\n        card_id,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        connected_account_id,\n        customer_id,\n        currency,\n        description,\n        failure_code,\n        failure_message,\n        metadata,\n        paid as is_paid,\n        payment_intent_id,\n        payment_method_id,\n        receipt_email,\n        receipt_number,\n        refunded as is_refunded,\n        status,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_carrier,\n        shipping_name,\n        shipping_phone,\n        shipping_tracking_number,\n        source_id,\n        source_transfer,\n        statement_descriptor,\n        invoice_id,\n        calculated_statement_descriptor,\n        billing_detail_address_city,\n        billing_detail_address_country,\n        billing_detail_address_line1,\n        billing_detail_address_line2,\n        billing_detail_address_postal_code,\n        billing_detail_address_state,\n        billing_detail_email,\n        billing_detail_name,\n        billing_detail_phone,\n        source_relation\n\n        {% if var('stripe__charge_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__charge_metadata')) }}\n        {% endif %}\n\n    from fields\n    {{ livemode_predicate() }}\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__charge_tmp", "package": null, "version": null}, {"name": "stg_stripe__charge_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_charge_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.stripe_source.livemode_predicate"], "nodes": ["model.stripe_source.stg_stripe__charge_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__charge.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_refunded\n    \n as \n    \n    amount_refunded\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    calculated_statement_descriptor\n    \n as \n    \n    calculated_statement_descriptor\n    \n, \n    \n    \n    captured\n    \n as \n    \n    captured\n    \n, \n    \n    \n    card_id\n    \n as \n    \n    card_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    fraud_details_stripe_report\n    \n as \n    \n    fraud_details_stripe_report\n    \n, \n    \n    \n    fraud_details_user_report\n    \n as \n    \n    fraud_details_user_report\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    outcome_network_status\n    \n as \n    \n    outcome_network_status\n    \n, \n    \n    \n    outcome_reason\n    \n as \n    \n    outcome_reason\n    \n, \n    \n    \n    outcome_risk_level\n    \n as \n    \n    outcome_risk_level\n    \n, \n    \n    \n    outcome_risk_score\n    \n as \n    \n    outcome_risk_score\n    \n, \n    \n    \n    outcome_seller_message\n    \n as \n    \n    outcome_seller_message\n    \n, \n    \n    \n    outcome_type\n    \n as \n    \n    outcome_type\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    payment_intent_id\n    \n as \n    \n    payment_intent_id\n    \n, \n    cast(null as string) as \n    \n    payment_method_id\n    \n , \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    receipt_url\n    \n as \n    \n    receipt_url\n    \n, \n    \n    \n    refunded\n    \n as \n    \n    refunded\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    source_transfer\n    \n as \n    \n    source_transfer\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    cast(null as string) as \n    \n    billing_detail_address_city\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_country\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_line1\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_line2\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_postal_code\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_state\n    \n , \n    cast(null as string) as \n    \n    billing_detail_email\n    \n , \n    cast(null as string) as \n    \n    billing_detail_name\n    \n , \n    cast(null as string) as \n    \n    billing_detail_phone\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select \n        id as charge_id, \n        amount,\n        amount_refunded,\n        application_fee_amount,\n        balance_transaction_id,\n        captured as is_captured,\n        card_id,\n        cast(created as timestamp) as created_at,\n        connected_account_id,\n        customer_id,\n        currency,\n        description,\n        failure_code,\n        failure_message,\n        metadata,\n        paid as is_paid,\n        payment_intent_id,\n        payment_method_id,\n        receipt_email,\n        receipt_number,\n        refunded as is_refunded,\n        status,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_carrier,\n        shipping_name,\n        shipping_phone,\n        shipping_tracking_number,\n        source_id,\n        source_transfer,\n        statement_descriptor,\n        invoice_id,\n        calculated_statement_descriptor,\n        billing_detail_address_city,\n        billing_detail_address_country,\n        billing_detail_address_line1,\n        billing_detail_address_line2,\n        billing_detail_address_postal_code,\n        billing_detail_address_state,\n        billing_detail_email,\n        billing_detail_name,\n        billing_detail_phone,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__balance_transaction": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__balance_transaction", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__balance_transaction.sql", "original_file_path": "models/stg_stripe__balance_transaction.sql", "unique_id": "model.stripe_source.stg_stripe__balance_transaction", "fqn": ["stripe_source", "stg_stripe__balance_transaction"], "alias": "stg_stripe__balance_transaction", "checksum": {"name": "sha256", "checksum": "11c06802d6954d4503a6345fc8b2c64cad115cf0084c2fb9e93c2f8c2794a9af"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Gross amount of the transaction, in cents.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the transaction\u2019s net funds will become available in the Stripe balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_id": {"name": "connected_account_id", "description": "The ID of the account connected to the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the transaction was created, in UTC.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the amount in currency A, times exchange_rate, would be the amount in currency B.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fee": {"name": "fee", "description": "fees (in cents) paid for this transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction, in cents.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reporting_category": {"name": "reporting_category", "description": "Improves on the type field by providing a more-useful grouping for most finance and reporting purposes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "If the transaction\u2019s net funds are available in the Stripe balance yet. Either 'available' or 'pending'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of transaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1709229533.1464388, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__balance_transaction`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__balance_transaction_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__balance_transaction_tmp')),\n                staging_columns=get_balance_transaction_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas', \n            union_database_variable='stripe_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as balance_transaction_id,\n        amount,\n        cast(available_on as {{ dbt.type_timestamp() }}) as available_on,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        connected_account_id,\n        currency,\n        description,\n        exchange_rate,\n        fee,\n        net,\n        reporting_category,\n        source,\n        status,\n        type,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__balance_transaction_tmp", "package": null, "version": null}, {"name": "stg_stripe__balance_transaction_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_balance_transaction_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp"], "nodes": ["model.stripe_source.stg_stripe__balance_transaction_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__balance_transaction.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__balance_transaction_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    available_on\n    \n as \n    \n    available_on\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    fee\n    \n as \n    \n    fee\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    net\n    \n as \n    \n    net\n    \n, \n    \n    \n    payout_id\n    \n as \n    \n    payout_id\n    \n, \n    cast(null as string) as \n    \n    reporting_category\n    \n , \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as balance_transaction_id,\n        amount,\n        cast(available_on as timestamp) as available_on,\n        cast(created as timestamp) as created_at,\n        connected_account_id,\n        currency,\n        description,\n        exchange_rate,\n        fee,\n        net,\n        reporting_category,\n        source,\n        status,\n        type,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__dispute": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__dispute", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__dispute.sql", "original_file_path": "models/stg_stripe__dispute.sql", "unique_id": "model.stripe_source.stg_stripe__dispute", "fqn": ["stripe_source", "stg_stripe__dispute"], "alias": "stg_stripe__dispute", "checksum": {"name": "sha256", "checksum": "4283253e09bf974eaf57be44a1e006091f5bf26e7b21ebe481fa0aaee2e78f68"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Properties belonging to a Stripe dispute.", "columns": {"dispute_id": {"name": "dispute_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispute_amount": {"name": "dispute_amount", "description": "Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction": {"name": "balance_transaction", "description": "List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the charge that was disputed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_id": {"name": "connected_account_id", "description": "Account id associated with this dispute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispute_created_at": {"name": "dispute_created_at", "description": "Time at which the object was created. Measured in seconds since the Unix epoch.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispute_currency": {"name": "dispute_currency", "description": "Three-letter ISO currency code, in lowercase. Must be a supported currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_access_activity_log": {"name": "evidence_access_activity_log", "description": "Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_billing_address": {"name": "evidence_billing_address", "description": "The billing address provided by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_cancellation_policy": {"name": "evidence_cancellation_policy", "description": "(ID of a file upload) Your subscription cancellation policy, as shown to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_cancellation_policy_disclosure": {"name": "evidence_cancellation_policy_disclosure", "description": "An explanation of how and when the customer was shown your refund policy prior to purchase. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_cancellation_rebuttal": {"name": "evidence_cancellation_rebuttal", "description": "A justification for why the customer\u2019s subscription was not canceled. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_customer_communication": {"name": "evidence_customer_communication", "description": "(ID of a file upload) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_customer_email_address": {"name": "evidence_customer_email_address", "description": "The email address of the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_customer_name": {"name": "evidence_customer_name", "description": "The name of the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_customer_purchase_ip": {"name": "evidence_customer_purchase_ip", "description": "The IP address that the customer used when making the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_customer_signature": {"name": "evidence_customer_signature", "description": "(ID of a file upload) A relevant document or contract showing the customer\u2019s signature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_details_due_by": {"name": "evidence_details_due_by", "description": "Date by which evidence must be submitted in order to successfully challenge dispute. Will be 0 if the customer\u2019s bank or credit card company doesn\u2019t allow a response for this particular dispute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_details_has_evidence": {"name": "evidence_details_has_evidence", "description": "Whether evidence has been staged for this dispute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_details_past_due": {"name": "evidence_details_past_due", "description": "Whether the last evidence submission was submitted past the due date. Defaults to false if no evidence submissions have occurred. If true, then delivery of the latest evidence is not guaranteed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_details_submission_count": {"name": "evidence_details_submission_count", "description": "The number of times evidence has been submitted. Typically, you may only submit evidence once.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_duplicate_charge_documentation": {"name": "evidence_duplicate_charge_documentation", "description": "(ID of a file upload) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_duplicate_charge_explanation": {"name": "evidence_duplicate_charge_explanation", "description": "An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_duplicate_charge_id": {"name": "evidence_duplicate_charge_id", "description": "The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_product_description": {"name": "evidence_product_description", "description": "A description of the product or service that was sold. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_receipt": {"name": "evidence_receipt", "description": "(ID of a file upload) Any receipt or message sent to the customer notifying them of the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_refund_policy": {"name": "evidence_refund_policy", "description": "(ID of a file upload) Your refund policy, as shown to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_refund_policy_disclosure": {"name": "evidence_refund_policy_disclosure", "description": "Documentation demonstrating that the customer was shown your refund policy prior to purchase. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_refund_refusal_explanation": {"name": "evidence_refund_refusal_explanation", "description": "A justification for why the customer is not entitled to a refund. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_service_date": {"name": "evidence_service_date", "description": "The date on which the customer received or began receiving the purchased service, in a clear human-readable format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_service_documentation": {"name": "evidence_service_documentation", "description": "(ID of a file upload) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_shipping_address": {"name": "evidence_shipping_address", "description": "The address to which a physical product was shipped. You should try to include as complete address information as possible.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_shipping_carrier": {"name": "evidence_shipping_carrier", "description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_shipping_date": {"name": "evidence_shipping_date", "description": "The date on which a physical product began its route to the shipping address, in a clear human-readable format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_shipping_documentation": {"name": "evidence_shipping_documentation", "description": "(ID of a file upload) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer\u2019s full shipping address, if possible.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_shipping_tracking_number": {"name": "evidence_shipping_tracking_number", "description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_uncategorized_file": {"name": "evidence_uncategorized_file", "description": "(ID of a file upload) Any additional evidence or statements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_uncategorized_text": {"name": "evidence_uncategorized_text", "description": "Any additional evidence or statements. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_charge_refundable": {"name": "is_charge_refundable", "description": "Boolean ff true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispute_metadata": {"name": "dispute_metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispute_reason": {"name": "dispute_reason", "description": "Reason given by cardholder for dispute. Possible values are bank_cannot_process, check_returned, credit_not_processed, customer_initiated, debit_not_authorized, duplicate, fraudulent, general, incorrect_account_details, insufficient_funds, product_not_received, product_unacceptable, subscription_canceled, or unrecognized.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispute_status": {"name": "dispute_status", "description": "Current status of dispute. Possible values are warning_needs_response, warning_under_review, warning_closed, needs_response, under_review, won, or lost.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1709229533.1889029, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__dispute`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__dispute_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__dispute_tmp')),\n                staging_columns=get_dispute_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas', \n            union_database_variable='stripe_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as dispute_id,\n        amount as dispute_amount,\n        balance_transaction,\n        charge_id,\n        connected_account_id,\n        cast(created as {{ dbt.type_timestamp() }}) as dispute_created_at,\n        currency as dispute_currency,\n        evidence_access_activity_log,\n        evidence_billing_address,\n        evidence_cancellation_policy,\n        evidence_cancellation_policy_disclosure,\n        evidence_cancellation_rebuttal,\n        evidence_customer_communication,\n        evidence_customer_email_address,\n        evidence_customer_name,\n        evidence_customer_purchase_ip,\n        evidence_customer_signature,\n        evidence_details_due_by,\n        evidence_details_has_evidence,\n        evidence_details_past_due,\n        evidence_details_submission_count,\n        evidence_duplicate_charge_documentation,\n        evidence_duplicate_charge_explanation,\n        evidence_duplicate_charge_id,\n        evidence_product_description,\n        evidence_receipt,\n        evidence_refund_policy,\n        evidence_refund_policy_disclosure,\n        evidence_refund_refusal_explanation,\n        evidence_service_date,\n        evidence_service_documentation,\n        evidence_shipping_address,\n        evidence_shipping_carrier,\n        evidence_shipping_date,\n        evidence_shipping_documentation,\n        evidence_shipping_tracking_number,\n        evidence_uncategorized_file,\n        evidence_uncategorized_text,\n        is_charge_refundable,\n        metadata as dispute_metadata,\n        reason as dispute_reason,\n        status as dispute_status,\n        source_relation\n        \n        {% if var('stripe__dispute_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__dispute_metadata')) }}\n        {% endif %}\n\n    from fields\n    {{ livemode_predicate() }}\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__dispute_tmp", "package": null, "version": null}, {"name": "stg_stripe__dispute_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_dispute_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.stripe_source.livemode_predicate"], "nodes": ["model.stripe_source.stg_stripe__dispute_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__dispute.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__dispute_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction\n    \n as \n    \n    balance_transaction\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    evidence_access_activity_log\n    \n as \n    \n    evidence_access_activity_log\n    \n, \n    \n    \n    evidence_billing_address\n    \n as \n    \n    evidence_billing_address\n    \n, \n    \n    \n    evidence_cancellation_policy\n    \n as \n    \n    evidence_cancellation_policy\n    \n, \n    \n    \n    evidence_cancellation_policy_disclosure\n    \n as \n    \n    evidence_cancellation_policy_disclosure\n    \n, \n    \n    \n    evidence_cancellation_rebuttal\n    \n as \n    \n    evidence_cancellation_rebuttal\n    \n, \n    \n    \n    evidence_customer_communication\n    \n as \n    \n    evidence_customer_communication\n    \n, \n    \n    \n    evidence_customer_email_address\n    \n as \n    \n    evidence_customer_email_address\n    \n, \n    \n    \n    evidence_customer_name\n    \n as \n    \n    evidence_customer_name\n    \n, \n    \n    \n    evidence_customer_purchase_ip\n    \n as \n    \n    evidence_customer_purchase_ip\n    \n, \n    \n    \n    evidence_customer_signature\n    \n as \n    \n    evidence_customer_signature\n    \n, \n    \n    \n    evidence_details_due_by\n    \n as \n    \n    evidence_details_due_by\n    \n, \n    \n    \n    evidence_details_has_evidence\n    \n as \n    \n    evidence_details_has_evidence\n    \n, \n    \n    \n    evidence_details_past_due\n    \n as \n    \n    evidence_details_past_due\n    \n, \n    \n    \n    evidence_details_submission_count\n    \n as \n    \n    evidence_details_submission_count\n    \n, \n    \n    \n    evidence_duplicate_charge_documentation\n    \n as \n    \n    evidence_duplicate_charge_documentation\n    \n, \n    \n    \n    evidence_duplicate_charge_explanation\n    \n as \n    \n    evidence_duplicate_charge_explanation\n    \n, \n    \n    \n    evidence_duplicate_charge_id\n    \n as \n    \n    evidence_duplicate_charge_id\n    \n, \n    \n    \n    evidence_product_description\n    \n as \n    \n    evidence_product_description\n    \n, \n    \n    \n    evidence_receipt\n    \n as \n    \n    evidence_receipt\n    \n, \n    \n    \n    evidence_refund_policy\n    \n as \n    \n    evidence_refund_policy\n    \n, \n    \n    \n    evidence_refund_policy_disclosure\n    \n as \n    \n    evidence_refund_policy_disclosure\n    \n, \n    \n    \n    evidence_refund_refusal_explanation\n    \n as \n    \n    evidence_refund_refusal_explanation\n    \n, \n    \n    \n    evidence_service_date\n    \n as \n    \n    evidence_service_date\n    \n, \n    \n    \n    evidence_service_documentation\n    \n as \n    \n    evidence_service_documentation\n    \n, \n    \n    \n    evidence_shipping_address\n    \n as \n    \n    evidence_shipping_address\n    \n, \n    \n    \n    evidence_shipping_carrier\n    \n as \n    \n    evidence_shipping_carrier\n    \n, \n    \n    \n    evidence_shipping_date\n    \n as \n    \n    evidence_shipping_date\n    \n, \n    \n    \n    evidence_shipping_documentation\n    \n as \n    \n    evidence_shipping_documentation\n    \n, \n    \n    \n    evidence_shipping_tracking_number\n    \n as \n    \n    evidence_shipping_tracking_number\n    \n, \n    \n    \n    evidence_uncategorized_file\n    \n as \n    \n    evidence_uncategorized_file\n    \n, \n    \n    \n    evidence_uncategorized_text\n    \n as \n    \n    evidence_uncategorized_text\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_charge_refundable\n    \n as \n    \n    is_charge_refundable\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as dispute_id,\n        amount as dispute_amount,\n        balance_transaction,\n        charge_id,\n        connected_account_id,\n        cast(created as timestamp) as dispute_created_at,\n        currency as dispute_currency,\n        evidence_access_activity_log,\n        evidence_billing_address,\n        evidence_cancellation_policy,\n        evidence_cancellation_policy_disclosure,\n        evidence_cancellation_rebuttal,\n        evidence_customer_communication,\n        evidence_customer_email_address,\n        evidence_customer_name,\n        evidence_customer_purchase_ip,\n        evidence_customer_signature,\n        evidence_details_due_by,\n        evidence_details_has_evidence,\n        evidence_details_past_due,\n        evidence_details_submission_count,\n        evidence_duplicate_charge_documentation,\n        evidence_duplicate_charge_explanation,\n        evidence_duplicate_charge_id,\n        evidence_product_description,\n        evidence_receipt,\n        evidence_refund_policy,\n        evidence_refund_policy_disclosure,\n        evidence_refund_refusal_explanation,\n        evidence_service_date,\n        evidence_service_documentation,\n        evidence_shipping_address,\n        evidence_shipping_carrier,\n        evidence_shipping_date,\n        evidence_shipping_documentation,\n        evidence_shipping_tracking_number,\n        evidence_uncategorized_file,\n        evidence_uncategorized_text,\n        is_charge_refundable,\n        metadata as dispute_metadata,\n        reason as dispute_reason,\n        status as dispute_status,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__account": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__account", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__account.sql", "original_file_path": "models/stg_stripe__account.sql", "unique_id": "model.stripe_source.stg_stripe__account", "fqn": ["stripe_source", "stg_stripe__account"], "alias": "stg_stripe__account", "checksum": {"name": "sha256", "checksum": "5a3e2b6ad8af922245a5c7d7dc338447867425e7e35cb5cee2003d01b408bff3"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Properties belonging to a Stripe account.", "columns": {"account_id": {"name": "account_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_profile_name": {"name": "business_profile_name", "description": "The customer-facing business name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_type": {"name": "business_type", "description": "The business type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_profile_mcc": {"name": "business_profile_mcc", "description": "The merchant category code for the account. MCCs are used to classify businesses based on the goods or services they provide.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charges_enabled": {"name": "charges_enabled", "description": "Whether the account can create live charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_address_city": {"name": "company_address_city", "description": "City, district, suburb, town, or village.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_address_country": {"name": "company_address_country", "description": "Two-letter country code (ISO 3166-1 alpha-2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_address_line_1": {"name": "company_address_line_1", "description": "Address line 1 (e.g., street, PO Box, or company name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_address_line_2": {"name": "company_address_line_2", "description": "Address line 2 (e.g., apartment, suite, unit, or building).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_address_postal_code": {"name": "company_address_postal_code", "description": "ZIP or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_address_state": {"name": "company_address_state", "description": "State, county, province, or region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The company\u2019s legal name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_phone": {"name": "company_phone", "description": "The company\u2019s phone number (used for verification).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "The account's country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the account was connected. Measured in seconds since the Unix epoch.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_currency": {"name": "default_currency", "description": "Three-letter ISO currency code representing the default currency for the account. This must be a currency that Stripe supports in the account\u2019s country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "An email address associated with the account. You can treat this as metadata; it is not used for authentication or messaging account holders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Boolean of whether account has been deleted. Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_payouts_enabled": {"name": "is_payouts_enabled", "description": "Boolean of whether payouts are enabled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_type": {"name": "account_type", "description": "Account type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1709229533.1824021, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__account_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__account_tmp')),\n                staging_columns=get_account_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas', \n            union_database_variable='stripe_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        business_profile_mcc,\n        business_profile_name,\n        business_type,\n        charges_enabled,\n        company_address_city,\n        company_address_country,\n        company_address_line_1,\n        company_address_line_2,\n        company_address_postal_code,\n        company_address_state,\n        company_name,\n        company_phone,\n        country,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        default_currency,\n        email,\n        is_deleted,\n        metadata,\n        payouts_enabled as is_payouts_enabled,\n        type as account_type,\n        source_relation\n\n        {% if var('stripe__account_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__account_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__account_tmp", "package": null, "version": null}, {"name": "stg_stripe__account_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_account_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp"], "nodes": ["model.stripe_source.stg_stripe__account_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__account.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    business_profile_name\n    \n as \n    \n    business_profile_name\n    \n, \n    \n    \n    business_profile_mcc\n    \n as \n    \n    business_profile_mcc\n    \n, \n    \n    \n    business_type\n    \n as \n    \n    business_type\n    \n, \n    \n    \n    charges_enabled\n    \n as \n    \n    charges_enabled\n    \n, \n    \n    \n    company_address_city\n    \n as \n    \n    company_address_city\n    \n, \n    \n    \n    company_address_country\n    \n as \n    \n    company_address_country\n    \n, \n    \n    \n    company_address_line_1\n    \n as \n    \n    company_address_line_1\n    \n, \n    \n    \n    company_address_line_2\n    \n as \n    \n    company_address_line_2\n    \n, \n    \n    \n    company_address_postal_code\n    \n as \n    \n    company_address_postal_code\n    \n, \n    \n    \n    company_address_state\n    \n as \n    \n    company_address_state\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    company_phone\n    \n as \n    \n    company_phone\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    default_currency\n    \n as \n    \n    default_currency\n    \n, \n    \n    \n    details_submitted\n    \n as \n    \n    details_submitted\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    payouts_enabled\n    \n as \n    \n    payouts_enabled\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        business_profile_mcc,\n        business_profile_name,\n        business_type,\n        charges_enabled,\n        company_address_city,\n        company_address_country,\n        company_address_line_1,\n        company_address_line_2,\n        company_address_postal_code,\n        company_address_state,\n        company_name,\n        company_phone,\n        country,\n        cast(created as timestamp) as created_at,\n        default_currency,\n        email,\n        is_deleted,\n        metadata,\n        payouts_enabled as is_payouts_enabled,\n        type as account_type,\n        source_relation\n\n        \n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__fee": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__fee", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__fee.sql", "original_file_path": "models/stg_stripe__fee.sql", "unique_id": "model.stripe_source.stg_stripe__fee", "fqn": ["stripe_source", "stg_stripe__fee"], "alias": "stg_stripe__fee", "checksum": {"name": "sha256", "checksum": "408b9971428dc02c2eaf8b2768da4adda43b2b7f06b93e70d5482ae227f73a20"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "The details of a fee associated with a balance transaction", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction entry the fee applies to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "The index of the fee within the balance transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount of the fee, in cents.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that earned the fee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of the fee, can be application_fee, stripe_fee or tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1709229533.159486, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__fee`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__fee_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__fee_tmp')),\n                staging_columns=get_fee_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas',\n            union_database_variable='stripe_union_databases')\n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        balance_transaction_id,\n        index,\n        amount,\n        application,\n        currency,\n        description,\n        type,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__fee_tmp", "package": null, "version": null}, {"name": "stg_stripe__fee_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_fee_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.stripe_source.stg_stripe__fee_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__fee.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__fee_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        balance_transaction_id,\n        index,\n        amount,\n        application,\n        currency,\n        description,\n        type,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__payment_method_card": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__payment_method_card", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__payment_method_card.sql", "original_file_path": "models/stg_stripe__payment_method_card.sql", "unique_id": "model.stripe_source.stg_stripe__payment_method_card", "fqn": ["stripe_source", "stg_stripe__payment_method_card"], "alias": "stg_stripe__payment_method_card", "checksum": {"name": "sha256", "checksum": "34ca38ce560f62d5d1ff6535a1a571ad6cb0730d1291b2960d27d66bafa966d7"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Table with the relationships between a payment method and a card", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "funding": {"name": "funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the charge that this card belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wallet_type": {"name": "wallet_type", "description": "The type of the card wallet, one of amex_express_checkout, apple_pay, google_pay, masterpass, samsung_pay, or visa_checkout. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "three_d_secure_authentication_flow": {"name": "three_d_secure_authentication_flow", "description": "For authenticated transactions, how the customer was authenticated by the issuing bank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "three_d_secure_result": {"name": "three_d_secure_result", "description": "Indicates the outcome of 3D Secure authentication.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "three_d_secure_result_reason": {"name": "three_d_secure_result_reason", "description": "Additional information about why 3D Secure succeeded or failed based on the result.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "three_d_secure_version": {"name": "three_d_secure_version", "description": "The version of 3D Secure that was used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": true}, "created_at": 1709229533.162068, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_card`", "raw_code": "{{ config(enabled=var('stripe__using_payment_method', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__payment_method_card_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__payment_method_card_tmp')),\n                staging_columns=get_payment_method_card_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas',\n            union_database_variable='stripe_union_databases')\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        payment_method_id,\n        brand,\n        funding,\n        charge_id,\n        type,\n        wallet_type,\n        three_d_secure_authentication_flow,\n        three_d_secure_result,\n        three_d_secure_result_reason,\n        three_d_secure_version,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__payment_method_card_tmp", "package": null, "version": null}, {"name": "stg_stripe__payment_method_card_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_payment_method_card_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation"], "nodes": ["model.stripe_source.stg_stripe__payment_method_card_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__payment_method_card.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_card_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    wallet_type\n    \n as \n    \n    wallet_type\n    \n, \n    cast(null as string) as \n    \n    three_d_secure_authentication_flow\n    \n , \n    cast(null as string) as \n    \n    three_d_secure_result\n    \n , \n    cast(null as string) as \n    \n    three_d_secure_result_reason\n    \n , \n    cast(null as string) as \n    \n    three_d_secure_version\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        payment_method_id,\n        brand,\n        funding,\n        charge_id,\n        type,\n        wallet_type,\n        three_d_secure_authentication_flow,\n        three_d_secure_result,\n        three_d_secure_result_reason,\n        three_d_secure_version,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__price_plan": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__price_plan", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__price_plan.sql", "original_file_path": "models/stg_stripe__price_plan.sql", "unique_id": "model.stripe_source.stg_stripe__price_plan", "fqn": ["stripe_source", "stg_stripe__price_plan"], "alias": "stg_stripe__price_plan", "checksum": {"name": "sha256", "checksum": "46afd0d6693f9e2d1b5aea638e051ea33529ff8b51e1fc7ca075ef1f6fd525ba"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "This model defines the base price, currency, and billing cycle for recurring purchases of products. Please note that the Prices API replaced the Plans API in Stripe, so if you have migrated and choose to use the Price object then these columns come from the Price object. Otherwise, these will come from the Plan object. For how to configure, refer to the README.", "columns": {"price_plan_id": {"name": "price_plan_id", "description": "The ID of the record. If you have opted to use the Prices API, this will be the ID from the price object. If you opted not to, this will be the ID from the plan object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the plan can be used for new purchases.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "The unit amount in cents to be charged, represented as a whole integer if possible. In the Plan source table as Amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recurring_interval": {"name": "recurring_interval", "description": "The frequency at which a subscription is billed. One of day, week, month or year. In the Plan table as Interval.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recurring_interval_count": {"name": "recurring_interval_count", "description": "The number of intervals between subscription billings. For example, interval_count=3 bills every 3 months. In the plan source table as interval_count.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nickname": {"name": "nickname", "description": "A brief description of the plan, hidden from customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The id of the product whose pricing this plan determines.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recurring_usage_type": {"name": "recurring_usage_type", "description": "Configures how the quantity per period should be determined. Can be either metered or licensed. licensed automatically bills the quantity set when adding it to a subscription. metered aggregates the total usage based on usage records. Defaults to licensed. In the Plan object as usage_type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recurring_aggregate_usage": {"name": "recurring_aggregate_usage", "description": "Specifies a usage aggregation strategy for prices of usage_type=metered. Allowed values are sum for summing up all usage during a period, last_during_period for using the last usage record reported within a period, last_ever for using the last usage record ever (across period bounds) or max which uses the usage record with the maximum reported usage during a period. Defaults to sum. In the plan source table as aggregate_usage.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_scheme": {"name": "billing_scheme", "description": "Describes how to compute the price per period. Either per_unit or tiered. per_unit indicates that the fixed amount (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity (for prices with usage_type=licensed), or per unit of total usage (for prices with usage_type=metered). tiered indicates that the unit pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created. Measured in seconds since the Unix epoch.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_item_id": {"name": "invoice_item_id", "description": "The ID of the invoice item this record is a part of.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": true}, "created_at": 1709229533.175482, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__price_plan`", "raw_code": "{{ config(enabled=var('stripe__using_subscriptions', True)) }}\n\nwith price_plan as (\n\n    select * \n    from {{ ref('stg_stripe__price_plan_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__price_plan_tmp')),\n                staging_columns=get_price_plan_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas', \n            union_database_variable='stripe_union_databases') \n        }}\n\n    from price_plan\n),\n\nfinal as (\n\n    select \n        id as price_plan_id,\n        is_active,\n        unit_amount,\n        currency,\n        recurring_interval,\n        recurring_interval_count,\n        recurring_usage_type,\n        recurring_aggregate_usage,\n        metadata,\n        nickname,\n        product_id,\n        billing_scheme,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        is_deleted,\n        source_relation\n\n        {% if var('stripe__price_plan_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__price_plan_metadata')) }}\n        {% endif %}\n        \n    from fields\n    {{ livemode_predicate() }}\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__price_plan_tmp", "package": null, "version": null}, {"name": "stg_stripe__price_plan_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_price_plan_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.stripe_source.livemode_predicate"], "nodes": ["model.stripe_source.stg_stripe__price_plan_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__price_plan.sql", "compiled": true, "compiled_code": "\n\nwith price_plan as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__price_plan_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as is_active , \n    \n    \n    billing_scheme\n    \n as \n    \n    billing_scheme\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    nickname\n    \n as \n    \n    nickname\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    recurring_aggregate_usage\n    \n as \n    \n    recurring_aggregate_usage\n    \n, \n    \n    \n    recurring_interval\n    \n as \n    \n    recurring_interval\n    \n, \n    \n    \n    recurring_interval_count\n    \n as \n    \n    recurring_interval_count\n    \n, \n    \n    \n    recurring_usage_type\n    \n as \n    \n    recurring_usage_type\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    unit_amount_decimal\n    \n as \n    \n    unit_amount_decimal\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from price_plan\n),\n\nfinal as (\n\n    select \n        id as price_plan_id,\n        is_active,\n        unit_amount,\n        currency,\n        recurring_interval,\n        recurring_interval_count,\n        recurring_usage_type,\n        recurring_aggregate_usage,\n        metadata,\n        nickname,\n        product_id,\n        billing_scheme,\n        cast(created as timestamp) as created_at,\n        is_deleted,\n        source_relation\n\n        \n        \n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__customer": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__customer", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__customer.sql", "original_file_path": "models/stg_stripe__customer.sql", "unique_id": "model.stripe_source.stg_stripe__customer", "fqn": ["stripe_source", "stg_stripe__customer"], "alias": "stg_stripe__customer", "checksum": {"name": "sha256", "checksum": "81abd3cda2f9348d47e84d685093d069cf4a3e3ef185667c506ae9936a925366"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer.", "columns": {"customer_id": {"name": "customer_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_city": {"name": "customer_address_city", "description": "City, district, suburb, town, or village.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_country": {"name": "customer_address_country", "description": "Two-letter country code (ISO 3166-1 alpha-2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_line_1": {"name": "customer_address_line_1", "description": "Address line 1 (e.g., street, PO Box, or company name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_line_2": {"name": "customer_address_line_2", "description": "Address line 2 (e.g., apartment, suite, unit, or building).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_postal_code": {"name": "customer_address_postal_code", "description": "ZIP or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_state": {"name": "customer_address_state", "description": "State, county, province, or region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bank_account_id": {"name": "bank_account_id", "description": "ID of the bank account associated with this customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the customer entry was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_card_id": {"name": "default_card_id", "description": "ID for the default card used by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_delinquent": {"name": "is_delinquent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The customer\u2019s email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_name": {"name": "customer_name", "description": "Customer name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone": {"name": "phone", "description": "Csutomer's phone number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Boolean reflecting whether the customer has been deleted in Stripe.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1709229533.158714, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__customer_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__customer_tmp')),\n                staging_columns=get_customer_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas', \n            union_database_variable='stripe_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as customer_id,\n        account_balance,\n        address_city as customer_address_city,\n        address_country as customer_address_country,\n        address_line_1 as customer_address_line_1,\n        address_line_2 as customer_address_line_2,\n        address_postal_code as customer_address_postal_code,\n        address_state as customer_address_state,\n        balance as customer_balance,\n        bank_account_id,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        currency,\n        default_card_id,\n        delinquent as is_delinquent,\n        description,\n        email,\n        metadata,\n        name as customer_name,\n        phone,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_name,\n        shipping_phone,\n        source_relation,\n        coalesce(is_deleted, false) as is_deleted\n        \n        {% if var('stripe__customer_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__customer_metadata')) }}\n        {% endif %}\n\n    from fields\n    {{ livemode_predicate() }}\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__customer_tmp", "package": null, "version": null}, {"name": "stg_stripe__customer_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_customer_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.stripe_source.livemode_predicate"], "nodes": ["model.stripe_source.stg_stripe__customer_tmp"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe__customer.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_balance\n    \n as \n    \n    account_balance\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_postal_code\n    \n as \n    \n    address_postal_code\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    default_card_id\n    \n as \n    \n    default_card_id\n    \n, \n    \n    \n    delinquent\n    \n as \n    \n    delinquent\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_prefix\n    \n as \n    \n    invoice_prefix\n    \n, \n    \n    \n    invoice_settings_default_payment_method\n    \n as \n    \n    invoice_settings_default_payment_method\n    \n, \n    \n    \n    invoice_settings_footer\n    \n as \n    \n    invoice_settings_footer\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as string) as \n    \n    metadata\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    tax_info_tax_id\n    \n as \n    \n    tax_info_tax_id\n    \n, \n    \n    \n    tax_info_type\n    \n as \n    \n    tax_info_type\n    \n, \n    \n    \n    tax_info_verification_status\n    \n as \n    \n    tax_info_verification_status\n    \n, \n    \n    \n    tax_info_verification_verified_name\n    \n as \n    \n    tax_info_verification_verified_name\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as customer_id,\n        account_balance,\n        address_city as customer_address_city,\n        address_country as customer_address_country,\n        address_line_1 as customer_address_line_1,\n        address_line_2 as customer_address_line_2,\n        address_postal_code as customer_address_postal_code,\n        address_state as customer_address_state,\n        balance as customer_balance,\n        bank_account_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        default_card_id,\n        delinquent as is_delinquent,\n        description,\n        email,\n        metadata,\n        name as customer_name,\n        phone,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_name,\n        shipping_phone,\n        source_relation,\n        coalesce(is_deleted, false) as is_deleted\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__payment_method_card_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__payment_method_card_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__payment_method_card_tmp.sql", "original_file_path": "models/tmp/stg_stripe__payment_method_card_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__payment_method_card_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__payment_method_card_tmp"], "alias": "stg_stripe__payment_method_card_tmp", "checksum": {"name": "sha256", "checksum": "1816c485391b6e226172b12a071d82a768be85ed563eeede435dcf1913e5f901"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": true}, "created_at": 1709229532.8435462, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_card_tmp`", "raw_code": "{{ config(enabled=var('stripe__using_payment_method', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='payment_method_card', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='payment_method_card',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "payment_method_card"], ["stripe", "payment_method_card"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.payment_method_card"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__payment_method_card_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`payment_method_card_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__payment_method_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__payment_method_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__payment_method_tmp.sql", "original_file_path": "models/tmp/stg_stripe__payment_method_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__payment_method_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__payment_method_tmp"], "alias": "stg_stripe__payment_method_tmp", "checksum": {"name": "sha256", "checksum": "34204051a2e4bb71f3ab127f0fb0a210170214d377e0082e67f619d2869b7b80"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": true}, "created_at": 1709229532.847786, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_tmp`", "raw_code": "{{ config(enabled=var('stripe__using_payment_method', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='payment_method', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='payment_method',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "payment_method"], ["stripe", "payment_method"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.payment_method"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__payment_method_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`payment_method_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__refund_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__refund_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__refund_tmp.sql", "original_file_path": "models/tmp/stg_stripe__refund_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__refund_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__refund_tmp"], "alias": "stg_stripe__refund_tmp", "checksum": {"name": "sha256", "checksum": "78212f9eeb8bcbd7d9ee850ecb2da95726acc5ccf50fd04d54c9e975babf4200"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1709229532.852055, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__refund_tmp`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='refund', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='refund',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "refund"], ["stripe", "refund"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.refund"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__refund_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`refund_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__transfer_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__transfer_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__transfer_tmp.sql", "original_file_path": "models/tmp/stg_stripe__transfer_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__transfer_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__transfer_tmp"], "alias": "stg_stripe__transfer_tmp", "checksum": {"name": "sha256", "checksum": "9497b06d894dc5c66974fbf5e7c0af3c5aee936316791a2bf44cb7abb814c0e2"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1709229532.8606641, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__transfer_tmp`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='transfer', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='transfer',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "transfer"], ["stripe", "transfer"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.transfer"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__transfer_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`transfer_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__payout_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__payout_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__payout_tmp.sql", "original_file_path": "models/tmp/stg_stripe__payout_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__payout_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__payout_tmp"], "alias": "stg_stripe__payout_tmp", "checksum": {"name": "sha256", "checksum": "21cc6d29548d9a14cd12a6f888e1a77022fd49f478895960e1c2910db9fee80a"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1709229532.864584, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payout_tmp`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='payout', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='payout',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "payout"], ["stripe", "payout"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.payout"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__payout_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`payout_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__invoice_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__invoice_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__invoice_tmp.sql", "original_file_path": "models/tmp/stg_stripe__invoice_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__invoice_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__invoice_tmp"], "alias": "stg_stripe__invoice_tmp", "checksum": {"name": "sha256", "checksum": "8e1641b90defffaabcdc86bcac47a91bc5def89d697a76b05a788703f392b6a0"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": true}, "created_at": 1709229532.86864, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_tmp`", "raw_code": "{{ config(enabled=var('stripe__using_invoices', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='invoice', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='invoice',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "invoice"], ["stripe", "invoice"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.invoice"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__invoice_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`invoice_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__invoice_line_item_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__invoice_line_item_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__invoice_line_item_tmp.sql", "original_file_path": "models/tmp/stg_stripe__invoice_line_item_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__invoice_line_item_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__invoice_line_item_tmp"], "alias": "stg_stripe__invoice_line_item_tmp", "checksum": {"name": "sha256", "checksum": "ce53a3f3253b6246957db7a5a1aabdf17b6bcbd77eebbdc2985a4722a2d444a8"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": true}, "created_at": 1709229532.872712, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item_tmp`", "raw_code": "{{ config(enabled=var('stripe__using_invoices', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='invoice_line_item', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='invoice_line_item',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "invoice_line_item"], ["stripe", "invoice_line_item"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.invoice_line_item"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__invoice_line_item_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`invoice_line_item_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__dispute_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__dispute_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__dispute_tmp.sql", "original_file_path": "models/tmp/stg_stripe__dispute_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__dispute_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__dispute_tmp"], "alias": "stg_stripe__dispute_tmp", "checksum": {"name": "sha256", "checksum": "968694a79d4aaaaf736344f7b52eb80b1b2d5a636fac357ae336ba20d4a094c7"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1709229532.8775911, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__dispute_tmp`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='dispute', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='dispute',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "dispute"], ["stripe", "dispute"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.dispute"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__dispute_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`dispute_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__charge_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__charge_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__charge_tmp.sql", "original_file_path": "models/tmp/stg_stripe__charge_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__charge_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__charge_tmp"], "alias": "stg_stripe__charge_tmp", "checksum": {"name": "sha256", "checksum": "61b36bd009996df477af6d289be56c60eba124eab459cf8c37d0055ab48adc67"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1709229532.881435, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge_tmp`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='charge', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='charge',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "charge"], ["stripe", "charge"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.charge"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__charge_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`charge_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__price_plan_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__price_plan_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__price_plan_tmp.sql", "original_file_path": "models/tmp/stg_stripe__price_plan_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__price_plan_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__price_plan_tmp"], "alias": "stg_stripe__price_plan_tmp", "checksum": {"name": "sha256", "checksum": "2659e4de5b025fd3144ee347b09659524c25fbcf7ecfef8478c6dc1f7be85355"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": true}, "created_at": 1709229532.8854241, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__price_plan_tmp`", "raw_code": "{{ config(enabled=var('stripe__using_subscriptions', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='price' if var('stripe__using_price', does_table_exist('price')) else 'plan', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='price' if var('stripe__using_price', does_table_exist('price')) else 'plan',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n\n}}", "language": "sql", "refs": [], "sources": [["stripe", "plan"], ["stripe", "plan"]], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.does_table_exist", "macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.plan"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__price_plan_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`price_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__fee_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__fee_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__fee_tmp.sql", "original_file_path": "models/tmp/stg_stripe__fee_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__fee_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__fee_tmp"], "alias": "stg_stripe__fee_tmp", "checksum": {"name": "sha256", "checksum": "6af4d30230300c03d56b50847ef7fd67c53c08700c715e1546aa7abf03bb3298"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1709229532.890271, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__fee_tmp`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='fee', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='fee',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "fee"], ["stripe", "fee"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.fee"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__fee_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`fee_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__account_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__account_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__account_tmp.sql", "original_file_path": "models/tmp/stg_stripe__account_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__account_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__account_tmp"], "alias": "stg_stripe__account_tmp", "checksum": {"name": "sha256", "checksum": "1ed0de4c251bac3fc82ed875334c8949ea32dafe38be141d58c95b62240b15fc"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1709229532.894194, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account_tmp`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='account', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='account',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "account"], ["stripe", "account"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.account"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__account_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`account_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__payment_intent_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__payment_intent_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__payment_intent_tmp.sql", "original_file_path": "models/tmp/stg_stripe__payment_intent_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__payment_intent_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__payment_intent_tmp"], "alias": "stg_stripe__payment_intent_tmp", "checksum": {"name": "sha256", "checksum": "c49ec002d8d80ebe39be7d4ef741ce3b91e842aa459d17509617cc2c4d9f8673"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1709229532.9435709, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_intent_tmp`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='payment_intent', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='payment_intent',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "payment_intent"], ["stripe", "payment_intent"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.payment_intent"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__payment_intent_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`payment_intent_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__card_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__card_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__card_tmp.sql", "original_file_path": "models/tmp/stg_stripe__card_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__card_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__card_tmp"], "alias": "stg_stripe__card_tmp", "checksum": {"name": "sha256", "checksum": "eee85c82790ec15a9874c4a1b36c2389ddc2781549595c327960223752ae4cb3"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1709229532.9476311, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__card_tmp`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='card', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='card',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "card"], ["stripe", "card"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.card"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__card_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`card_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__balance_transaction_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__balance_transaction_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__balance_transaction_tmp.sql", "original_file_path": "models/tmp/stg_stripe__balance_transaction_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__balance_transaction_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__balance_transaction_tmp"], "alias": "stg_stripe__balance_transaction_tmp", "checksum": {"name": "sha256", "checksum": "d3c134293e86cb85d7858c4907c77872614ff308ff7e753b282af6a1110ce32b"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1709229532.951621, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__balance_transaction_tmp`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='balance_transaction', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='balance_transaction',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "balance_transaction"], ["stripe", "balance_transaction"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.balance_transaction"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__balance_transaction_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`balance_transaction_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__customer_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__customer_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__customer_tmp.sql", "original_file_path": "models/tmp/stg_stripe__customer_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__customer_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__customer_tmp"], "alias": "stg_stripe__customer_tmp", "checksum": {"name": "sha256", "checksum": "019669af4e14c72392a4e7812d1b47dc4bb1364a56a4eaa26679b55c453aff28"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1709229532.95544, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer_tmp`", "raw_code": "{{\n    fivetran_utils.union_data(\n        table_identifier='customer', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='customer',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "customer"], ["stripe", "customer"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.customer"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__customer_tmp.sql", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`customer_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe_source.stg_stripe__subscription_tmp": {"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__subscription_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__subscription_tmp.sql", "original_file_path": "models/tmp/stg_stripe__subscription_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__subscription_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__subscription_tmp"], "alias": "stg_stripe__subscription_tmp", "checksum": {"name": "sha256", "checksum": "178aa36c16cb805e43a60700474698cf8c59d95cf4720bd40c0c6d9c14753209"}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": true}, "created_at": 1709229532.960002, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription_tmp`", "raw_code": "{{ config(enabled=var('stripe__using_subscriptions', True)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='subscription_history' if var('stripe__using_subscription_history', does_table_exist('subscription_history')) else 'subscription', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='subscription_history' if var('stripe__using_subscription_history', does_table_exist('subscription_history')) else 'subscription',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "subscription"], ["stripe", "subscription"]], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.does_table_exist", "macro.fivetran_utils.union_data"], "nodes": ["source.stripe_source.stripe.subscription"]}, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__subscription_tmp.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`subscription_history_data`", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.stripe__customer_overview": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "stripe__customer_overview", "resource_type": "model", "package_name": "stripe", "path": "stripe__customer_overview.sql", "original_file_path": "models/stripe__customer_overview.sql", "unique_id": "model.stripe.stripe__customer_overview", "fqn": ["stripe", "stripe__customer_overview"], "alias": "stripe__customer_overview", "checksum": {"name": "sha256", "checksum": "8b81a230ce1067c3e3630483460521e663ea08964643d1dd963778de2d025d5a"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a customer, enriched with metrics about their associated transactions.", "columns": {"customer_id": {"name": "customer_id", "description": "Unique identifier for each record from the Stripe customer object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address associated with the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_created_at": {"name": "customer_created_at", "description": "Timestamp of when the customer entry was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_delinquent": {"name": "is_delinquent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "Sum of all charges made to this customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "Sum of all refunds made to this customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions made with this customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_fees": {"name": "total_fees", "description": "Total fees charged on all transactions made with this customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_net_transaction_amount": {"name": "total_net_transaction_amount", "description": "Net amount of all transactions made with this customer. This is the gross amount excluding fees, refunds, and disputes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "The total number of sales made to this customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_refund_count": {"name": "total_refund_count", "description": "The total number of refunds made to this customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_this_month": {"name": "sales_this_month", "description": "Sum of charges made to this customer this month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refunds_this_month": {"name": "refunds_this_month", "description": "Sum of refunds made to this customer this month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross_transaction_amount_this_month": {"name": "gross_transaction_amount_this_month", "description": "Gross amount of transactions made with this customer this month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fees_this_month": {"name": "fees_this_month", "description": "Total fees charged on transactions made with this customer this month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net_transaction_amount_this_month": {"name": "net_transaction_amount_this_month", "description": "Net amount of transactions made with this customer this month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "sales_count_this_month": {"name": "sales_count_this_month", "description": "The number of sales made to this customer this month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_count_this_month": {"name": "refund_count_this_month", "description": "The number of refunds made to this customer this month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_sale_date": {"name": "first_sale_date", "description": "Date of the first time this customer was charged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_sale_date": {"name": "most_recent_sale_date", "description": "Date of the most recent time this customer was charged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "The total number of incomplete charges this customer has had.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "The total amount from incomplete charges this customer has had.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failed_charge_count_this_month": {"name": "failed_charge_count_this_month", "description": "The number of incomplete charges this customer has had this month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failed_charge_amount_this_month": {"name": "failed_charge_amount_this_month", "description": "The amount from incomplete charges this customer has had this month.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_currency": {"name": "customer_currency", "description": "Currency used by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_card_id": {"name": "default_card_id", "description": "ID of the default card used by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone": {"name": "phone", "description": "Customer's phone number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Boolean reflecting whether the customer has been deleted in Stripe.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1709229533.400772, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__customer_overview`", "raw_code": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe__balance_transactions') }}  \n\n), incomplete_charges as (\n\n    select *\n    from {{ ref('int_stripe__incomplete_charges') }}  \n\n), customer as (\n\n    select *\n    from {{ var('customer') }}  \n\n), transactions_grouped as (\n\n    select\n      customer_id,\n      source_relation,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then balance_transaction_amount\n          else 0 \n        end) \n      as total_sales,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') \n          then balance_transaction_amount\n          else 0 \n        end) \n      as total_refunds,    \n      sum(balance_transaction_amount) as total_gross_transaction_amount,\n      sum(balance_transaction_fee) as total_fees,\n      sum(balance_transaction_net) as total_net_transaction_amount,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then 1\n          else 0 \n          end) \n      as total_sales_count, \n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') \n          then 1\n          else 0 \n        end) \n      as total_refund_count,   \n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') and {{ dbt.date_trunc('month', date_timezone('balance_transaction_created_at')) }} = {{ dbt.date_trunc('month', date_timezone(dbt.current_timestamp_backcompat())) }}\n          then balance_transaction_amount \n          else 0 \n        end) \n      as sales_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') and {{ dbt.date_trunc('month', date_timezone('balance_transaction_created_at')) }} = {{ dbt.date_trunc('month', date_timezone(dbt.current_timestamp_backcompat())) }}\n          then balance_transaction_amount \n          else 0 \n        end) \n      as refunds_this_month,\n      sum(\n        case \n          when {{ dbt.date_trunc('month', date_timezone('balance_transaction_created_at')) }} = {{ dbt.date_trunc('month', date_timezone(dbt.current_timestamp_backcompat())) }}\n          then balance_transaction_amount \n          else 0 \n        end) \n      as gross_transaction_amount_this_month,\n      sum(\n        case \n          when {{ dbt.date_trunc('month', date_timezone('balance_transaction_created_at')) }} = {{ dbt.date_trunc('month', date_timezone(dbt.current_timestamp_backcompat())) }}\n          then balance_transaction_fee \n          else 0 \n        end) \n      as fees_this_month,\n      sum(\n        case \n          when {{ dbt.date_trunc('month', date_timezone('balance_transaction_created_at')) }} = {{ dbt.date_trunc('month', date_timezone(dbt.current_timestamp_backcompat())) }}\n          then balance_transaction_net \n          else 0 \n        end) \n      as net_transaction_amount_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') and {{ dbt.date_trunc('month', date_timezone('balance_transaction_created_at')) }} = {{ dbt.date_trunc('month', date_timezone(dbt.current_timestamp_backcompat())) }}\n          then 1 \n          else 0 \n        end) \n      as sales_count_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') and {{ dbt.date_trunc('month', date_timezone('balance_transaction_created_at')) }} = {{ dbt.date_trunc('month', date_timezone(dbt.current_timestamp_backcompat())) }}\n          then 1 \n          else 0 \n        end) \n      as refund_count_this_month,\n      min(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then {{ date_timezone('balance_transaction_created_at') }}\n          else null \n        end) \n      as first_sale_date,\n      max(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then {{ date_timezone('balance_transaction_created_at') }}\n          else null \n        end) \n      as most_recent_sale_date\n    from balance_transaction_joined\n    where balance_transaction_type in ('payment', 'charge', 'payment_refund', 'refund')\n    group by 1,2\n\n), failed_charges_by_customer as (\n\n    select\n      customer_id,\n      source_relation,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount,\n      sum(\n        case \n          when {{ dbt.date_trunc('month', date_timezone('created_at')) }} = {{ dbt.date_trunc('month', date_timezone(dbt.current_timestamp_backcompat())) }}\n          then 1\n          else 0 \n        end) \n      as failed_charge_count_this_month,\n      sum(\n        case \n          when {{ dbt.date_trunc('month', date_timezone('created_at')) }} = {{ dbt.date_trunc('month', date_timezone(dbt.current_timestamp_backcompat())) }}\n          then amount\n          else 0 \n        end) \n      as failed_charge_amount_this_month\n    from incomplete_charges\n    group by 1,2\n\n), transactions_not_associated_with_customer as (\n\n    select\n      'No Customer ID' as customer_id,\n      'No Associated Customer' as customer_description,\n      customer.created_at as customer_created_at,\n      customer.currency as customer_currency,\n      {{ dbt_utils.star(from=ref('stg_stripe__customer'), relation_alias='customer', except=['customer_id','description','created_at','currency','metadata','source_relation']) }},\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      0 as total_failed_charge_count,\n      0 as total_failed_charge_amount,\n      0 as failed_charge_count_this_month,\n      0 as failed_charge_amount_this_month,\n      transactions_grouped.source_relation\n\n    from transactions_grouped\n    left join customer \n        on transactions_grouped.customer_id = customer.customer_id\n        and transactions_grouped.source_relation = customer.source_relation\n    where customer.customer_id is null and customer.description is null\n\n\n), customer_transactions_overview as (\n\n    select\n      customer.customer_id,\n      customer.description as customer_description,\n      customer.created_at as customer_created_at,\n      customer.currency as customer_currency,\n      {{ dbt_utils.star(from=ref('stg_stripe__customer'), relation_alias='customer', except=['customer_id','description','created_at','currency','metadata','source_relation']) }},\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      coalesce(failed_charges_by_customer.total_failed_charge_count, 0) as total_failed_charge_count,\n      coalesce(failed_charges_by_customer.total_failed_charge_amount/100, 0) as total_failed_charge_amount,\n      coalesce(failed_charges_by_customer.failed_charge_count_this_month, 0) as failed_charge_count_this_month,\n      coalesce(failed_charges_by_customer.failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,\n      customer.source_relation\n      \n    from customer\n    left join transactions_grouped\n        on customer.customer_id = transactions_grouped.customer_id\n        and customer.source_relation = transactions_grouped.source_relation\n    left join failed_charges_by_customer \n        on customer.customer_id = failed_charges_by_customer.customer_id\n        and customer.source_relation = failed_charges_by_customer.source_relation\n)\n\nselect *\nfrom transactions_not_associated_with_customer\nunion all \nselect *\nfrom customer_transactions_overview", "language": "sql", "refs": [{"name": "stripe__balance_transactions", "package": null, "version": null}, {"name": "int_stripe__incomplete_charges", "package": null, "version": null}, {"name": "stg_stripe__customer", "package": null, "version": null}, {"name": "stg_stripe__customer", "package": null, "version": null}, {"name": "stg_stripe__customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe.date_timezone", "macro.dbt.date_trunc", "macro.dbt.current_timestamp_backcompat", "macro.dbt_utils.star"], "nodes": ["model.stripe.stripe__balance_transactions", "model.stripe.int_stripe__incomplete_charges", "model.stripe_source.stg_stripe__customer"]}, "compiled_path": "target/compiled/stripe/models/stripe__customer_overview.sql", "compiled": true, "compiled_code": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`  \n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__incomplete_charges`  \n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`  \n\n), transactions_grouped as (\n\n    select\n      customer_id,\n      source_relation,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then balance_transaction_amount\n          else 0 \n        end) \n      as total_sales,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') \n          then balance_transaction_amount\n          else 0 \n        end) \n      as total_refunds,    \n      sum(balance_transaction_amount) as total_gross_transaction_amount,\n      sum(balance_transaction_fee) as total_fees,\n      sum(balance_transaction_net) as total_net_transaction_amount,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then 1\n          else 0 \n          end) \n      as total_sales_count, \n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') \n          then 1\n          else 0 \n        end) \n      as total_refund_count,   \n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') and timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_amount \n          else 0 \n        end) \n      as sales_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') and timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_amount \n          else 0 \n        end) \n      as refunds_this_month,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_amount \n          else 0 \n        end) \n      as gross_transaction_amount_this_month,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_fee \n          else 0 \n        end) \n      as fees_this_month,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_net \n          else 0 \n        end) \n      as net_transaction_amount_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') and timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then 1 \n          else 0 \n        end) \n      as sales_count_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') and timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then 1 \n          else 0 \n        end) \n      as refund_count_this_month,\n      min(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then date(\n    balance_transaction_created_at\n    \n    )\n          else null \n        end) \n      as first_sale_date,\n      max(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then date(\n    balance_transaction_created_at\n    \n    )\n          else null \n        end) \n      as most_recent_sale_date\n    from balance_transaction_joined\n    where balance_transaction_type in ('payment', 'charge', 'payment_refund', 'refund')\n    group by 1,2\n\n), failed_charges_by_customer as (\n\n    select\n      customer_id,\n      source_relation,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then 1\n          else 0 \n        end) \n      as failed_charge_count_this_month,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then amount\n          else 0 \n        end) \n      as failed_charge_amount_this_month\n    from incomplete_charges\n    group by 1,2\n\n), transactions_not_associated_with_customer as (\n\n    select\n      'No Customer ID' as customer_id,\n      'No Associated Customer' as customer_description,\n      customer.created_at as customer_created_at,\n      customer.currency as customer_currency,\n      customer.`account_balance`,\n  customer.`customer_address_city`,\n  customer.`customer_address_country`,\n  customer.`customer_address_line_1`,\n  customer.`customer_address_line_2`,\n  customer.`customer_address_postal_code`,\n  customer.`customer_address_state`,\n  customer.`customer_balance`,\n  customer.`bank_account_id`,\n  customer.`default_card_id`,\n  customer.`is_delinquent`,\n  customer.`email`,\n  customer.`customer_name`,\n  customer.`phone`,\n  customer.`shipping_address_city`,\n  customer.`shipping_address_country`,\n  customer.`shipping_address_line_1`,\n  customer.`shipping_address_line_2`,\n  customer.`shipping_address_postal_code`,\n  customer.`shipping_address_state`,\n  customer.`shipping_name`,\n  customer.`shipping_phone`,\n  customer.`is_deleted`,\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      0 as total_failed_charge_count,\n      0 as total_failed_charge_amount,\n      0 as failed_charge_count_this_month,\n      0 as failed_charge_amount_this_month,\n      transactions_grouped.source_relation\n\n    from transactions_grouped\n    left join customer \n        on transactions_grouped.customer_id = customer.customer_id\n        and transactions_grouped.source_relation = customer.source_relation\n    where customer.customer_id is null and customer.description is null\n\n\n), customer_transactions_overview as (\n\n    select\n      customer.customer_id,\n      customer.description as customer_description,\n      customer.created_at as customer_created_at,\n      customer.currency as customer_currency,\n      customer.`account_balance`,\n  customer.`customer_address_city`,\n  customer.`customer_address_country`,\n  customer.`customer_address_line_1`,\n  customer.`customer_address_line_2`,\n  customer.`customer_address_postal_code`,\n  customer.`customer_address_state`,\n  customer.`customer_balance`,\n  customer.`bank_account_id`,\n  customer.`default_card_id`,\n  customer.`is_delinquent`,\n  customer.`email`,\n  customer.`customer_name`,\n  customer.`phone`,\n  customer.`shipping_address_city`,\n  customer.`shipping_address_country`,\n  customer.`shipping_address_line_1`,\n  customer.`shipping_address_line_2`,\n  customer.`shipping_address_postal_code`,\n  customer.`shipping_address_state`,\n  customer.`shipping_name`,\n  customer.`shipping_phone`,\n  customer.`is_deleted`,\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      coalesce(failed_charges_by_customer.total_failed_charge_count, 0) as total_failed_charge_count,\n      coalesce(failed_charges_by_customer.total_failed_charge_amount/100, 0) as total_failed_charge_amount,\n      coalesce(failed_charges_by_customer.failed_charge_count_this_month, 0) as failed_charge_count_this_month,\n      coalesce(failed_charges_by_customer.failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,\n      customer.source_relation\n      \n    from customer\n    left join transactions_grouped\n        on customer.customer_id = transactions_grouped.customer_id\n        and customer.source_relation = transactions_grouped.source_relation\n    left join failed_charges_by_customer \n        on customer.customer_id = failed_charges_by_customer.customer_id\n        and customer.source_relation = failed_charges_by_customer.source_relation\n)\n\nselect *\nfrom transactions_not_associated_with_customer\nunion all \nselect *\nfrom customer_transactions_overview", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.stripe__balance_transactions": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "stripe__balance_transactions", "resource_type": "model", "package_name": "stripe", "path": "stripe__balance_transactions.sql", "original_file_path": "models/stripe__balance_transactions.sql", "unique_id": "model.stripe.stripe__balance_transactions", "fqn": ["stripe", "stripe__balance_transactions"], "alias": "stripe__balance_transactions", "checksum": {"name": "sha256", "checksum": "59171f12ae3c2a4151261e3a996e60bf2f938384ce567cb3e70ba733294e4f64"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a change to your account balance, enriched with data about the transaction.", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_created_at": {"name": "balance_transaction_created_at", "description": "When the transaction took place", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_available_on": {"name": "balance_transaction_available_on", "description": "The date the transaction\u2019s net funds will become available in the Stripe balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_currency": {"name": "balance_transaction_currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_amount": {"name": "balance_transaction_amount", "description": "Gross amount of the transaction, in cents.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_fee": {"name": "balance_transaction_fee", "description": "Fees (in cents) paid for this transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_net": {"name": "balance_transaction_net", "description": "Net amount of the transaction, in cents. Gross amount minus fees, refunds, and disputes", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_type": {"name": "balance_transaction_type", "description": "The type of transaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_reporting_category": {"name": "balance_transaction_reporting_category", "description": "Groupings of transactions types based on how they show in Stripe's reporting", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_source_id": {"name": "balance_transaction_source_id", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_description": {"name": "balance_transaction_description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_facing_amount": {"name": "customer_facing_amount", "description": "The transaction amount that the customer sees.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_facing_currency": {"name": "customer_facing_currency", "description": "Three-letter ISO currency code that the customer sees.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_at": {"name": "effective_at", "description": "calendar day after available_at", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "automatic_payout_id": {"name": "automatic_payout_id", "description": "(Applies only to accounts on automatic payouts.) The unique ID for the associated payout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_currency": {"name": "payout_currency", "description": "Three-letter ISO currency code of the payout, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_created_at": {"name": "payout_created_at", "description": "Time at which the payout record was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_is_automatic": {"name": "payout_is_automatic", "description": "True if the payout was created by an automated payout schedule, and false if it was requested manually.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_arrival_date_at": {"name": "payout_arrival_date_at", "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "automatic_payout_effective_at": {"name": "automatic_payout_effective_at", "description": "The date we expect this automatic payout to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "destination_bank_account_id": {"name": "destination_bank_account_id", "description": "ID of the bank account the payout was sent to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "destination_card_id": {"name": "destination_card_id", "description": "ID of the card the payout was sent to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The customer associated with the balance transaction (based on charge or refund details)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "The customer\u2019s email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_name": {"name": "customer_name", "description": "Customer name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "The email the receipt was emailed to for this transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "The description field associated with the customer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_city": {"name": "customer_shipping_address_city", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_country": {"name": "customer_shipping_address_country", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_line_1": {"name": "customer_shipping_address_line_1", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_line_2": {"name": "customer_shipping_address_line_2", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_postal_code": {"name": "customer_shipping_address_postal_code", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_state": {"name": "customer_shipping_address_state", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_city": {"name": "customer_address_city", "description": "City, district, suburb, town, or village.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_country": {"name": "customer_address_country", "description": "Two-letter country code (ISO 3166-1 alpha-2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_line_1": {"name": "customer_address_line_1", "description": "Address line 1 (e.g., street, PO Box, or company name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_line_2": {"name": "customer_address_line_2", "description": "Address line 2 (e.g., apartment, suite, unit, or building).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_postal_code": {"name": "customer_address_postal_code", "description": "ZIP or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_state": {"name": "customer_address_state", "description": "State, county, province, or region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "The id of the charge associated with the balance transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_shipping_address_city": {"name": "charge_shipping_address_city", "description": "City, district, suburb, town, or village belonging to the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_shipping_address_country": {"name": "charge_shipping_address_country", "description": "Two-letter country code (ISO 3166-1 alpha-2) belonging to the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_shipping_address_line_1": {"name": "charge_shipping_address_line_1", "description": "Address line 1 (e.g., street, PO Box, or company name) belonging to the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_shipping_address_line_2": {"name": "charge_shipping_address_line_2", "description": "Address line 2 (e.g., apartment, suite, unit, or building) belonging to the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_shipping_address_postal_code": {"name": "charge_shipping_address_postal_code", "description": "ZIP or postal code belonging to the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_shipping_address_state": {"name": "charge_shipping_address_state", "description": "State, county, province, or region belonging to the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "The id of the payment intent associated with the balance transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_created_at": {"name": "charge_created_at", "description": "Timestamp of the charge object associated with the balance transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_type": {"name": "payment_method_type", "description": "The id of the payment method type associated with the balance transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_brand": {"name": "payment_method_brand", "description": "Card brand used for the payment method. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_funding": {"name": "payment_method_funding", "description": "Card funding type for the payment method. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_city": {"name": "card_address_city", "description": "City, district, suburb, town, or village.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_country": {"name": "card_address_country", "description": "Two-letter country code (ISO 3166-1 alpha-2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_line_1": {"name": "card_address_line_1", "description": "Address line 1 (e.g., street, PO Box, or company name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_line_2": {"name": "card_address_line_2", "description": "Address line 2 (e.g., apartment, suite, unit, or building).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_state": {"name": "card_address_state", "description": "State, county, province, or region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_postal_code": {"name": "card_address_postal_code", "description": "ZIP or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_brand": {"name": "card_brand", "description": "The brand of the card associated with the balance transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_funding": {"name": "card_funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_country": {"name": "card_country", "description": "The country the card was issued in.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_id": {"name": "payout_id", "description": "ID for the payout associated with this balance transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_status": {"name": "payout_status", "description": "Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_type": {"name": "payout_type", "description": "Whether the payout was to a bank_account or card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_description": {"name": "payout_description", "description": "An arbitrary string attached to the payout. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_reason": {"name": "refund_reason", "description": "Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The ID of the invoice this record is a part of.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "The number of the invoice associated with this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The ID of the subscription is associated with this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_statement_descriptor": {"name": "charge_statement_descriptor", "description": "Extra information about a source. This will appear on your customer\u2019s statement every time you charge the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispute_id": {"name": "dispute_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispute_reason": {"name": "dispute_reason", "description": "Reason given by cardholder for dispute. Possible values are bank_cannot_process, check_returned, credit_not_processed, customer_initiated, debit_not_authorized, duplicate, fraudulent, general, incorrect_account_details, insufficient_funds, product_not_received, product_unacceptable, subscription_canceled, or unrecognized.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_id": {"name": "refund_id", "description": "ID of the refund associated with this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transfer_id": {"name": "transfer_id", "description": "ID of the transfer associated with this record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_id": {"name": "connected_account_id", "description": "The ID of the account connected to the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_country": {"name": "connected_account_country", "description": "The country of the account connected to the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_direct_charge_id": {"name": "connected_account_direct_charge_id", "description": "(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1709229533.396359, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`", "raw_code": "with balance_transaction as (\n\n    select *\n    from {{ var('balance_transaction') }}\n\n), account as (\n\n    select *\n    from {{ var('account') }}\n\n), cards as (\n\n    select *\n    from {{ var('card') }}\n\n), charge as (\n    \n    select *\n    from {{ var('charge') }}\n\n), customer as (\n    \n    select *\n    from {{ var('customer') }}\n\n), dispute as (\n    \n    select *\n    from {{ var('dispute') }}\n\n{% if var('stripe__using_invoices', True) %}\n), invoice as (\n    \n    select *\n    from {{ var('invoice') }}\n\n{% endif %}\n), payment_intent as (\n    \n    select *\n    from {{ var('payment_intent') }}\n\n{% if var('stripe__using_payment_method', True) %}\n), payment_method as (\n    \n    select *\n    from {{ var('payment_method') }}\n\n), payment_method_card as (\n\n    select *\n    from {{ var('payment_method_card')}}\n\n{% endif %}\n), payout as (\n    \n    select *\n    from {{ var('payout') }}\n\n), refund as (\n    \n    select *\n    from {{ var('refund') }}\n\n{% if var('stripe__using_subscriptions', True) %}\n), subscription as (\n    \n    select *\n    from {{ var('subscription') }}\n\n{% endif %}\n), transfers as (\n    \n    select *\n    from {{ var('transfer') }}\n\n)\n\nselect\n    balance_transaction.balance_transaction_id,\n    balance_transaction.created_at as balance_transaction_created_at,\n    balance_transaction.available_on as balance_transaction_available_on,\n    balance_transaction.currency as balance_transaction_currency,\n    balance_transaction.amount as balance_transaction_amount,\n    balance_transaction.fee as balance_transaction_fee,\n    balance_transaction.net as balance_transaction_net,\n    balance_transaction.source as balance_transaction_source_id,\n    balance_transaction.description as balance_transaction_description,\n    balance_transaction.type as balance_transaction_type,\n    coalesce(balance_transaction.reporting_category,\n        case\n            when balance_transaction.type in ('charge', 'payment') then 'charge'\n            when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n            when balance_transaction.type in ('payout_cancel', 'payout_failure') then 'payout_reversal'\n            when balance_transaction.type in ('transfer', 'recipient_transfer') then 'transfer'\n            when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n            else balance_transaction.type end)\n    as balance_transaction_reporting_category,\n    case\n        when balance_transaction.type in ('charge', 'payment') then charge.amount \n        when balance_transaction.type in ('refund', 'payment_refund') then refund.amount\n        when dispute_id is not null then dispute.dispute_amount\n        else null\n    end as customer_facing_amount,\n    case \n        when balance_transaction.type = 'charge' then charge.currency \n    end as customer_facing_currency,\n    {{ dbt.dateadd('day', 1, 'balance_transaction.available_on') }} as effective_at,\n    case\n        when payout.is_automatic = true then payout.payout_id \n        else null\n    end as automatic_payout_id,\n    payout.payout_id,\n    payout.created_at as payout_created_at,\n    payout.currency as payout_currency,\n    payout.is_automatic as payout_is_automatic,\n    payout.arrival_date_at as payout_arrival_date_at,\n    case\n        when payout.is_automatic = true then payout.arrival_date_at\n        else null\n    end as automatic_payout_effective_at,\n    payout.type as payout_type,\n    payout.status as payout_status,\n    payout.description as payout_description,\n    payout.destination_bank_account_id,\n    payout.destination_card_id,\n    coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n    charge.receipt_email,\n    customer.email as customer_email,\n    customer.customer_name,\n    customer.description as customer_description,\n    customer.shipping_address_line_1 as customer_shipping_address_line_1,\n    customer.shipping_address_line_2 as customer_shipping_address_line_2,\n    customer.shipping_address_city as customer_shipping_address_city,\n    customer.shipping_address_state as customer_shipping_address_state,\n    customer.shipping_address_postal_code as customer_shipping_address_postal_code,\n    customer.shipping_address_country as customer_shipping_address_country,\n    customer.customer_address_line_1,\n    customer.customer_address_line_2,\n    customer.customer_address_city,\n    customer.customer_address_state,\n    customer.customer_address_postal_code,\n    customer.customer_address_country,\n    charge.shipping_address_line_1 as charge_shipping_address_line_1,\n    charge.shipping_address_line_2 as charge_shipping_address_line_2,\n    charge.shipping_address_city as charge_shipping_address_city,\n    charge.shipping_address_state as charge_shipping_address_state,\n    charge.shipping_address_postal_code as charge_shipping_address_postal_code,\n    charge.shipping_address_country as charge_shipping_address_country,\n    cards.card_address_line_1,\n    cards.card_address_line_2,\n    cards.card_address_city,\n    cards.card_address_state,\n    cards.card_address_postal_code,\n    cards.card_address_country,\n    coalesce(charge.charge_id, refund.charge_id, dispute.charge_id) as charge_id,\n    charge.created_at as charge_created_at,\n    payment_intent.payment_intent_id,\n\n    {% if var('stripe__using_invoices', True) %}\n    invoice.invoice_id,\n    invoice.number as invoice_number,\n    {% endif %}\n\n    {% if var('stripe__using_subscriptions', True) %}\n    subscription.subscription_id,\n    {% endif %}\n\n    {% if var('stripe__using_payment_method', True) %}\n    payment_method.type as payment_method_type,\n    payment_method_card.brand as payment_method_brand,\n    payment_method_card.funding as payment_method_funding,\n    {% endif %}\n\n    cards.brand as card_brand,\n    cards.funding as card_funding,\n    cards.country as card_country,\n    charge.statement_descriptor as charge_statement_descriptor ,\n    dispute.dispute_id,\n    dispute.dispute_reason,\n    refund.refund_id,\n    refund.reason as refund_reason,\n    transfers.transfer_id,\n    coalesce(balance_transaction.connected_account_id, charge.connected_account_id) as connected_account_id,\n    connected_account.country as connected_account_country,\n    case \n        when charge.connected_account_id is not null then charge.charge_id\n        else null\n    end as connected_account_direct_charge_id,\n    balance_transaction.source_relation\n\nfrom balance_transaction\n\nleft join payout \n    on payout.balance_transaction_id = balance_transaction.balance_transaction_id\n    and payout.source_relation = balance_transaction.source_relation\nleft join account connected_account\n    on balance_transaction.connected_account_id = connected_account.account_id\n    and balance_transaction.source_relation = connected_account.source_relation\nleft join charge\n    on charge.balance_transaction_id = balance_transaction.balance_transaction_id\n    and charge.source_relation = balance_transaction.source_relation\nleft join customer \n    on charge.customer_id = customer.customer_id\n    and charge.source_relation = customer.source_relation\nleft join cards\n    on charge.card_id = cards.card_id\n    and charge.source_relation = cards.source_relation\nleft join payment_intent\n    on charge.payment_intent_id = payment_intent.payment_intent_id\n    and charge.source_relation = payment_intent.source_relation\n\n{% if var('stripe__using_payment_method', True) %}\nleft join payment_method\n    on charge.payment_method_id = payment_method.payment_method_id\n    and charge.source_relation = payment_method.source_relation\nleft join payment_method_card \n    on payment_method_card.payment_method_id = payment_method.payment_method_id\n    and charge.source_relation = balance_transaction.source_relation\n{% endif %}\n\n{% if var('stripe__using_invoices', True) %}\nleft join invoice \n    on charge.invoice_id = invoice.invoice_id\n    and charge.source_relation = invoice.source_relation\n{% endif %}\n\n{% if var('stripe__using_subscriptions', True) %}\nleft join subscription\n    on subscription.latest_invoice_id =  charge.invoice_id\n    and subscription.source_relation =  charge.source_relation\n{% endif %}\n\nleft join refund\n    on refund.balance_transaction_id = balance_transaction.balance_transaction_id\n    and refund.source_relation = balance_transaction.source_relation\nleft join transfers \n    on transfers.balance_transaction_id = balance_transaction.balance_transaction_id\n    and transfers.source_relation = balance_transaction.source_relation\nleft join charge as refund_charge \n    on refund.charge_id = refund_charge.charge_id\n    and refund.source_relation = refund_charge.source_relation\nleft join dispute\n    on charge.charge_id = dispute.charge_id\n    and charge.source_relation = dispute.source_relation", "language": "sql", "refs": [{"name": "stg_stripe__balance_transaction", "package": null, "version": null}, {"name": "stg_stripe__account", "package": null, "version": null}, {"name": "stg_stripe__card", "package": null, "version": null}, {"name": "stg_stripe__charge", "package": null, "version": null}, {"name": "stg_stripe__customer", "package": null, "version": null}, {"name": "stg_stripe__dispute", "package": null, "version": null}, {"name": "stg_stripe__invoice", "package": null, "version": null}, {"name": "stg_stripe__payment_intent", "package": null, "version": null}, {"name": "stg_stripe__payment_method", "package": null, "version": null}, {"name": "stg_stripe__payment_method_card", "package": null, "version": null}, {"name": "stg_stripe__payout", "package": null, "version": null}, {"name": "stg_stripe__refund", "package": null, "version": null}, {"name": "stg_stripe__subscription", "package": null, "version": null}, {"name": "stg_stripe__transfer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.dateadd"], "nodes": ["model.stripe_source.stg_stripe__balance_transaction", "model.stripe_source.stg_stripe__account", "model.stripe_source.stg_stripe__card", "model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__dispute", "model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__payment_intent", "model.stripe_source.stg_stripe__payment_method", "model.stripe_source.stg_stripe__payment_method_card", "model.stripe_source.stg_stripe__payout", "model.stripe_source.stg_stripe__refund", "model.stripe_source.stg_stripe__subscription", "model.stripe_source.stg_stripe__transfer"]}, "compiled_path": "target/compiled/stripe/models/stripe__balance_transactions.sql", "compiled": true, "compiled_code": "with balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__balance_transaction`\n\n), account as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account`\n\n), cards as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__card`\n\n), charge as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`\n\n), customer as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`\n\n), dispute as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__dispute`\n\n\n), invoice as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice`\n\n\n), payment_intent as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_intent`\n\n\n), payment_method as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method`\n\n), payment_method_card as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_card`\n\n\n), payout as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payout`\n\n), refund as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__refund`\n\n\n), subscription as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`\n\n\n), transfers as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__transfer`\n\n)\n\nselect\n    balance_transaction.balance_transaction_id,\n    balance_transaction.created_at as balance_transaction_created_at,\n    balance_transaction.available_on as balance_transaction_available_on,\n    balance_transaction.currency as balance_transaction_currency,\n    balance_transaction.amount as balance_transaction_amount,\n    balance_transaction.fee as balance_transaction_fee,\n    balance_transaction.net as balance_transaction_net,\n    balance_transaction.source as balance_transaction_source_id,\n    balance_transaction.description as balance_transaction_description,\n    balance_transaction.type as balance_transaction_type,\n    coalesce(balance_transaction.reporting_category,\n        case\n            when balance_transaction.type in ('charge', 'payment') then 'charge'\n            when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n            when balance_transaction.type in ('payout_cancel', 'payout_failure') then 'payout_reversal'\n            when balance_transaction.type in ('transfer', 'recipient_transfer') then 'transfer'\n            when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n            else balance_transaction.type end)\n    as balance_transaction_reporting_category,\n    case\n        when balance_transaction.type in ('charge', 'payment') then charge.amount \n        when balance_transaction.type in ('refund', 'payment_refund') then refund.amount\n        when dispute_id is not null then dispute.dispute_amount\n        else null\n    end as customer_facing_amount,\n    case \n        when balance_transaction.type = 'charge' then charge.currency \n    end as customer_facing_currency,\n    \n\n        datetime_add(\n            cast( balance_transaction.available_on as datetime),\n        interval 1 day\n        )\n\n as effective_at,\n    case\n        when payout.is_automatic = true then payout.payout_id \n        else null\n    end as automatic_payout_id,\n    payout.payout_id,\n    payout.created_at as payout_created_at,\n    payout.currency as payout_currency,\n    payout.is_automatic as payout_is_automatic,\n    payout.arrival_date_at as payout_arrival_date_at,\n    case\n        when payout.is_automatic = true then payout.arrival_date_at\n        else null\n    end as automatic_payout_effective_at,\n    payout.type as payout_type,\n    payout.status as payout_status,\n    payout.description as payout_description,\n    payout.destination_bank_account_id,\n    payout.destination_card_id,\n    coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n    charge.receipt_email,\n    customer.email as customer_email,\n    customer.customer_name,\n    customer.description as customer_description,\n    customer.shipping_address_line_1 as customer_shipping_address_line_1,\n    customer.shipping_address_line_2 as customer_shipping_address_line_2,\n    customer.shipping_address_city as customer_shipping_address_city,\n    customer.shipping_address_state as customer_shipping_address_state,\n    customer.shipping_address_postal_code as customer_shipping_address_postal_code,\n    customer.shipping_address_country as customer_shipping_address_country,\n    customer.customer_address_line_1,\n    customer.customer_address_line_2,\n    customer.customer_address_city,\n    customer.customer_address_state,\n    customer.customer_address_postal_code,\n    customer.customer_address_country,\n    charge.shipping_address_line_1 as charge_shipping_address_line_1,\n    charge.shipping_address_line_2 as charge_shipping_address_line_2,\n    charge.shipping_address_city as charge_shipping_address_city,\n    charge.shipping_address_state as charge_shipping_address_state,\n    charge.shipping_address_postal_code as charge_shipping_address_postal_code,\n    charge.shipping_address_country as charge_shipping_address_country,\n    cards.card_address_line_1,\n    cards.card_address_line_2,\n    cards.card_address_city,\n    cards.card_address_state,\n    cards.card_address_postal_code,\n    cards.card_address_country,\n    coalesce(charge.charge_id, refund.charge_id, dispute.charge_id) as charge_id,\n    charge.created_at as charge_created_at,\n    payment_intent.payment_intent_id,\n\n    \n    invoice.invoice_id,\n    invoice.number as invoice_number,\n    \n\n    \n    subscription.subscription_id,\n    \n\n    \n    payment_method.type as payment_method_type,\n    payment_method_card.brand as payment_method_brand,\n    payment_method_card.funding as payment_method_funding,\n    \n\n    cards.brand as card_brand,\n    cards.funding as card_funding,\n    cards.country as card_country,\n    charge.statement_descriptor as charge_statement_descriptor ,\n    dispute.dispute_id,\n    dispute.dispute_reason,\n    refund.refund_id,\n    refund.reason as refund_reason,\n    transfers.transfer_id,\n    coalesce(balance_transaction.connected_account_id, charge.connected_account_id) as connected_account_id,\n    connected_account.country as connected_account_country,\n    case \n        when charge.connected_account_id is not null then charge.charge_id\n        else null\n    end as connected_account_direct_charge_id,\n    balance_transaction.source_relation\n\nfrom balance_transaction\n\nleft join payout \n    on payout.balance_transaction_id = balance_transaction.balance_transaction_id\n    and payout.source_relation = balance_transaction.source_relation\nleft join account connected_account\n    on balance_transaction.connected_account_id = connected_account.account_id\n    and balance_transaction.source_relation = connected_account.source_relation\nleft join charge\n    on charge.balance_transaction_id = balance_transaction.balance_transaction_id\n    and charge.source_relation = balance_transaction.source_relation\nleft join customer \n    on charge.customer_id = customer.customer_id\n    and charge.source_relation = customer.source_relation\nleft join cards\n    on charge.card_id = cards.card_id\n    and charge.source_relation = cards.source_relation\nleft join payment_intent\n    on charge.payment_intent_id = payment_intent.payment_intent_id\n    and charge.source_relation = payment_intent.source_relation\n\n\nleft join payment_method\n    on charge.payment_method_id = payment_method.payment_method_id\n    and charge.source_relation = payment_method.source_relation\nleft join payment_method_card \n    on payment_method_card.payment_method_id = payment_method.payment_method_id\n    and charge.source_relation = balance_transaction.source_relation\n\n\n\nleft join invoice \n    on charge.invoice_id = invoice.invoice_id\n    and charge.source_relation = invoice.source_relation\n\n\n\nleft join subscription\n    on subscription.latest_invoice_id =  charge.invoice_id\n    and subscription.source_relation =  charge.source_relation\n\n\nleft join refund\n    on refund.balance_transaction_id = balance_transaction.balance_transaction_id\n    and refund.source_relation = balance_transaction.source_relation\nleft join transfers \n    on transfers.balance_transaction_id = balance_transaction.balance_transaction_id\n    and transfers.source_relation = balance_transaction.source_relation\nleft join charge as refund_charge \n    on refund.charge_id = refund_charge.charge_id\n    and refund.source_relation = refund_charge.source_relation\nleft join dispute\n    on charge.charge_id = dispute.charge_id\n    and charge.source_relation = dispute.source_relation", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.stripe__invoice_details": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "stripe__invoice_details", "resource_type": "model", "package_name": "stripe", "path": "stripe__invoice_details.sql", "original_file_path": "models/stripe__invoice_details.sql", "unique_id": "model.stripe.stripe__invoice_details", "fqn": ["stripe", "stripe__invoice_details"], "alias": "stripe__invoice_details", "checksum": {"name": "sha256", "checksum": "6581e7ec2865b627c70b6347d672ca7408914e1fa613408df6bd6830deb89531"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents an invoice, enriched with details about the associated charge, customer, and subscription data.", "columns": {"invoice_id": {"name": "invoice_id", "description": "The unique Identifier of the invoice object. Note invoices can have many line items, so this value can appear multiple times.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_created_at": {"name": "invoice_created_at", "description": "Timestamp of when the invoice was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_start": {"name": "period_start", "description": "Timestamp of the start of the period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_end": {"name": "period_end", "description": "Timestamp of the end of the period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date when payment for the invoice is due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency that the invoice is in. Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "Final amount due at this time for this invoice. If the invoice\u2019s total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, if any, that the customer has paid on the invoice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "The amount of the invoice before discounts and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax being charged in the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total": {"name": "total", "description": "The Total after discounts and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount of the invoice remaining to be paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_memo": {"name": "invoice_memo", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_of_line_items": {"name": "number_of_line_items", "description": "Number of line item records for this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_quantity": {"name": "total_quantity", "description": "The total quantity of items for this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "The ID of the balance transaction object representing payment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "The amount charged to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_status": {"name": "charge_status", "description": "The status of the charge for the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_created_at": {"name": "charge_created_at", "description": "When the charge for the invoice was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_is_refunded": {"name": "charge_is_refunded", "description": "Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_id": {"name": "connected_account_id", "description": "The ID of the account connected to the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The associated customer reference.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "Description of the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_account_balance": {"name": "customer_account_balance", "description": "Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_currency": {"name": "customer_currency", "description": "Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_is_delinquent": {"name": "customer_is_delinquent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email of the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "ID of the subscription this invoice relates to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_item_id": {"name": "subscription_item_id", "description": "ID of the subscription item this invoice item relates to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_billing": {"name": "subscription_billing", "description": "How the subscription is billed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_start_date": {"name": "subscription_start_date", "description": "The start date of the subscription", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_ended_at": {"name": "subscription_ended_at", "description": "The end date of the subscription", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table", "enabled": true}, "created_at": 1709229533.403413, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__invoice_details`", "raw_code": "{{ config(enabled=var('stripe__using_invoices', True)) }}\n\nwith invoice as (\n\n    select *\n    from {{ var('invoice') }}  \n\n), charge as (\n\n    select *\n    from {{ var('charge') }}  \n\n), invoice_line_item as (\n\n    select\n        invoice_id,\n        source_relation,\n        coalesce(count(distinct unique_invoice_line_item_id),0) as number_of_line_items,\n        coalesce(sum(quantity),0) as total_quantity\n\n    from {{ var('invoice_line_item') }}  \n    group by 1,2\n\n), customer as (\n\n    select *\n    from {{ var('customer') }}  \n\n{% if var('stripe__using_subscriptions', True) %}\n\n), subscription as (\n\n    select *\n    from {{ var('subscription') }}  \n\n), price_plan as (\n\n    select *\n    from {{ var('price_plan') }}  \n\n{% endif %}\n)\n\nselect \n    invoice.invoice_id,\n    invoice.number as invoice_number,\n    invoice.created_at as invoice_created_at,\n    invoice.period_start,\n    invoice.period_end,\n    invoice.status,\n    invoice.due_date,\n    invoice.currency,\n    coalesce(invoice.amount_due,0) as amount_due,\n    coalesce(invoice.amount_paid,0) as amount_paid,\n    coalesce(invoice.subtotal,0) as subtotal,\n    coalesce(invoice.tax,0) as tax,\n    coalesce(invoice.total,0) as total,\n    coalesce(invoice.amount_remaining,0) as amount_remaining,\n    coalesce(invoice.attempt_count,0) as attempt_count,\n    invoice.description as invoice_memo,\n    invoice_line_item.number_of_line_items,\n    invoice_line_item.total_quantity,\n    charge.balance_transaction_id,\n    charge.amount as charge_amount, \n    charge.status as charge_status,\n    charge.connected_account_id, \n    charge.created_at as charge_created_at,\n    charge.is_refunded as charge_is_refunded,\n    customer.customer_id,\n    customer.description as customer_description,\n    customer.account_balance as customer_account_balance,\n    customer.currency as customer_currency,\n    customer.is_delinquent as customer_is_delinquent,\n    customer.email as customer_email,\n    \n    {% if var('stripe__using_subscriptions', True) %}\n    subscription.subscription_id,\n    subscription.billing as subscription_billing,\n    subscription.start_date_at as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n\n    {% endif %}\n    invoice.source_relation\n\nfrom invoice\n\nleft join invoice_line_item \n    on invoice.invoice_id = invoice_line_item.invoice_id\n    and invoice.source_relation = invoice_line_item.source_relation\n\nleft join charge \n    on invoice.charge_id = charge.charge_id\n    and invoice.invoice_id = charge.invoice_id\n    and invoice.source_relation = charge.source_relation\n\n{% if var('stripe__using_subscriptions', True) %}\nleft join subscription\n    on invoice.subscription_id = subscription.subscription_id\n    and invoice.source_relation = subscription.source_relation\n\n{% endif %}\n\nleft join customer \n    on invoice.customer_id = customer.customer_id\n    and invoice.source_relation = customer.source_relation", "language": "sql", "refs": [{"name": "stg_stripe__invoice", "package": null, "version": null}, {"name": "stg_stripe__charge", "package": null, "version": null}, {"name": "stg_stripe__invoice_line_item", "package": null, "version": null}, {"name": "stg_stripe__customer", "package": null, "version": null}, {"name": "stg_stripe__subscription", "package": null, "version": null}, {"name": "stg_stripe__price_plan", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__subscription", "model.stripe_source.stg_stripe__price_plan"]}, "compiled_path": "target/compiled/stripe/models/stripe__invoice_details.sql", "compiled": true, "compiled_code": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice`  \n\n), charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`  \n\n), invoice_line_item as (\n\n    select\n        invoice_id,\n        source_relation,\n        coalesce(count(distinct unique_invoice_line_item_id),0) as number_of_line_items,\n        coalesce(sum(quantity),0) as total_quantity\n\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item`  \n    group by 1,2\n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`  \n\n\n\n), subscription as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`  \n\n), price_plan as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__price_plan`  \n\n\n)\n\nselect \n    invoice.invoice_id,\n    invoice.number as invoice_number,\n    invoice.created_at as invoice_created_at,\n    invoice.period_start,\n    invoice.period_end,\n    invoice.status,\n    invoice.due_date,\n    invoice.currency,\n    coalesce(invoice.amount_due,0) as amount_due,\n    coalesce(invoice.amount_paid,0) as amount_paid,\n    coalesce(invoice.subtotal,0) as subtotal,\n    coalesce(invoice.tax,0) as tax,\n    coalesce(invoice.total,0) as total,\n    coalesce(invoice.amount_remaining,0) as amount_remaining,\n    coalesce(invoice.attempt_count,0) as attempt_count,\n    invoice.description as invoice_memo,\n    invoice_line_item.number_of_line_items,\n    invoice_line_item.total_quantity,\n    charge.balance_transaction_id,\n    charge.amount as charge_amount, \n    charge.status as charge_status,\n    charge.connected_account_id, \n    charge.created_at as charge_created_at,\n    charge.is_refunded as charge_is_refunded,\n    customer.customer_id,\n    customer.description as customer_description,\n    customer.account_balance as customer_account_balance,\n    customer.currency as customer_currency,\n    customer.is_delinquent as customer_is_delinquent,\n    customer.email as customer_email,\n    \n    \n    subscription.subscription_id,\n    subscription.billing as subscription_billing,\n    subscription.start_date_at as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n\n    \n    invoice.source_relation\n\nfrom invoice\n\nleft join invoice_line_item \n    on invoice.invoice_id = invoice_line_item.invoice_id\n    and invoice.source_relation = invoice_line_item.source_relation\n\nleft join charge \n    on invoice.charge_id = charge.charge_id\n    and invoice.invoice_id = charge.invoice_id\n    and invoice.source_relation = charge.source_relation\n\n\nleft join subscription\n    on invoice.subscription_id = subscription.subscription_id\n    and invoice.source_relation = subscription.source_relation\n\n\n\nleft join customer \n    on invoice.customer_id = customer.customer_id\n    and invoice.source_relation = customer.source_relation", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.stripe__subscription_details": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "stripe__subscription_details", "resource_type": "model", "package_name": "stripe", "path": "stripe__subscription_details.sql", "original_file_path": "models/stripe__subscription_details.sql", "unique_id": "model.stripe.stripe__subscription_details", "fqn": ["stripe", "stripe__subscription_details"], "alias": "stripe__subscription_details", "checksum": {"name": "sha256", "checksum": "7d2b2043a80d1c67b26aa7b72e334f09067e3a23cab3144b7e4761bfa5ce3c27"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a subscription, enriched with customer details and payment aggregations.", "columns": {"subscription_id": {"name": "subscription_id", "description": "Unique identifier for the subscription object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "Description of the customer who owns the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email of the customer who owns the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date_at": {"name": "start_date_at", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing": {"name": "billing", "description": "How the description is billed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with cancel_at_period_end, canceled_at will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the subscription object was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_cancel_at_period_end": {"name": "is_cancel_at_period_end", "description": "If the subscription has been canceled with the at_period_end flag set to true, cancel_at_period_end on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number_invoices_generated": {"name": "number_invoices_generated", "description": "Number of invoices that have been generated for this subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount_billed": {"name": "total_amount_billed", "description": "The total amount that has been billed to the customer for this subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount_paid": {"name": "total_amount_paid", "description": "The total amount paid by the customer for this subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_amount_remaining": {"name": "total_amount_remaining", "description": "Any outstanding balance for invoices related to this subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "most_recent_invoice_created_at": {"name": "most_recent_invoice_created_at", "description": "The timestamp of the most recent invoice for this subscription created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_invoice_amount": {"name": "average_invoice_amount", "description": "The average amount of invoices generated for this subscription", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "average_line_item_amount": {"name": "average_line_item_amount", "description": "The average sum of the line items for invoices generated for this subscription", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "avg_num_line_items": {"name": "avg_num_line_items", "description": "The average number of line items for invoices generated for this subscription", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table", "enabled": true}, "created_at": 1709229533.408608, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__subscription_details`", "raw_code": "{{ config(enabled=fivetran_utils.enabled_vars(['stripe__using_invoices','stripe__using_subscriptions'])) }}\n\nwith invoice as (\n\n    select *\n    from {{ var('invoice') }}  \n\n), charge as (\n\n    select *\n    from {{ var('charge') }}  \n\n), invoice_line_item as (\n\n    select *\n    from {{ var('invoice_line_item') }}  \n\n), subscription as (\n\n    select *\n    from {{ var('subscription') }}  \n\n), customer as (\n\n    select *\n    from {{ var('customer') }}  \n\n), line_items_groups as (\n\n  select\n    invoice.invoice_id,\n    invoice.amount_due,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.created_at,\n    invoice.source_relation,\n    max(invoice_line_item.subscription_id) as subscription_id,\n    coalesce(sum(invoice_line_item.amount),0) as total_line_item_amount,\n    coalesce(count(distinct invoice_line_item.unique_invoice_line_item_id),0) as number_of_line_items\n  from invoice_line_item\n  join invoice \n    on invoice.invoice_id = invoice_line_item.invoice_id\n  group by 1, 2, 3, 4, 5, 6\n\n), grouped_by_subscription as (\n\n  select\n    subscription_id,\n    source_relation,\n    count(distinct invoice_id) as number_invoices_generated,\n    sum(amount_due) as total_amount_billed,\n    sum(amount_paid) as total_amount_paid,\n    sum(amount_remaining) total_amount_remaining,\n    max(created_at) as most_recent_invoice_created_at,\n    avg(amount_due) as average_invoice_amount,\n    avg(total_line_item_amount) as average_line_item_amount,\n    avg(number_of_line_items) as avg_num_line_items\n  from line_items_groups\n  group by 1, 2\n\n)\n\n\nselect\n  subscription.subscription_id,\n  subscription.customer_id,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.status,\n  subscription.start_date_at,\n  subscription.ended_at,\n  subscription.billing,\n  subscription.billing_cycle_anchor,\n  subscription.canceled_at,\n  subscription.created_at,\n  subscription.current_period_start,\n  subscription.current_period_end,\n  subscription.days_until_due,\n  subscription.is_cancel_at_period_end,\n  subscription.cancel_at,\n  number_invoices_generated,\n  total_amount_billed,\n  total_amount_paid,\n  total_amount_remaining,\n  most_recent_invoice_created_at,\n  average_invoice_amount,\n  average_line_item_amount,\n  avg_num_line_items,\n  subscription.source_relation\nfrom subscription\nleft join grouped_by_subscription \n  on subscription.subscription_id = grouped_by_subscription.subscription_id\n  and subscription.source_relation = grouped_by_subscription.source_relation\nleft join customer\n  on subscription.customer_id = customer.customer_id\n  and subscription.source_relation = customer.source_relation", "language": "sql", "refs": [{"name": "stg_stripe__invoice", "package": null, "version": null}, {"name": "stg_stripe__charge", "package": null, "version": null}, {"name": "stg_stripe__invoice_line_item", "package": null, "version": null}, {"name": "stg_stripe__subscription", "package": null, "version": null}, {"name": "stg_stripe__customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__subscription", "model.stripe_source.stg_stripe__customer"]}, "compiled_path": "target/compiled/stripe/models/stripe__subscription_details.sql", "compiled": true, "compiled_code": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice`  \n\n), charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`  \n\n), invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item`  \n\n), subscription as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`  \n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`  \n\n), line_items_groups as (\n\n  select\n    invoice.invoice_id,\n    invoice.amount_due,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.created_at,\n    invoice.source_relation,\n    max(invoice_line_item.subscription_id) as subscription_id,\n    coalesce(sum(invoice_line_item.amount),0) as total_line_item_amount,\n    coalesce(count(distinct invoice_line_item.unique_invoice_line_item_id),0) as number_of_line_items\n  from invoice_line_item\n  join invoice \n    on invoice.invoice_id = invoice_line_item.invoice_id\n  group by 1, 2, 3, 4, 5, 6\n\n), grouped_by_subscription as (\n\n  select\n    subscription_id,\n    source_relation,\n    count(distinct invoice_id) as number_invoices_generated,\n    sum(amount_due) as total_amount_billed,\n    sum(amount_paid) as total_amount_paid,\n    sum(amount_remaining) total_amount_remaining,\n    max(created_at) as most_recent_invoice_created_at,\n    avg(amount_due) as average_invoice_amount,\n    avg(total_line_item_amount) as average_line_item_amount,\n    avg(number_of_line_items) as avg_num_line_items\n  from line_items_groups\n  group by 1, 2\n\n)\n\n\nselect\n  subscription.subscription_id,\n  subscription.customer_id,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.status,\n  subscription.start_date_at,\n  subscription.ended_at,\n  subscription.billing,\n  subscription.billing_cycle_anchor,\n  subscription.canceled_at,\n  subscription.created_at,\n  subscription.current_period_start,\n  subscription.current_period_end,\n  subscription.days_until_due,\n  subscription.is_cancel_at_period_end,\n  subscription.cancel_at,\n  number_invoices_generated,\n  total_amount_billed,\n  total_amount_paid,\n  total_amount_remaining,\n  most_recent_invoice_created_at,\n  average_invoice_amount,\n  average_line_item_amount,\n  avg_num_line_items,\n  subscription.source_relation\nfrom subscription\nleft join grouped_by_subscription \n  on subscription.subscription_id = grouped_by_subscription.subscription_id\n  and subscription.source_relation = grouped_by_subscription.source_relation\nleft join customer\n  on subscription.customer_id = customer.customer_id\n  and subscription.source_relation = customer.source_relation", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.stripe__invoice_line_item_details": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "stripe__invoice_line_item_details", "resource_type": "model", "package_name": "stripe", "path": "stripe__invoice_line_item_details.sql", "original_file_path": "models/stripe__invoice_line_item_details.sql", "unique_id": "model.stripe.stripe__invoice_line_item_details", "fqn": ["stripe", "stripe__invoice_line_item_details"], "alias": "stripe__invoice_line_item_details", "checksum": {"name": "sha256", "checksum": "ea7455bfcbd34f4075f03d9d23a5a71abfddfba1d853225b9a3106d90fa1548b"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents an invoice line item, enriched with details about the associated invoice, charge, customer, subscription, and pricing data.", "columns": {"invoice_line_item_id": {"name": "invoice_line_item_id", "description": "The unique Identifier of the invoice line object. Note that the same line item can be shown across different invoices, so this value can appear multiple times.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The unique Identifier of the invoice object. Note invoices can have many line items, so this value can appear multiple times.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_item_id": {"name": "invoice_item_id", "description": "The ID of the invoice item this item is a part of", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_line_item_amount": {"name": "invoice_line_item_amount", "description": "Amount for this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Currency of this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_line_item_memo": {"name": "invoice_line_item_memo", "description": "Description for this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_discountable": {"name": "is_discountable", "description": "Whether this line item is discountable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The ID that documents the plan record detailing the base price, currency, and billing information for each product. Valid if you are using the Plan API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "price_id": {"name": "price_id", "description": "The ID that documents the price record detailing the base price, currency, and billing information for each product. Valid if you are using the new Prices API.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "proration": {"name": "proration", "description": "Whether this is a proration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The ID of the subscription that the invoice item pertains to, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_item_id": {"name": "subscription_item_id", "description": "The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "A string identifying the type of the source of this line item, either an invoice item or a subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unique_invoice_line_item_id": {"name": "unique_invoice_line_item_id", "description": "A unique id generated for old invoice line item ID's from a past version of the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_start": {"name": "period_start", "description": "Start of the usage period during which invoice items were added to this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_end": {"name": "period_end", "description": "End of the usage period during which invoice items were added to this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_created_at": {"name": "invoice_created_at", "description": "Timestamp of when the invoice was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_status": {"name": "invoice_status", "description": "Current status of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_due_date": {"name": "invoice_due_date", "description": "Date when payment for the invoice is due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_amount_due": {"name": "invoice_amount_due", "description": "Final amount due at this time for this invoice. If the invoice\u2019s total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_amount_paid": {"name": "invoice_amount_paid", "description": "The amount, if any, that the customer has paid on the invoice", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_subtotal": {"name": "invoice_subtotal", "description": "The amount of the invoice before discounts and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_tax": {"name": "invoice_tax", "description": "The amount of tax being charged in the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_total": {"name": "invoice_total", "description": "The total of the invoice after discounts and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_id": {"name": "connected_account_id", "description": "The ID of the account connected to the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The associated customer reference.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_billing": {"name": "subscription_billing", "description": "How the subscription is billed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_start_date": {"name": "subscription_start_date", "description": "The start date of the subscription", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_ended_at": {"name": "subscription_ended_at", "description": "The end date of the subscription", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "price_plan_is_active": {"name": "price_plan_is_active", "description": "Boolean indicating if the plan or price is active (true) or in-active (false).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "price_plan_amount": {"name": "price_plan_amount", "description": "The unit amount in cents to be charged, represented as a whole integer if possible.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "price_plan_interval": {"name": "price_plan_interval", "description": "The frequency at which a subscription is billed. One of day, week, month or year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "price_plan_interval_count": {"name": "price_plan_interval_count", "description": "The number of intervals between subscription billings. For example, interval_count=3 bills every 3 months.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "price_plan_nickname": {"name": "price_plan_nickname", "description": "A brief description of the plan or price, hidden from customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "price_plan_product_id": {"name": "price_plan_product_id", "description": "Reference to the product this price or plan is about.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table", "enabled": true}, "created_at": 1709229533.406495, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__invoice_line_item_details`", "raw_code": "{{ config(enabled=var('stripe__using_invoices', True)) }}\n\nwith invoice_line_item as (\n\n    select *\n    from {{ var('invoice_line_item') }} \n\n), invoice_details as (\n\n    select *\n    from {{ ref('stripe__invoice_details') }}\n\n{% if var('stripe__using_subscriptions', True) %}\n), subscription as (\n\n    select *\n    from {{ var('subscription') }}  \n\n), price_plan as (\n\n    select *\n    from {{ var('price_plan') }}  \n\n{% endif %}\n)\n\nselect \n    invoice_line_item.invoice_line_item_id,\n    invoice_line_item.invoice_id,\n    invoice_line_item.invoice_item_id,\n    coalesce(invoice_line_item.amount,0) as invoice_line_item_amount,\n    invoice_line_item.currency,\n    invoice_line_item.description as invoice_line_item_memo,\n    invoice_line_item.is_discountable,\n    invoice_line_item.plan_id,\n    invoice_line_item.price_id,\n    invoice_line_item.proration,\n    invoice_line_item.quantity,\n    invoice_line_item.subscription_id,\n    invoice_line_item.subscription_item_id,\n    invoice_line_item.type,\n    invoice_line_item.unique_invoice_line_item_id,\n    invoice_line_item.period_start,\n    invoice_line_item.period_end,\n    invoice_details.invoice_created_at,\n    invoice_details.status as invoice_status,\n    invoice_details.due_date as invoice_due_date,\n    coalesce(invoice_details.amount_due,0) as invoice_amount_due,\n    coalesce(invoice_details.amount_paid,0) as invoice_amount_paid,\n    coalesce(invoice_details.subtotal,0) as invoice_subtotal,\n    coalesce(invoice_details.tax,0) as invoice_tax,\n    coalesce(invoice_details.total,0) as invoice_total,\n    invoice_details.connected_account_id as connected_account_id,\n    invoice_details.customer_id as customer_id,\n\n    {% if var('stripe__using_subscriptions', True) %}\n\n    subscription.billing as subscription_billing,\n    subscription.start_date_at as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n    price_plan.is_active as price_plan_is_active,\n    price_plan.unit_amount as price_plan_amount,\n    price_plan.recurring_interval as price_plan_interval,\n    price_plan.recurring_interval_count as price_plan_interval_count,\n    price_plan.nickname as price_plan_nickname,\n    price_plan.product_id as price_plan_product_id,\n    {% endif %}\n\n    invoice_line_item.source_relation\n    \nfrom invoice_line_item\n\nleft join invoice_details \n    on invoice_line_item.invoice_id = invoice_details.invoice_id\n    and invoice_line_item.source_relation = invoice_details.source_relation\n\n{% if var('stripe__using_subscriptions', True) %}\n\nleft join subscription\n    on invoice_line_item.subscription_id = subscription.subscription_id\n    and invoice_line_item.source_relation = subscription.source_relation\n\nleft join price_plan\n\n{% if var('stripe__using_price', stripe_source.does_table_exist('price')) %}\n    on invoice_line_item.price_id = price_plan.price_plan_id\n{% else %}\n    on invoice_line_item.plan_id = price_plan.price_plan_id\n{% endif %}\n\n    and invoice_line_item.source_relation = price_plan.source_relation\n\n{% endif %}", "language": "sql", "refs": [{"name": "stg_stripe__invoice_line_item", "package": null, "version": null}, {"name": "stripe__invoice_details", "package": null, "version": null}, {"name": "stg_stripe__subscription", "package": null, "version": null}, {"name": "stg_stripe__price_plan", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.does_table_exist"], "nodes": ["model.stripe_source.stg_stripe__invoice_line_item", "model.stripe.stripe__invoice_details", "model.stripe_source.stg_stripe__subscription", "model.stripe_source.stg_stripe__price_plan"]}, "compiled_path": "target/compiled/stripe/models/stripe__invoice_line_item_details.sql", "compiled": true, "compiled_code": "\n\nwith invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item` \n\n), invoice_details as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__invoice_details`\n\n\n), subscription as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`  \n\n), price_plan as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__price_plan`  \n\n\n)\n\nselect \n    invoice_line_item.invoice_line_item_id,\n    invoice_line_item.invoice_id,\n    invoice_line_item.invoice_item_id,\n    coalesce(invoice_line_item.amount,0) as invoice_line_item_amount,\n    invoice_line_item.currency,\n    invoice_line_item.description as invoice_line_item_memo,\n    invoice_line_item.is_discountable,\n    invoice_line_item.plan_id,\n    invoice_line_item.price_id,\n    invoice_line_item.proration,\n    invoice_line_item.quantity,\n    invoice_line_item.subscription_id,\n    invoice_line_item.subscription_item_id,\n    invoice_line_item.type,\n    invoice_line_item.unique_invoice_line_item_id,\n    invoice_line_item.period_start,\n    invoice_line_item.period_end,\n    invoice_details.invoice_created_at,\n    invoice_details.status as invoice_status,\n    invoice_details.due_date as invoice_due_date,\n    coalesce(invoice_details.amount_due,0) as invoice_amount_due,\n    coalesce(invoice_details.amount_paid,0) as invoice_amount_paid,\n    coalesce(invoice_details.subtotal,0) as invoice_subtotal,\n    coalesce(invoice_details.tax,0) as invoice_tax,\n    coalesce(invoice_details.total,0) as invoice_total,\n    invoice_details.connected_account_id as connected_account_id,\n    invoice_details.customer_id as customer_id,\n\n    \n\n    subscription.billing as subscription_billing,\n    subscription.start_date_at as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n    price_plan.is_active as price_plan_is_active,\n    price_plan.unit_amount as price_plan_amount,\n    price_plan.recurring_interval as price_plan_interval,\n    price_plan.recurring_interval_count as price_plan_interval_count,\n    price_plan.nickname as price_plan_nickname,\n    price_plan.product_id as price_plan_product_id,\n    \n\n    invoice_line_item.source_relation\n    \nfrom invoice_line_item\n\nleft join invoice_details \n    on invoice_line_item.invoice_id = invoice_details.invoice_id\n    and invoice_line_item.source_relation = invoice_details.source_relation\n\n\n\nleft join subscription\n    on invoice_line_item.subscription_id = subscription.subscription_id\n    and invoice_line_item.source_relation = subscription.source_relation\n\nleft join price_plan\n\n\n    on invoice_line_item.price_id = price_plan.price_plan_id\n\n\n    and invoice_line_item.source_relation = price_plan.source_relation\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.stripe__daily_overview": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "stripe__daily_overview", "resource_type": "model", "package_name": "stripe", "path": "stripe__daily_overview.sql", "original_file_path": "models/stripe__daily_overview.sql", "unique_id": "model.stripe.stripe__daily_overview", "fqn": ["stripe", "stripe__daily_overview"], "alias": "stripe__daily_overview", "checksum": {"name": "sha256", "checksum": "5cfb5e901c62a39ebe8c355ad8872832ba1033adb3382e0078ab9642c0e3325d"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents, per account per day, a summary of daily totals and rolling totals by transaction type (balances, payments, refunds, payouts, and other transactions).", "columns": {"account_id": {"name": "account_id", "description": "The ID of the account tied to the balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Day of record, taken from the date of each balance transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_daily_sales_amount": {"name": "total_daily_sales_amount", "description": "Total amount for when transaction type is a charge or payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_daily_refunds_amount": {"name": "total_daily_refunds_amount", "description": "Total amount for when transaction type is payment_refund or refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_daily_adjustments_amount": {"name": "total_daily_adjustments_amount", "description": "Total amount for when transaction type is adjustment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_daily_other_transactions_amount": {"name": "total_daily_other_transactions_amount", "description": "Total amount for when transaction type is not of the prior types.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_daily_gross_transaction_amount": {"name": "total_daily_gross_transaction_amount", "description": "Total amount for when transaction type is not payout or transfer", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_daily_net_transactions_amount": {"name": "total_daily_net_transactions_amount", "description": "Total net for when transaction type is not payout or transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_daily_payout_fee_amount": {"name": "total_daily_payout_fee_amount", "description": "Total fee for when transaction type is payout or transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_daily_gross_payout_amount": {"name": "total_daily_gross_payout_amount", "description": "Total amount for when transaction type is payout or transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_net_activity_amount": {"name": "daily_net_activity_amount", "description": "Net amount minus fees from payouts and transfers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "daily_end_balance_amount": {"name": "daily_end_balance_amount", "description": "daily_net_activity_amount + total_daily_gross_payout_amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_daily_sales_count": {"name": "total_daily_sales_count", "description": "Count of total balance transactions where type is payment or charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_daily_payouts_count": {"name": "total_daily_payouts_count", "description": "Count of total balance transactions where type is payout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_daily_adjustments_count": {"name": "total_daily_adjustments_count", "description": "Count of total balance transactions where type is adjustment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_daily_failed_charge_count": {"name": "total_daily_failed_charge_count", "description": "Count of incomplete charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total_daily_failed_charge_amount": {"name": "total_daily_failed_charge_amount", "description": "Total amount of incomplete charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_daily_sales_amount": {"name": "rolling_total_daily_sales_amount", "description": "Rolling total of total_daily_sales_amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_daily_refunds_amount": {"name": "rolling_total_daily_refunds_amount", "description": "Rolling total of total_daily_refunds_amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_daily_adjustments_amount": {"name": "rolling_total_daily_adjustments_amount", "description": "Rolling total of total_daily_adjustments_amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_daily_other_transactions_amount": {"name": "rolling_total_daily_other_transactions_amount", "description": "Rolling total of total_daily_other_transactions_amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_daily_gross_transaction_amount": {"name": "rolling_total_daily_gross_transaction_amount", "description": "Rolling total of total_daily_gross_transaction_amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_daily_net_transactions_amount": {"name": "rolling_total_daily_net_transactions_amount", "description": "Rolling total of total_daily_net_transactions_amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_daily_payout_fee_amount": {"name": "rolling_total_daily_payout_fee_amount", "description": "Rolling total of total_daily_payout_fee_amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_daily_gross_payout_amount": {"name": "rolling_total_daily_gross_payout_amount", "description": "Rolling total of total_daily_gross_payout_amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_daily_net_activity_amount": {"name": "rolling_daily_net_activity_amount", "description": "Rolling total of daily_net_activity_amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_daily_end_balance_amount": {"name": "rolling_daily_end_balance_amount", "description": "Rolling total of daily_end_balance_amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_daily_sales_count": {"name": "rolling_total_daily_sales_count", "description": "Rolling total of total_daily_sales_count", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_daily_payouts_count": {"name": "rolling_total_daily_payouts_count", "description": "Rolling total of total_daily_payouts_count", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_daily_adjustments_count": {"name": "rolling_total_daily_adjustments_count", "description": "Rolling total of total_daily_adjustments_count", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_daily_failed_charge_count": {"name": "rolling_total_daily_failed_charge_count", "description": "Rolling total of total_daily_failed_charge_count", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "rolling_total_daily_failed_charge_amount": {"name": "rolling_total_daily_failed_charge_amount", "description": "Rolling total of total_daily_failed_charge_amount", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1709229533.4145222, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__daily_overview`", "raw_code": "{% set rolling_fields = ['rolling_total_daily_sales_amount', 'rolling_total_daily_refunds_amount', 'rolling_total_daily_adjustments_amount', 'rolling_total_daily_other_transactions_amount', 'rolling_total_daily_gross_transaction_amount', 'rolling_total_daily_net_transactions_amount', 'rolling_total_daily_payout_fee_amount', 'rolling_total_daily_gross_payout_amount', 'rolling_daily_net_activity_amount', 'rolling_daily_end_balance_amount', 'rolling_total_daily_sales_count', 'rolling_total_daily_payouts_count', 'rolling_total_daily_adjustments_count', 'rolling_total_daily_failed_charge_count', 'rolling_total_daily_failed_charge_amount'] %}\n\nwith account_partitions as (\n\n    select * \n    from {{ ref('int_stripe__account_partitions') }}\n),\n\nfinal as (\n\n    select\n        account_id,\n        {{ dbt_utils.generate_surrogate_key(['account_id','date_day']) }} as account_daily_id,\n\n        date_day,        \n        date_week,\n        date_month, \n        date_year,  \n        date_index,\n        source_relation,\n        coalesce(total_daily_sales_amount,0) as total_daily_sales_amount,\n        coalesce(total_daily_refunds_amount,0) as total_daily_refunds_amount,\n        coalesce(total_daily_adjustments_amount,0) as total_daily_adjustments_amount,\n        coalesce(total_daily_other_transactions_amount,0) as total_daily_other_transactions_amount,\n        coalesce(total_daily_gross_transaction_amount,0) as total_daily_gross_transaction_amount,\n        coalesce(total_daily_net_transactions_amount,0) as total_daily_net_transactions_amount,\n        coalesce(total_daily_payout_fee_amount,0) as total_daily_payout_fee_amount,\n        coalesce(total_daily_gross_payout_amount,0) as total_daily_gross_payout_amount,\n        coalesce(daily_net_activity_amount,0) as daily_net_activity_amount,\n        coalesce(daily_end_balance_amount,0) as daily_end_balance_amount,\n        coalesce(total_daily_sales_count,0) as total_daily_sales_count,\n        coalesce(total_daily_payouts_count,0) as total_daily_payouts_count,\n        coalesce(total_daily_adjustments_count,0) as total_daily_adjustments_count,\n        coalesce(total_daily_failed_charge_count,0) as total_daily_failed_charge_count,\n        coalesce(total_daily_failed_charge_amount,0) as total_daily_failed_charge_amount,\n        {% for f in rolling_fields %}\n        coalesce({{ f }},   \n            first_value({{ f }}) over (partition by {{ f }}_partition order by date_day rows unbounded preceding)) as {{ f }}\n        {%- if not loop.last -%},{%- endif -%}\n        {% endfor %}\n\n    from account_partitions\n)    \n\nselect *\nfrom final", "language": "sql", "refs": [{"name": "int_stripe__account_partitions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.stripe.int_stripe__account_partitions"]}, "compiled_path": "target/compiled/stripe/models/stripe__daily_overview.sql", "compiled": true, "compiled_code": "\n\nwith account_partitions as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__account_partitions`\n),\n\nfinal as (\n\n    select\n        account_id,\n        to_hex(md5(cast(coalesce(cast(account_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date_day as string), '_dbt_utils_surrogate_key_null_') as string))) as account_daily_id,\n\n        date_day,        \n        date_week,\n        date_month, \n        date_year,  \n        date_index,\n        source_relation,\n        coalesce(total_daily_sales_amount,0) as total_daily_sales_amount,\n        coalesce(total_daily_refunds_amount,0) as total_daily_refunds_amount,\n        coalesce(total_daily_adjustments_amount,0) as total_daily_adjustments_amount,\n        coalesce(total_daily_other_transactions_amount,0) as total_daily_other_transactions_amount,\n        coalesce(total_daily_gross_transaction_amount,0) as total_daily_gross_transaction_amount,\n        coalesce(total_daily_net_transactions_amount,0) as total_daily_net_transactions_amount,\n        coalesce(total_daily_payout_fee_amount,0) as total_daily_payout_fee_amount,\n        coalesce(total_daily_gross_payout_amount,0) as total_daily_gross_payout_amount,\n        coalesce(daily_net_activity_amount,0) as daily_net_activity_amount,\n        coalesce(daily_end_balance_amount,0) as daily_end_balance_amount,\n        coalesce(total_daily_sales_count,0) as total_daily_sales_count,\n        coalesce(total_daily_payouts_count,0) as total_daily_payouts_count,\n        coalesce(total_daily_adjustments_count,0) as total_daily_adjustments_count,\n        coalesce(total_daily_failed_charge_count,0) as total_daily_failed_charge_count,\n        coalesce(total_daily_failed_charge_amount,0) as total_daily_failed_charge_amount,\n        \n        coalesce(rolling_total_daily_sales_amount,   \n            first_value(rolling_total_daily_sales_amount) over (partition by rolling_total_daily_sales_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_sales_amount,\n        coalesce(rolling_total_daily_refunds_amount,   \n            first_value(rolling_total_daily_refunds_amount) over (partition by rolling_total_daily_refunds_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_refunds_amount,\n        coalesce(rolling_total_daily_adjustments_amount,   \n            first_value(rolling_total_daily_adjustments_amount) over (partition by rolling_total_daily_adjustments_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_adjustments_amount,\n        coalesce(rolling_total_daily_other_transactions_amount,   \n            first_value(rolling_total_daily_other_transactions_amount) over (partition by rolling_total_daily_other_transactions_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_other_transactions_amount,\n        coalesce(rolling_total_daily_gross_transaction_amount,   \n            first_value(rolling_total_daily_gross_transaction_amount) over (partition by rolling_total_daily_gross_transaction_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_gross_transaction_amount,\n        coalesce(rolling_total_daily_net_transactions_amount,   \n            first_value(rolling_total_daily_net_transactions_amount) over (partition by rolling_total_daily_net_transactions_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_net_transactions_amount,\n        coalesce(rolling_total_daily_payout_fee_amount,   \n            first_value(rolling_total_daily_payout_fee_amount) over (partition by rolling_total_daily_payout_fee_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_payout_fee_amount,\n        coalesce(rolling_total_daily_gross_payout_amount,   \n            first_value(rolling_total_daily_gross_payout_amount) over (partition by rolling_total_daily_gross_payout_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_gross_payout_amount,\n        coalesce(rolling_daily_net_activity_amount,   \n            first_value(rolling_daily_net_activity_amount) over (partition by rolling_daily_net_activity_amount_partition order by date_day rows unbounded preceding)) as rolling_daily_net_activity_amount,\n        coalesce(rolling_daily_end_balance_amount,   \n            first_value(rolling_daily_end_balance_amount) over (partition by rolling_daily_end_balance_amount_partition order by date_day rows unbounded preceding)) as rolling_daily_end_balance_amount,\n        coalesce(rolling_total_daily_sales_count,   \n            first_value(rolling_total_daily_sales_count) over (partition by rolling_total_daily_sales_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_sales_count,\n        coalesce(rolling_total_daily_payouts_count,   \n            first_value(rolling_total_daily_payouts_count) over (partition by rolling_total_daily_payouts_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_payouts_count,\n        coalesce(rolling_total_daily_adjustments_count,   \n            first_value(rolling_total_daily_adjustments_count) over (partition by rolling_total_daily_adjustments_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_adjustments_count,\n        coalesce(rolling_total_daily_failed_charge_count,   \n            first_value(rolling_total_daily_failed_charge_count) over (partition by rolling_total_daily_failed_charge_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_failed_charge_count,\n        coalesce(rolling_total_daily_failed_charge_amount,   \n            first_value(rolling_total_daily_failed_charge_amount) over (partition by rolling_total_daily_failed_charge_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_failed_charge_amount\n\n    from account_partitions\n)    \n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.stripe__activity_itemized_2": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "stripe__activity_itemized_2", "resource_type": "model", "package_name": "stripe", "path": "stripe_reports/stripe__activity_itemized_2.sql", "original_file_path": "models/stripe_reports/stripe__activity_itemized_2.sql", "unique_id": "model.stripe.stripe__activity_itemized_2", "fqn": ["stripe", "stripe_reports", "stripe__activity_itemized_2"], "alias": "stripe__activity_itemized_2", "checksum": {"name": "sha256", "checksum": "4f7a75420638965198140ab60ed5c885cf07af4c971f63a7b8098800fb2d6aec"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Modeled after the [titular report](https://stripe.com/docs/reports/activity#downloading-data) from Stripe, each record represents a balance transaction and additional details such as associated customer, charge, refund, fee, and invoice information. This class of Activity reports allows you to see your payments activity alongside the related fees for the same period of time. Designed specifically for users with Interchange Plus (IC+) pricing, it presents users with fees on the date they incur them. This makes it useful for calculating fee accrual entries and understanding your net payments activity. This itemized report contains a full list of individual transactions.", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the related balance transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_created_at": {"name": "balance_transaction_created_at", "description": "Time (in UTC) at which the balance transaction affected your Stripe balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_reporting_category": {"name": "balance_transaction_reporting_category", "description": "(Beta) Reporting category is a top-level categorization of balance transactions for financial accounting purposes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO code for the currency in which the amount is defined.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount of this activity, expressed in major units of the currency (e.g., dollars for USD, or yen for JPY).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "The unique ID of the related charge, if any. For charges, this will be the charge itself; for refunds or disputes, this will be the original charge being refunded or disputed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "The unique ID of the related Payment Intent, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_id": {"name": "refund_id", "description": "The unique ID of the related refund, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispute_id": {"name": "dispute_id", "description": "The unique ID of the related dispute, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "Unique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "Unique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transfer_id": {"name": "transfer_id", "description": "The unique ID of the related transfer, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The unique ID of the related customer, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email address of the customer, if any, associated with this balance transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_name": {"name": "customer_name", "description": "Name of the customer, if any, associated with this balance transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "Description provided when creating the customer, often used to store the customer name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_line_1": {"name": "customer_shipping_address_line_1", "description": "First line of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_line_2": {"name": "customer_shipping_address_line_2", "description": "Second line of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_city": {"name": "customer_shipping_address_city", "description": "City of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_state": {"name": "customer_shipping_address_state", "description": "State of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_postal_code": {"name": "customer_shipping_address_postal_code", "description": "Postal code of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_country": {"name": "customer_shipping_address_country", "description": "Country of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_line_1": {"name": "customer_address_line_1", "description": "First line of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_line_2": {"name": "customer_address_line_2", "description": "Second line of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_city": {"name": "customer_address_city", "description": "City of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_state": {"name": "customer_address_state", "description": "State of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_postal_code": {"name": "customer_address_postal_code", "description": "Postal code of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_country": {"name": "customer_address_country", "description": "Country of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "First line of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Second line of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "City of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "State of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Postal code of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Country of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_line_1": {"name": "card_address_line_1", "description": "First line of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_line_2": {"name": "card_address_line_2", "description": "Second line of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_city": {"name": "card_address_city", "description": "City of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_state": {"name": "card_address_state", "description": "State of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_postal_code": {"name": "card_address_postal_code", "description": "Postal code of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_country": {"name": "card_address_country", "description": "Country of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "automatic_payout_id": {"name": "automatic_payout_id", "description": "(Applies only to accounts on automatic payouts.) For paid-out activity, this will be the unique ID for the associated payout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "automatic_payout_effective_at": {"name": "automatic_payout_effective_at", "description": "The date we expect this automatic payout to arrive in your bank account, in UTC. This is also when the paid-out funds are deducted from your Stripe balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_type": {"name": "payment_method_type", "description": "The type of payment method used in the related payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_brand": {"name": "card_brand", "description": "Card brand, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_funding": {"name": "card_funding", "description": "Card funding type, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_country": {"name": "card_country", "description": "Two-letter ISO code representing the country of the card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "statement_descriptor": {"name": "statement_descriptor", "description": "The dynamic statement descriptor or suffix specified when the related charge was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_facing_amount": {"name": "customer_facing_amount", "description": "For transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account\u2019s default, this field will reflect the amount as seen by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_description": {"name": "balance_transaction_description", "description": "An arbitrary string attached to the balance transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_id": {"name": "connected_account_id", "description": "For Stripe Connect activity related to a connected account, the unique ID for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_country": {"name": "connected_account_country", "description": "For Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_direct_charge_id": {"name": "connected_account_direct_charge_id", "description": "(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1709229533.415997, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__activity_itemized_2`", "raw_code": "with balance_transaction_enhanced as (\n\n    select *\n    from {{ ref('stripe__balance_transactions')}}\n\n)\n\nselect \n    balance_transaction_id,\n    balance_transaction_created_at,\n    balance_transaction_reporting_category,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as amount,\n    charge_id,\n    payment_intent_id,\n    refund_id,\n    dispute_id,\n\n    {% if var('stripe__using_invoices', True) %}\n    invoice_id,\n    invoice_number,\n    {% endif %}\n\n    {% if var('stripe__using_subscriptions', True) %}\n    subscription_id,\n    {% endif %}\n\n    transfer_id,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    automatic_payout_id,\n    automatic_payout_effective_at,\n\n    {% if var('stripe__using_payment_method', True) %}\n    payment_method_type,\n    {% endif %}\n    \n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    customer_facing_amount,\n    balance_transaction_description,\n    connected_account_id,\n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "language": "sql", "refs": [{"name": "stripe__balance_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.stripe.stripe__balance_transactions"]}, "compiled_path": "target/compiled/stripe/models/stripe_reports/stripe__activity_itemized_2.sql", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n\n)\n\nselect \n    balance_transaction_id,\n    balance_transaction_created_at,\n    balance_transaction_reporting_category,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as amount,\n    charge_id,\n    payment_intent_id,\n    refund_id,\n    dispute_id,\n\n    \n    invoice_id,\n    invoice_number,\n    \n\n    \n    subscription_id,\n    \n\n    transfer_id,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    automatic_payout_id,\n    automatic_payout_effective_at,\n\n    \n    payment_method_type,\n    \n    \n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    customer_facing_amount,\n    balance_transaction_description,\n    connected_account_id,\n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.stripe__balance_change_from_activity_itemized_3": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "stripe__balance_change_from_activity_itemized_3", "resource_type": "model", "package_name": "stripe", "path": "stripe_reports/stripe__balance_change_from_activity_itemized_3.sql", "original_file_path": "models/stripe_reports/stripe__balance_change_from_activity_itemized_3.sql", "unique_id": "model.stripe.stripe__balance_change_from_activity_itemized_3", "fqn": ["stripe", "stripe_reports", "stripe__balance_change_from_activity_itemized_3"], "alias": "stripe__balance_change_from_activity_itemized_3", "checksum": {"name": "sha256", "checksum": "366ca2cbf97353ff05b602328e49b700503c275c2609aa46a7999c491c02b2af"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Modeled after the [titular report](https://stripe.com/docs/reports/balance#schema-balance-change-from-activity-itemized-3) from Stripe, each record represents a balance transaction and additional details such as associated customer, charge, refund, card, and invoice information. This class of Balance reports is similar to a bank statement, helping you to reconcile your Stripe balance at the end of the month. The Balance report is most useful if you treat Stripe like a bank account for accounting purposes, reconciling the balance at the end of each month. If you have automatic payouts enabled and prefer to reconcile the transactions settled in each payout, see the Payout reconciliation report instead. The Balance Change from Activity reports provides a more detailed breakdown of your transactions by reporting category. This section includes all transactions except for payouts that affect your balance, including charges, refunds, disputes, other adjustments, and fees.", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the balance transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the balance transaction\u2019s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO code for the currency in which gross, fee and net are defined.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross": {"name": "gross", "description": "Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fee": {"name": "fee", "description": "Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reporting_category": {"name": "reporting_category", "description": "Reporting Category is a new categorization of balance transactions, meant to improve on the current type field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the balance transaction. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_facing_amount": {"name": "customer_facing_amount", "description": "For transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account\u2019s default, this field will reflect the amount as seen by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_facing_currency": {"name": "customer_facing_currency", "description": "For transactions associated with charges, refunds, or disputes, the three-letter ISO currency code for customer_facing_amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "automatic_payout_id": {"name": "automatic_payout_id", "description": "ID of the automatically created payout associated with this balance transaction (only set if your account is on an automatic payout schedule).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "automatic_payout_effective_at": {"name": "automatic_payout_effective_at", "description": "The date we expect this automatic payout to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The unique ID of the related customer, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email address of the customer, if any, associated with this balance transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_name": {"name": "customer_name", "description": "Name of the customer, if any, associated with this balance transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "Description provided when creating the customer, often used to store the customer name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_line_1": {"name": "customer_shipping_address_line_1", "description": "First line of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_line_2": {"name": "customer_shipping_address_line_2", "description": "Second line of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_city": {"name": "customer_shipping_address_city", "description": "City of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_state": {"name": "customer_shipping_address_state", "description": "State of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_postal_code": {"name": "customer_shipping_address_postal_code", "description": "Postal code of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_country": {"name": "customer_shipping_address_country", "description": "Country of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_line_1": {"name": "customer_address_line_1", "description": "First line of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_line_2": {"name": "customer_address_line_2", "description": "Second line of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_city": {"name": "customer_address_city", "description": "City of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_state": {"name": "customer_address_state", "description": "State of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_postal_code": {"name": "customer_address_postal_code", "description": "Postal code of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_country": {"name": "customer_address_country", "description": "Country of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "First line of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Second line of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "City of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "State of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Postal code of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Country of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_line_1": {"name": "card_address_line_1", "description": "First line of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_line_2": {"name": "card_address_line_2", "description": "Second line of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_city": {"name": "card_address_city", "description": "City of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_state": {"name": "card_address_state", "description": "State of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_postal_code": {"name": "card_address_postal_code", "description": "Postal code of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_country": {"name": "card_address_country", "description": "Country of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "Unique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "The unique ID of the related Payment Intent, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_created": {"name": "charge_created", "description": "Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "Unique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "Unique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_type": {"name": "payment_method_type", "description": "The type of payment method used in the related payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_brand": {"name": "card_brand", "description": "Card brand, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_funding": {"name": "card_funding", "description": "Card funding type, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_country": {"name": "card_country", "description": "Two-letter ISO code representing the country of the card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "statement_descriptor": {"name": "statement_descriptor", "description": "The dynamic statement descriptor or suffix specified when the related charge was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispute_reason": {"name": "dispute_reason", "description": "Reason given by cardholder for dispute. Read more about dispute reasons.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_id": {"name": "connected_account_id", "description": "For Stripe Connect activity related to a connected account, the unique ID for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_country": {"name": "connected_account_country", "description": "For Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_direct_charge_id": {"name": "connected_account_direct_charge_id", "description": "(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1709229533.4177349, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_change_from_activity_itemized_3`", "raw_code": "with balance_transaction_enhanced as (\n\n    select *\n    from {{ ref('stripe__balance_transactions')}}\n\n)\n\nselect \n    balance_transaction_id,\n    balance_transaction_created_at as created,\n    balance_transaction_available_on as available_on,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_source_id as source_id,\n    balance_transaction_description as description,\n    customer_facing_amount,\n    customer_facing_currency,\n    automatic_payout_id,\n    automatic_payout_effective_at,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    charge_id,\n    payment_intent_id,\n    charge_created_at as charge_created,\n\n    {% if var('stripe__using_invoices', True) %}\n    invoice_id,\n    invoice_number,\n    {% endif %}\n\n    {% if var('stripe__using_subscriptions', True) %}\n    subscription_id,\n    {% endif %}\n    \n    {% if var('stripe__using_payment_method', True) %}\n    payment_method_type,\n    {% endif %}\n\n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    dispute_reason,\n    connected_account_id,\n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "language": "sql", "refs": [{"name": "stripe__balance_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.stripe.stripe__balance_transactions"]}, "compiled_path": "target/compiled/stripe/models/stripe_reports/stripe__balance_change_from_activity_itemized_3.sql", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n\n)\n\nselect \n    balance_transaction_id,\n    balance_transaction_created_at as created,\n    balance_transaction_available_on as available_on,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_source_id as source_id,\n    balance_transaction_description as description,\n    customer_facing_amount,\n    customer_facing_currency,\n    automatic_payout_id,\n    automatic_payout_effective_at,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    charge_id,\n    payment_intent_id,\n    charge_created_at as charge_created,\n\n    \n    invoice_id,\n    invoice_number,\n    \n\n    \n    subscription_id,\n    \n    \n    \n    payment_method_type,\n    \n\n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    dispute_reason,\n    connected_account_id,\n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.stripe__payout_itemized_3": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "stripe__payout_itemized_3", "resource_type": "model", "package_name": "stripe", "path": "stripe_reports/stripe__payout_itemized_3.sql", "original_file_path": "models/stripe_reports/stripe__payout_itemized_3.sql", "unique_id": "model.stripe.stripe__payout_itemized_3", "fqn": ["stripe", "stripe_reports", "stripe__payout_itemized_3"], "alias": "stripe__payout_itemized_3", "checksum": {"name": "sha256", "checksum": "6bfb6ea2a070d31fb3342e718243cc06ed33ba9742fbfda5c7598b2d89d38c7b"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Modeled after the [titular report](https://stripe.com/docs/reports/balance#schema-payouts-itemized-3) from Stripe, each record represents a payout and its additional details such as expected arrival date and current status. This report belongs to the class of Balance reports. The Balance report is similar to a bank statement, helping you to reconcile your Stripe balance at the end of the month. The Balance report is most useful if you treat Stripe like a bank account for accounting purposes, reconciling the balance at the end of each month. If you have automatic payouts enabled and prefer to reconcile the transactions settled in each payout, see the Payout reconciliation report instead. The Payout Itemized report information on each payout made to your bank account.", "columns": {"payout_id": {"name": "payout_id", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "effective_at": {"name": "effective_at", "description": "For automatic payouts, this is the date we expect funds to arrive in your bank account. For manual payouts, this is the date the payout was initiated. In both cases, it\u2019s the date the paid-out funds are deducted from your Stripe balance. All dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO code for the currency in which gross, fee and net are defined.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross": {"name": "gross", "description": "Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fee": {"name": "fee", "description": "Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reporting_category": {"name": "reporting_category", "description": "Reporting Category is a new categorization of balance transactions, meant to improve on the current type field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the balance transaction. Specifically for Payout, the relation is the ID of the balance transaction that describes the impact of this payout on your account balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the balance transaction. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_expected_arrival_date": {"name": "payout_expected_arrival_date", "description": "Date the payout is scheduled to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_status": {"name": "payout_status", "description": "Current status of the payout (paid, pending, in_transit, canceled or failed). A payout will be pending until it is submitted to the bank, at which point it becomes in_transit. It will then change to paid if the transaction goes through. If it does not go through successfully, its status will change to failed or canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_reversed_at": {"name": "payout_reversed_at", "description": "Typically this field will be empty. However, if the payout\u2019s status is canceled or failed, this field will reflect the time at which it entered that status. Times in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_type": {"name": "payout_type", "description": "Can be bank_account or card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_description": {"name": "payout_description", "description": "An arbitrary string attached to the payout. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payout_destination_id": {"name": "payout_destination_id", "description": "ID of the bank account or card the payout was sent to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1709229533.42017, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__payout_itemized_3`", "raw_code": "with balance_transaction_enhanced as (\n\n    select *\n    from {{ ref('stripe__balance_transactions')}}\n    where payout_id is not null\n\n)\n\nselect\n    payout_id,\n    case \n        when payout_is_automatic = true then payout_arrival_date_at \n        else payout_created_at\n    end as effective_at,\n    payout_currency as currency,\n    balance_transaction_id,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_description as description,\n    payout_arrival_date_at as payout_expected_arrival_date,\n    payout_status,\n    case \n        when lower(payout_status) in ('canceled','failed') then payout_created_at\n        else null\n    end as payout_reversed_at,\n    payout_type,\n    payout_description,\n    coalesce(destination_bank_account_id, destination_card_id) as payout_destination_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "language": "sql", "refs": [{"name": "stripe__balance_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.stripe.stripe__balance_transactions"]}, "compiled_path": "target/compiled/stripe/models/stripe_reports/stripe__payout_itemized_3.sql", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n    where payout_id is not null\n\n)\n\nselect\n    payout_id,\n    case \n        when payout_is_automatic = true then payout_arrival_date_at \n        else payout_created_at\n    end as effective_at,\n    payout_currency as currency,\n    balance_transaction_id,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_description as description,\n    payout_arrival_date_at as payout_expected_arrival_date,\n    payout_status,\n    case \n        when lower(payout_status) in ('canceled','failed') then payout_created_at\n        else null\n    end as payout_reversed_at,\n    payout_type,\n    payout_description,\n    coalesce(destination_bank_account_id, destination_card_id) as payout_destination_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.stripe__ending_balance_reconciliation_itemized_4": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "stripe__ending_balance_reconciliation_itemized_4", "resource_type": "model", "package_name": "stripe", "path": "stripe_reports/stripe__ending_balance_reconciliation_itemized_4.sql", "original_file_path": "models/stripe_reports/stripe__ending_balance_reconciliation_itemized_4.sql", "unique_id": "model.stripe.stripe__ending_balance_reconciliation_itemized_4", "fqn": ["stripe", "stripe_reports", "stripe__ending_balance_reconciliation_itemized_4"], "alias": "stripe__ending_balance_reconciliation_itemized_4", "checksum": {"name": "sha256", "checksum": "1c7f3e17c944ff8c0e872525dcae88b031e62ffa59b727dccecb50b7a3398673"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Modeled after the [titular report](https://stripe.com/docs/reports/payout-reconciliation#schema-ending-balance-reconciliation-itemized-4) from Stripe, each record represents an automatic payout and additional details such as associated customer, shipping, card, subscription information. This report belongs to the class of Payout Reconciliation reports. The Payout reconciliation report helps you match the payouts you receive in your bank account with the batches of payments and other transactions that they relate to. The payout reconciliation report is only available for users with automatic payouts enabled, and is optimized for users who prefer to reconcile the transactions included in each payout as a settlement batch. If you use manual payouts or prefer to track and reconcile your Stripe balance like a bank account, see the Balance report instead. To help you decide which report is right for you, see the guide for selecting reports. This Ending Balance Reconciliation section provides a similar breakdown of the transactions that hadn\u2019t been settled as of the report\u2019s end date.", "columns": {"automatic_payout_id": {"name": "automatic_payout_id", "description": "ID of the automatically created payout associated with this balance transaction (only set if your account is on an automatic payout schedule).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "automatic_payout_effective_at": {"name": "automatic_payout_effective_at", "description": "The date we expect this automatic payout to arrive in your bank account, in the requested timezone, or UTC if not provided. This is also when the paid-out funds are deducted from your Stripe balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the balance transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the balance transaction was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the balance transaction\u2019s net funds will become available in the Stripe balance. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO code for the currency in which gross, fee and net are defined.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "gross": {"name": "gross", "description": "Gross amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fee": {"name": "fee", "description": "Fees paid for this transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction. Expressed in major units of the currency (e.g. dollars for USD, yen for JPY).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reporting_category": {"name": "reporting_category", "description": "Reporting Category is a new categorization of balance transactions, meant to improve on the current type field.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the balance transaction. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_facing_amount": {"name": "customer_facing_amount", "description": "For transactions associated with charges, refunds, or disputes, the amount of the original charge, refund, or dispute. If the customer was charged in a different currency than your account\u2019s default, this field will reflect the amount as seen by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_facing_currency": {"name": "customer_facing_currency", "description": "For transactions associated with charges, refunds, or disputes, the three-letter ISO currency code for customer_facing_amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The unique ID of the related customer, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email address of the customer, if any, associated with this balance transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_name": {"name": "customer_name", "description": "Name of the customer, if any, associated with this balance transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "Description provided when creating the customer, often used to store the customer name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_line_1": {"name": "customer_shipping_address_line_1", "description": "First line of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_line_2": {"name": "customer_shipping_address_line_2", "description": "Second line of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_city": {"name": "customer_shipping_address_city", "description": "City of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_state": {"name": "customer_shipping_address_state", "description": "State of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_postal_code": {"name": "customer_shipping_address_postal_code", "description": "Postal code of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_shipping_address_country": {"name": "customer_shipping_address_country", "description": "Country of the customer shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_line_1": {"name": "customer_address_line_1", "description": "First line of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_line_2": {"name": "customer_address_line_2", "description": "Second line of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_city": {"name": "customer_address_city", "description": "City of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_state": {"name": "customer_address_state", "description": "State of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_postal_code": {"name": "customer_address_postal_code", "description": "Postal code of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_address_country": {"name": "customer_address_country", "description": "Country of the customer address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "First line of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Second line of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "City of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "State of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Postal code of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Country of the shipping address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_line_1": {"name": "card_address_line_1", "description": "First line of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_line_2": {"name": "card_address_line_2", "description": "Second line of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_city": {"name": "card_address_city", "description": "City of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_state": {"name": "card_address_state", "description": "State of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_postal_code": {"name": "card_address_postal_code", "description": "Postal code of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_address_country": {"name": "card_address_country", "description": "Country of the card address associated with this charge, if any", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "Unique identifier for the original charge associated with this balance transaction. Available for charges, refunds and disputes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "The unique ID of the related Payment Intent, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_created": {"name": "charge_created", "description": "Creation time of the original charge associated with this balance transaction. Available for charges, refunds and disputes. For charges that were separately authorized and captured, this is the authorization time. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "Unique ID for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "Unique Number for the invoice associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "Unique ID for the subscription associated with this balance transaction. Available for charges, refunds, and disputes made in connection with a Stripe Billing subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_type": {"name": "payment_method_type", "description": "The type of payment method used in the related payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_brand": {"name": "card_brand", "description": "Card brand, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_funding": {"name": "card_funding", "description": "Card funding type, if applicable.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_country": {"name": "card_country", "description": "Two-letter ISO code representing the country of the card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "statement_descriptor": {"name": "statement_descriptor", "description": "The dynamic statement descriptor or suffix specified when the related charge was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dispute_reason": {"name": "dispute_reason", "description": "Reason given by cardholder for dispute. Read more about dispute reasons.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_id": {"name": "connected_account_id", "description": "For Stripe Connect activity related to a connected account, the unique ID for the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_country": {"name": "connected_account_country", "description": "For Stripe Connect activity related to a connected account, the two-letter ISO code representing the country of the account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_direct_charge_id": {"name": "connected_account_direct_charge_id", "description": "(Beta) For Stripe Connect activity related to a connected account, charge id of the direct charge that happened on connected account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1709229533.419161, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__ending_balance_reconciliation_itemized_4`", "raw_code": "with balance_transaction_enhanced as (\n\n    select *\n    from {{ ref('stripe__balance_transactions')}}\n    where automatic_payout_id is not null\n\n)\n\nselect\n    automatic_payout_id,\n    payout_arrival_date_at as automatic_payout_effective_at,\n    balance_transaction_id,\n    balance_transaction_created_at as created,\n    balance_transaction_available_on as available_on,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_source_id as source_id,\n    balance_transaction_description as description,\n    customer_facing_amount,\n    customer_facing_currency,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    charge_id,\n    payment_intent_id,\n    charge_created_at as charge_created,\n\n    {% if var('stripe__using_invoices', True) %}\n    invoice_id,\n    invoice_number,\n    {% endif %}\n\n    {% if var('stripe__using_subscriptions', True) %}\n    subscription_id,\n    {% endif %}\n    \n    {% if var('stripe__using_payment_method', True) %}\n    payment_method_type,\n    {% endif %}\n    \n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    dispute_reason,\n    connected_account_id, \n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "language": "sql", "refs": [{"name": "stripe__balance_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.stripe.stripe__balance_transactions"]}, "compiled_path": "target/compiled/stripe/models/stripe_reports/stripe__ending_balance_reconciliation_itemized_4.sql", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n    where automatic_payout_id is not null\n\n)\n\nselect\n    automatic_payout_id,\n    payout_arrival_date_at as automatic_payout_effective_at,\n    balance_transaction_id,\n    balance_transaction_created_at as created,\n    balance_transaction_available_on as available_on,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_source_id as source_id,\n    balance_transaction_description as description,\n    customer_facing_amount,\n    customer_facing_currency,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    charge_id,\n    payment_intent_id,\n    charge_created_at as charge_created,\n\n    \n    invoice_id,\n    invoice_number,\n    \n\n    \n    subscription_id,\n    \n    \n    \n    payment_method_type,\n    \n    \n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    dispute_reason,\n    connected_account_id, \n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.int_stripe__incomplete_charges": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "int_stripe__incomplete_charges", "resource_type": "model", "package_name": "stripe", "path": "intermediate/int_stripe__incomplete_charges.sql", "original_file_path": "models/intermediate/int_stripe__incomplete_charges.sql", "unique_id": "model.stripe.int_stripe__incomplete_charges", "fqn": ["stripe", "intermediate", "int_stripe__incomplete_charges"], "alias": "int_stripe__incomplete_charges", "checksum": {"name": "sha256", "checksum": "0091d2b4b2234e101fec86c6c0068335fde493de82ad8b5acc4266a56820cd38"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a charge that is incomplete.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1709229533.387427, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__incomplete_charges`", "raw_code": "with charge as (\n\n    select *\n    from {{ var('charge')}}\n\n)\n\nselect \n  balance_transaction_id,\n  created_at,\n  customer_id,\n  connected_account_id,\n  amount,\n  source_relation\nfrom charge\nwhere not is_captured", "language": "sql", "refs": [{"name": "stg_stripe__charge", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.stripe_source.stg_stripe__charge"]}, "compiled_path": "target/compiled/stripe/models/intermediate/int_stripe__incomplete_charges.sql", "compiled": true, "compiled_code": "with charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`\n\n)\n\nselect \n  balance_transaction_id,\n  created_at,\n  customer_id,\n  connected_account_id,\n  amount,\n  source_relation\nfrom charge\nwhere not is_captured", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.int_stripe__account_daily": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "int_stripe__account_daily", "resource_type": "model", "package_name": "stripe", "path": "intermediate/int_stripe__account_daily.sql", "original_file_path": "models/intermediate/int_stripe__account_daily.sql", "unique_id": "model.stripe.int_stripe__account_daily", "fqn": ["stripe", "intermediate", "int_stripe__account_daily"], "alias": "int_stripe__account_daily", "checksum": {"name": "sha256", "checksum": "c9d59969b022d95c00f86f84546105667b639b4a3e0c103bc40c95ccdf083a50"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents each day's ending balances per account.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1709229533.386434, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__account_daily`", "raw_code": "with date_spine as (\n\n    select * \n    from {{ ref('int_stripe__date_spine') }}\n\n), balance_transaction as (\n\n    select *,\n        case \n            when balance_transaction_type = 'payout' \n            then {{ date_timezone('balance_transaction_available_on') }}  \n            else {{ date_timezone('balance_transaction_created_at') }}\n        end as date\n    from {{ ref('stripe__balance_transactions') }}\n\n), incomplete_charges as (\n\n    select *\n    from {{ ref('int_stripe__incomplete_charges') }}  \n\n), daily_account_balance_transactions as (\n\n    select\n        date_spine.date_day,\n        date_spine.account_id,\n        date_spine.source_relation,\n        sum(case when balance_transaction.balance_transaction_type in ('charge', 'payment') \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_sales_amount,\n        sum(case when balance_transaction.balance_transaction_type in ('payment_refund', 'refund') \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_refunds_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'adjustment' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_adjustments_amount,\n        sum(case when balance_transaction.balance_transaction_type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_other_transactions_amount,\n        sum(case when balance_transaction.balance_transaction_type <> 'payout' and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_gross_transaction_amount,\n        sum(case when balance_transaction.balance_transaction_type <> 'payout' and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction_net \n            else 0 end) as total_daily_net_transactions_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction_fee * -1.0\n            else 0 end) as total_daily_payout_fee_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_gross_payout_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction_fee * -1.0 \n            else balance_transaction_net end) as daily_net_activity_amount,\n        sum(case when balance_transaction.balance_transaction_type in ('payment', 'charge') \n            then 1 \n            else 0 end) as total_daily_sales_count,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' \n            then 1\n            else 0 end) as total_daily_payouts_count,\n        count(distinct case when balance_transaction.balance_transaction_type = 'adjustment' \n                then coalesce(balance_transaction_source_id, payout_id) \n                else null end) as total_daily_adjustments_count\n    from date_spine\n    left join balance_transaction\n        on cast({{ dbt.date_trunc('day', 'balance_transaction.date') }} as date) = date_spine.date_day\n        and balance_transaction.source_relation = date_spine.source_relation\n    group by 1,2,3\n\n), daily_failed_charges as (\n\n    select\n        {{ date_timezone('created_at') }} as date,\n        source_relation,\n        count(*) as total_daily_failed_charge_count,\n        sum(amount) as total_daily_failed_charge_amount\n    from incomplete_charges\n    group by 1,2\n)\n\nselect\n    daily_account_balance_transactions.date_day,\n    daily_account_balance_transactions.account_id,\n    daily_account_balance_transactions.source_relation,\n    coalesce(daily_account_balance_transactions.total_daily_sales_amount/100.0,0) as total_daily_sales_amount,\n    coalesce(daily_account_balance_transactions.total_daily_refunds_amount/100.0,0) as total_daily_refunds_amount,\n    coalesce(daily_account_balance_transactions.total_daily_adjustments_amount/100.0,0) as total_daily_adjustments_amount,\n    coalesce(daily_account_balance_transactions.total_daily_other_transactions_amount/100.0,0) as total_daily_other_transactions_amount,\n    coalesce(daily_account_balance_transactions.total_daily_gross_transaction_amount/100.0,0) as total_daily_gross_transaction_amount,\n    coalesce(daily_account_balance_transactions.total_daily_net_transactions_amount/100.0,0) as total_daily_net_transactions_amount,\n    coalesce(daily_account_balance_transactions.total_daily_payout_fee_amount/100.0,0) as total_daily_payout_fee_amount,\n    coalesce(daily_account_balance_transactions.total_daily_gross_payout_amount/100.0,0) as total_daily_gross_payout_amount,\n    coalesce(daily_account_balance_transactions.daily_net_activity_amount/100.0,0) as daily_net_activity_amount,\n    coalesce((daily_account_balance_transactions.daily_net_activity_amount + daily_account_balance_transactions.total_daily_gross_payout_amount)/100.0, 0) as daily_end_balance_amount,\n    coalesce(daily_account_balance_transactions.total_daily_sales_count, 0) as total_daily_sales_count,\n    coalesce(daily_account_balance_transactions.total_daily_payouts_count, 0) as total_daily_payouts_count,\n    coalesce(daily_account_balance_transactions.total_daily_adjustments_count, 0) as total_daily_adjustments_count,\n    coalesce(daily_failed_charges.total_daily_failed_charge_count, 0) as total_daily_failed_charge_count,\n    coalesce(daily_failed_charges.total_daily_failed_charge_amount/100, 0) as total_daily_failed_charge_amount\n\nfrom daily_account_balance_transactions\nleft join daily_failed_charges\n    on daily_account_balance_transactions.date_day = daily_failed_charges.date\n    and daily_account_balance_transactions.source_relation = daily_failed_charges.source_relation", "language": "sql", "refs": [{"name": "int_stripe__date_spine", "package": null, "version": null}, {"name": "stripe__balance_transactions", "package": null, "version": null}, {"name": "int_stripe__incomplete_charges", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe.date_timezone", "macro.dbt.date_trunc"], "nodes": ["model.stripe.int_stripe__date_spine", "model.stripe.stripe__balance_transactions", "model.stripe.int_stripe__incomplete_charges"]}, "compiled_path": "target/compiled/stripe/models/intermediate/int_stripe__account_daily.sql", "compiled": true, "compiled_code": "with date_spine as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__date_spine`\n\n), balance_transaction as (\n\n    select *,\n        case \n            when balance_transaction_type = 'payout' \n            then date(\n    balance_transaction_available_on\n    \n    )  \n            else date(\n    balance_transaction_created_at\n    \n    )\n        end as date\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__incomplete_charges`  \n\n), daily_account_balance_transactions as (\n\n    select\n        date_spine.date_day,\n        date_spine.account_id,\n        date_spine.source_relation,\n        sum(case when balance_transaction.balance_transaction_type in ('charge', 'payment') \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_sales_amount,\n        sum(case when balance_transaction.balance_transaction_type in ('payment_refund', 'refund') \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_refunds_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'adjustment' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_adjustments_amount,\n        sum(case when balance_transaction.balance_transaction_type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_other_transactions_amount,\n        sum(case when balance_transaction.balance_transaction_type <> 'payout' and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_gross_transaction_amount,\n        sum(case when balance_transaction.balance_transaction_type <> 'payout' and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction_net \n            else 0 end) as total_daily_net_transactions_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction_fee * -1.0\n            else 0 end) as total_daily_payout_fee_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_gross_payout_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction_fee * -1.0 \n            else balance_transaction_net end) as daily_net_activity_amount,\n        sum(case when balance_transaction.balance_transaction_type in ('payment', 'charge') \n            then 1 \n            else 0 end) as total_daily_sales_count,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' \n            then 1\n            else 0 end) as total_daily_payouts_count,\n        count(distinct case when balance_transaction.balance_transaction_type = 'adjustment' \n                then coalesce(balance_transaction_source_id, payout_id) \n                else null end) as total_daily_adjustments_count\n    from date_spine\n    left join balance_transaction\n        on cast(timestamp_trunc(\n        cast(balance_transaction.date as timestamp),\n        day\n    ) as date) = date_spine.date_day\n        and balance_transaction.source_relation = date_spine.source_relation\n    group by 1,2,3\n\n), daily_failed_charges as (\n\n    select\n        date(\n    created_at\n    \n    ) as date,\n        source_relation,\n        count(*) as total_daily_failed_charge_count,\n        sum(amount) as total_daily_failed_charge_amount\n    from incomplete_charges\n    group by 1,2\n)\n\nselect\n    daily_account_balance_transactions.date_day,\n    daily_account_balance_transactions.account_id,\n    daily_account_balance_transactions.source_relation,\n    coalesce(daily_account_balance_transactions.total_daily_sales_amount/100.0,0) as total_daily_sales_amount,\n    coalesce(daily_account_balance_transactions.total_daily_refunds_amount/100.0,0) as total_daily_refunds_amount,\n    coalesce(daily_account_balance_transactions.total_daily_adjustments_amount/100.0,0) as total_daily_adjustments_amount,\n    coalesce(daily_account_balance_transactions.total_daily_other_transactions_amount/100.0,0) as total_daily_other_transactions_amount,\n    coalesce(daily_account_balance_transactions.total_daily_gross_transaction_amount/100.0,0) as total_daily_gross_transaction_amount,\n    coalesce(daily_account_balance_transactions.total_daily_net_transactions_amount/100.0,0) as total_daily_net_transactions_amount,\n    coalesce(daily_account_balance_transactions.total_daily_payout_fee_amount/100.0,0) as total_daily_payout_fee_amount,\n    coalesce(daily_account_balance_transactions.total_daily_gross_payout_amount/100.0,0) as total_daily_gross_payout_amount,\n    coalesce(daily_account_balance_transactions.daily_net_activity_amount/100.0,0) as daily_net_activity_amount,\n    coalesce((daily_account_balance_transactions.daily_net_activity_amount + daily_account_balance_transactions.total_daily_gross_payout_amount)/100.0, 0) as daily_end_balance_amount,\n    coalesce(daily_account_balance_transactions.total_daily_sales_count, 0) as total_daily_sales_count,\n    coalesce(daily_account_balance_transactions.total_daily_payouts_count, 0) as total_daily_payouts_count,\n    coalesce(daily_account_balance_transactions.total_daily_adjustments_count, 0) as total_daily_adjustments_count,\n    coalesce(daily_failed_charges.total_daily_failed_charge_count, 0) as total_daily_failed_charge_count,\n    coalesce(daily_failed_charges.total_daily_failed_charge_amount/100, 0) as total_daily_failed_charge_amount\n\nfrom daily_account_balance_transactions\nleft join daily_failed_charges\n    on daily_account_balance_transactions.date_day = daily_failed_charges.date\n    and daily_account_balance_transactions.source_relation = daily_failed_charges.source_relation", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.int_stripe__account_rolling_totals": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "int_stripe__account_rolling_totals", "resource_type": "model", "package_name": "stripe", "path": "intermediate/int_stripe__account_rolling_totals.sql", "original_file_path": "models/intermediate/int_stripe__account_rolling_totals.sql", "unique_id": "model.stripe.int_stripe__account_rolling_totals", "fqn": ["stripe", "intermediate", "int_stripe__account_rolling_totals"], "alias": "int_stripe__account_rolling_totals", "checksum": {"name": "sha256", "checksum": "f2dccdc5f089fcb14aa4578668da16394bbb7197903538a90ec4587deb4357a1"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents each day's ending balances per account, in addition to changes over time.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1709229533.386921, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__account_rolling_totals`", "raw_code": "{% set total_fields =  ['total_daily_sales_amount', 'total_daily_refunds_amount', 'total_daily_adjustments_amount', 'total_daily_other_transactions_amount', 'total_daily_gross_transaction_amount', 'total_daily_net_transactions_amount', 'total_daily_payout_fee_amount', 'total_daily_gross_payout_amount', 'daily_net_activity_amount', 'daily_end_balance_amount', 'total_daily_sales_count', 'total_daily_payouts_count', 'total_daily_adjustments_count', 'total_daily_failed_charge_count', 'total_daily_failed_charge_amount'] %}\n{% set rolling_fields = ['rolling_total_daily_sales_amount', 'rolling_total_daily_refunds_amount', 'rolling_total_daily_adjustments_amount', 'rolling_total_daily_other_transactions_amount', 'rolling_total_daily_gross_transaction_amount', 'rolling_total_daily_net_transactions_amount', 'rolling_total_daily_payout_fee_amount', 'rolling_total_daily_gross_payout_amount', 'rolling_daily_net_activity_amount', 'rolling_daily_end_balance_amount', 'rolling_total_daily_sales_count', 'rolling_total_daily_payouts_count', 'rolling_total_daily_adjustments_count', 'rolling_total_daily_failed_charge_count', 'rolling_total_daily_failed_charge_amount'] %}\n\nwith date_spine as (\n\n    select * \n    from {{ ref('int_stripe__date_spine') }}\n\n), account_daily_balances_by_type as (\n\n    select * \n    from {{ ref('int_stripe__account_daily')}}\n\n), account_rolling_totals as (\n\n    select\n        *\n\n        {% for t in total_fields %}\n        , sum({{ t }}) over (order by date_day rows unbounded preceding) as rolling_{{ t }}\n        {% endfor %}\n\n    from account_daily_balances_by_type\n\n), final as (\n\n    select\n        date_spine.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        {% for t in total_fields %}\n        coalesce(round(account_rolling_totals.{{ t }},2),0) as {{ t }},\n        {% endfor %}\n\n        {% for f in rolling_fields %}\n        case when account_rolling_totals.{{ f }} is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.{{ f }},2),0)\n            end as {{ f }},\n        {% endfor %}\n\n        date_spine.date_index,\n        account_rolling_totals.source_relation\n\n    from date_spine\n    left join account_rolling_totals\n        on account_rolling_totals.date_day = date_spine.date_day\n        and account_rolling_totals.account_id = date_spine.account_id\n        and account_rolling_totals.source_relation = date_spine.source_relation\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "int_stripe__date_spine", "package": null, "version": null}, {"name": "int_stripe__account_daily", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.stripe.int_stripe__date_spine", "model.stripe.int_stripe__account_daily"]}, "compiled_path": "target/compiled/stripe/models/intermediate/int_stripe__account_rolling_totals.sql", "compiled": true, "compiled_code": "\n\n\nwith date_spine as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__date_spine`\n\n), account_daily_balances_by_type as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__account_daily`\n\n), account_rolling_totals as (\n\n    select\n        *\n\n        \n        , sum(total_daily_sales_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_amount\n        \n        , sum(total_daily_refunds_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_refunds_amount\n        \n        , sum(total_daily_adjustments_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_amount\n        \n        , sum(total_daily_other_transactions_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_other_transactions_amount\n        \n        , sum(total_daily_gross_transaction_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_transaction_amount\n        \n        , sum(total_daily_net_transactions_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_net_transactions_amount\n        \n        , sum(total_daily_payout_fee_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_payout_fee_amount\n        \n        , sum(total_daily_gross_payout_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_payout_amount\n        \n        , sum(daily_net_activity_amount) over (order by date_day rows unbounded preceding) as rolling_daily_net_activity_amount\n        \n        , sum(daily_end_balance_amount) over (order by date_day rows unbounded preceding) as rolling_daily_end_balance_amount\n        \n        , sum(total_daily_sales_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_count\n        \n        , sum(total_daily_payouts_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_payouts_count\n        \n        , sum(total_daily_adjustments_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_count\n        \n        , sum(total_daily_failed_charge_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_count\n        \n        , sum(total_daily_failed_charge_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_amount\n        \n\n    from account_daily_balances_by_type\n\n), final as (\n\n    select\n        date_spine.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        \n        coalesce(round(account_rolling_totals.total_daily_sales_amount,2),0) as total_daily_sales_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_refunds_amount,2),0) as total_daily_refunds_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_adjustments_amount,2),0) as total_daily_adjustments_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_other_transactions_amount,2),0) as total_daily_other_transactions_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_gross_transaction_amount,2),0) as total_daily_gross_transaction_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_net_transactions_amount,2),0) as total_daily_net_transactions_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_payout_fee_amount,2),0) as total_daily_payout_fee_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_gross_payout_amount,2),0) as total_daily_gross_payout_amount,\n        \n        coalesce(round(account_rolling_totals.daily_net_activity_amount,2),0) as daily_net_activity_amount,\n        \n        coalesce(round(account_rolling_totals.daily_end_balance_amount,2),0) as daily_end_balance_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_sales_count,2),0) as total_daily_sales_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_payouts_count,2),0) as total_daily_payouts_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_adjustments_count,2),0) as total_daily_adjustments_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_failed_charge_count,2),0) as total_daily_failed_charge_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_failed_charge_amount,2),0) as total_daily_failed_charge_amount,\n        \n\n        \n        case when account_rolling_totals.rolling_total_daily_sales_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_sales_amount,2),0)\n            end as rolling_total_daily_sales_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_refunds_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_refunds_amount,2),0)\n            end as rolling_total_daily_refunds_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_adjustments_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_adjustments_amount,2),0)\n            end as rolling_total_daily_adjustments_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_other_transactions_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_other_transactions_amount,2),0)\n            end as rolling_total_daily_other_transactions_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_gross_transaction_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_gross_transaction_amount,2),0)\n            end as rolling_total_daily_gross_transaction_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_net_transactions_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_net_transactions_amount,2),0)\n            end as rolling_total_daily_net_transactions_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_payout_fee_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_payout_fee_amount,2),0)\n            end as rolling_total_daily_payout_fee_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_gross_payout_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_gross_payout_amount,2),0)\n            end as rolling_total_daily_gross_payout_amount,\n        \n        case when account_rolling_totals.rolling_daily_net_activity_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_daily_net_activity_amount,2),0)\n            end as rolling_daily_net_activity_amount,\n        \n        case when account_rolling_totals.rolling_daily_end_balance_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_daily_end_balance_amount,2),0)\n            end as rolling_daily_end_balance_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_sales_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_sales_count,2),0)\n            end as rolling_total_daily_sales_count,\n        \n        case when account_rolling_totals.rolling_total_daily_payouts_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_payouts_count,2),0)\n            end as rolling_total_daily_payouts_count,\n        \n        case when account_rolling_totals.rolling_total_daily_adjustments_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_adjustments_count,2),0)\n            end as rolling_total_daily_adjustments_count,\n        \n        case when account_rolling_totals.rolling_total_daily_failed_charge_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_failed_charge_count,2),0)\n            end as rolling_total_daily_failed_charge_count,\n        \n        case when account_rolling_totals.rolling_total_daily_failed_charge_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_failed_charge_amount,2),0)\n            end as rolling_total_daily_failed_charge_amount,\n        \n\n        date_spine.date_index,\n        account_rolling_totals.source_relation\n\n    from date_spine\n    left join account_rolling_totals\n        on account_rolling_totals.date_day = date_spine.date_day\n        and account_rolling_totals.account_id = date_spine.account_id\n        and account_rolling_totals.source_relation = date_spine.source_relation\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.int_stripe__account_partitions": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "int_stripe__account_partitions", "resource_type": "model", "package_name": "stripe", "path": "intermediate/int_stripe__account_partitions.sql", "original_file_path": "models/intermediate/int_stripe__account_partitions.sql", "unique_id": "model.stripe.int_stripe__account_partitions", "fqn": ["stripe", "intermediate", "int_stripe__account_partitions"], "alias": "int_stripe__account_partitions", "checksum": {"name": "sha256", "checksum": "28eebfc2734b6f8ec807f0824ed7b2732cd2c634e492dfb51ce8cca962fd657c"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record is a group of partitioned account totals updating null values with zeroes to eventually calculate running totals downstream.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1709229533.386692, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__account_partitions`", "raw_code": "{% set rolling_fields = ['rolling_total_daily_sales_amount', 'rolling_total_daily_refunds_amount', 'rolling_total_daily_adjustments_amount', 'rolling_total_daily_other_transactions_amount', 'rolling_total_daily_gross_transaction_amount', 'rolling_total_daily_net_transactions_amount', 'rolling_total_daily_payout_fee_amount', 'rolling_total_daily_gross_payout_amount', 'rolling_daily_net_activity_amount', 'rolling_daily_end_balance_amount', 'rolling_total_daily_sales_count', 'rolling_total_daily_payouts_count', 'rolling_total_daily_adjustments_count', 'rolling_total_daily_failed_charge_count', 'rolling_total_daily_failed_charge_amount'] %}\n\nwith account_rolling_totals as (\n\n    select * \n    from {{ ref('int_stripe__account_rolling_totals') }}\n),\n\nfinal as (\n\n    select\n        *,\n        {% for f in rolling_fields %}\n        sum(case when {{ f }} is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as {{ f }}_partition\n        {%- if not loop.last -%},{%- endif -%}\n        {% endfor %}                  \n    from account_rolling_totals\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "int_stripe__account_rolling_totals", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.stripe.int_stripe__account_rolling_totals"]}, "compiled_path": "target/compiled/stripe/models/intermediate/int_stripe__account_partitions.sql", "compiled": true, "compiled_code": "\n\nwith account_rolling_totals as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__account_rolling_totals`\n),\n\nfinal as (\n\n    select\n        *,\n        \n        sum(case when rolling_total_daily_sales_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_amount_partition,\n        sum(case when rolling_total_daily_refunds_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_refunds_amount_partition,\n        sum(case when rolling_total_daily_adjustments_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_amount_partition,\n        sum(case when rolling_total_daily_other_transactions_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_other_transactions_amount_partition,\n        sum(case when rolling_total_daily_gross_transaction_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_transaction_amount_partition,\n        sum(case when rolling_total_daily_net_transactions_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_net_transactions_amount_partition,\n        sum(case when rolling_total_daily_payout_fee_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_payout_fee_amount_partition,\n        sum(case when rolling_total_daily_gross_payout_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_payout_amount_partition,\n        sum(case when rolling_daily_net_activity_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_daily_net_activity_amount_partition,\n        sum(case when rolling_daily_end_balance_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_daily_end_balance_amount_partition,\n        sum(case when rolling_total_daily_sales_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_count_partition,\n        sum(case when rolling_total_daily_payouts_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_payouts_count_partition,\n        sum(case when rolling_total_daily_adjustments_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_count_partition,\n        sum(case when rolling_total_daily_failed_charge_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_count_partition,\n        sum(case when rolling_total_daily_failed_charge_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_amount_partition                  \n    from account_rolling_totals\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.stripe.int_stripe__date_spine": {"database": "dbt-package-testing", "schema": "stripe_testing_stripe", "name": "int_stripe__date_spine", "resource_type": "model", "package_name": "stripe", "path": "intermediate/int_stripe__date_spine.sql", "original_file_path": "models/intermediate/int_stripe__date_spine.sql", "unique_id": "model.stripe.int_stripe__date_spine", "fqn": ["stripe", "intermediate", "int_stripe__date_spine"], "alias": "int_stripe__date_spine", "checksum": {"name": "sha256", "checksum": "d1a34dca9f4a737159f8020e2a5ffd5793d7a0ae6033c845bfde104d210d52e3"}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Each record represents a day of each calendar year.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe://models/stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1709229533.387163, "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__date_spine`", "raw_code": "with spine as (\n\n    {% if execute %}\n    {% set first_date_query %}\n        select  min( balance_transaction_created_at ) as min_date from {{ ref('stripe__balance_transactions') }}\n    {% endset %}\n    {% set first_date = run_query(first_date_query).columns[0][0]|string %}\n    \n        {% if target.type == 'postgres' %}\n            {% set first_date_adjust = \"cast('\" ~ first_date[0:10] ~ \"' as date)\" %}\n\n        {% else %}\n            {% set first_date_adjust = \"'\" ~ first_date[0:10] ~ \"'\" %}\n\n        {% endif %}\n\n    {% else %} {% set first_date_adjust = \"'2009-01-01'\" %}\n    {% endif %}\n\n    {% if execute %}\n    {% set last_date_query %}\n        select  max( balance_transaction_created_at ) as max_date from {{ ref('stripe__balance_transactions') }}\n    {% endset %}\n\n    {% set current_date_query %}\n        select current_date\n    {% endset %}\n\n    {% if run_query(current_date_query).columns[0][0]|string < run_query(last_date_query).columns[0][0]|string %}\n\n    {% set last_date = run_query(last_date_query).columns[0][0]|string %}\n\n    {% else %} {% set last_date = run_query(current_date_query).columns[0][0]|string %}\n    {% endif %}\n        \n    {% if target.type == 'postgres' %}\n        {% set last_date_adjust = \"cast('\" ~ last_date[0:10] ~ \"' as date)\" %}\n\n    {% else %}\n        {% set last_date_adjust = \"'\" ~ last_date[0:10] ~ \"'\" %}\n\n    {% endif %}\n    {% endif %}\n\n    {{ dbt_utils.date_spine(\n        datepart=\"day\",\n        start_date=first_date_adjust,\n        end_date=dbt.dateadd(\"day\", 1, last_date_adjust)\n        )\n    }}\n),\n\nbalance_transactions as (\n    \n    select *\n    from {{ ref('stripe__balance_transactions') }}\n),\n\naccount as (\n\n    select *\n    from {{ var('account') }}\n),\n\ndate_spine as (\n\n    select\n        cast({{ dbt.date_trunc(\"day\", \"date_day\") }} as date) as date_day, \n        cast({{ dbt.date_trunc(\"week\", \"date_day\") }} as date) as date_week, \n        cast({{ dbt.date_trunc(\"month\", \"date_day\") }} as date) as date_month,\n        cast({{ dbt.date_trunc(\"year\", \"date_day\") }} as date) as date_year,  \n        row_number() over (order by cast({{ dbt.date_trunc(\"day\", \"date_day\") }} as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select distinct\n        account.account_id,\n        account.source_relation,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account \n    cross join date_spine\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stripe__balance_transactions", "package": null, "version": null}, {"name": "stg_stripe__account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_utils.date_spine", "macro.dbt.date_trunc", "macro.dbt.run_query"], "nodes": ["model.stripe.stripe__balance_transactions", "model.stripe_source.stg_stripe__account"]}, "compiled_path": "target/compiled/stripe/models/intermediate/int_stripe__date_spine.sql", "compiled": true, "compiled_code": "with spine as (\n\n    \n    \n    \n    \n        \n            \n\n        \n\n    \n\n    \n    \n\n    \n\n     \n    \n        \n    \n        \n\n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1131\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( '2021-01-25' as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n        datetime_add(\n            cast( '2024-02-29' as datetime),\n        interval 1 day\n        )\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\nbalance_transactions as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n),\n\naccount as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account`\n),\n\ndate_spine as (\n\n    select\n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        day\n    ) as date) as date_day, \n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        week\n    ) as date) as date_week, \n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) as date) as date_month,\n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        year\n    ) as date) as date_year,  \n        row_number() over (order by cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        day\n    ) as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select distinct\n        account.account_id,\n        account.source_relation,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account \n    cross join date_spine\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "balance_transaction_id", "model": "{{ get_where_subquery(ref('stg_stripe__balance_transaction')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__balance_transaction_balance_transaction_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__balance_transaction_balance_transaction_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f", "fqn": ["stripe_source", "not_null_stg_stripe__balance_transaction_balance_transaction_id"], "alias": "not_null_stg_stripe__balance_transaction_balance_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.235759, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__balance_transaction", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__balance_transaction"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__balance_transaction_balance_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__balance_transaction`\nwhere balance_transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "balance_transaction_id", "file_key_name": "models.stg_stripe__balance_transaction", "attached_node": "model.stripe_source.stg_stripe__balance_transaction"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__balance_transaction_balance_transaction_id__source_relation.e83fa67eba": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["balance_transaction_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__balance_transaction')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__balance_transaction_balance_transaction_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_0aebbfb68efe99cc0f3b1460de4e30a6.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__balance_transaction_balance_transaction_id__source_relation.e83fa67eba", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__balance_transaction_balance_transaction_id__source_relation"], "alias": "dbt_utils_unique_combination_o_0aebbfb68efe99cc0f3b1460de4e30a6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0aebbfb68efe99cc0f3b1460de4e30a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0aebbfb68efe99cc0f3b1460de4e30a6"}, "created_at": 1709229533.237122, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0aebbfb68efe99cc0f3b1460de4e30a6\") }}", "language": "sql", "refs": [{"name": "stg_stripe__balance_transaction", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__balance_transaction"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_0aebbfb68efe99cc0f3b1460de4e30a6.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__balance_transaction`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__balance_transaction", "attached_node": "model.stripe_source.stg_stripe__balance_transaction"}, "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "card_id", "model": "{{ get_where_subquery(ref('stg_stripe__card')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__card_card_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__card_card_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a", "fqn": ["stripe_source", "not_null_stg_stripe__card_card_id"], "alias": "not_null_stg_stripe__card_card_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.244651, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__card", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__card"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__card_card_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect card_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__card`\nwhere card_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "card_id", "file_key_name": "models.stg_stripe__card", "attached_node": "model.stripe_source.stg_stripe__card"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__card_card_id__source_relation.6e04594797": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["card_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__card')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__card_card_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_19678bbe5de8992fb35ac984244af116.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__card_card_id__source_relation.6e04594797", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__card_card_id__source_relation"], "alias": "dbt_utils_unique_combination_o_19678bbe5de8992fb35ac984244af116", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_19678bbe5de8992fb35ac984244af116", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_19678bbe5de8992fb35ac984244af116"}, "created_at": 1709229533.245777, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_19678bbe5de8992fb35ac984244af116\") }}", "language": "sql", "refs": [{"name": "stg_stripe__card", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__card"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_19678bbe5de8992fb35ac984244af116.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        card_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__card`\n    group by card_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__card", "attached_node": "model.stripe_source.stg_stripe__card"}, "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "charge_id", "model": "{{ get_where_subquery(ref('stg_stripe__charge')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__charge_charge_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__charge_charge_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a", "fqn": ["stripe_source", "not_null_stg_stripe__charge_charge_id"], "alias": "not_null_stg_stripe__charge_charge_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.24848, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__charge", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__charge"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__charge_charge_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`\nwhere charge_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "charge_id", "file_key_name": "models.stg_stripe__charge", "attached_node": "model.stripe_source.stg_stripe__charge"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__charge_charge_id__source_relation.4616b292a1": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["charge_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__charge')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__charge_charge_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_e50cd3b0683ad19e306a1c18032fc635.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__charge_charge_id__source_relation.4616b292a1", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__charge_charge_id__source_relation"], "alias": "dbt_utils_unique_combination_o_e50cd3b0683ad19e306a1c18032fc635", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e50cd3b0683ad19e306a1c18032fc635", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e50cd3b0683ad19e306a1c18032fc635"}, "created_at": 1709229533.2497432, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e50cd3b0683ad19e306a1c18032fc635\") }}", "language": "sql", "refs": [{"name": "stg_stripe__charge", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__charge"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_e50cd3b0683ad19e306a1c18032fc635.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`\n    group by charge_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__charge", "attached_node": "model.stripe_source.stg_stripe__charge"}, "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_stripe__customer')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__customer_customer_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__customer_customer_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0", "fqn": ["stripe_source", "not_null_stg_stripe__customer_customer_id"], "alias": "not_null_stg_stripe__customer_customer_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.2525709, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__customer"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__customer_customer_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "customer_id", "file_key_name": "models.stg_stripe__customer", "attached_node": "model.stripe_source.stg_stripe__customer"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__customer_customer_id__source_relation.3fa0f43271": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["customer_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__customer')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__customer_customer_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_7bfac05f27441bdfc579119081a0b797.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__customer_customer_id__source_relation.3fa0f43271", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__customer_customer_id__source_relation"], "alias": "dbt_utils_unique_combination_o_7bfac05f27441bdfc579119081a0b797", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7bfac05f27441bdfc579119081a0b797", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7bfac05f27441bdfc579119081a0b797"}, "created_at": 1709229533.2537332, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7bfac05f27441bdfc579119081a0b797\") }}", "language": "sql", "refs": [{"name": "stg_stripe__customer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__customer"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_7bfac05f27441bdfc579119081a0b797.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__customer", "attached_node": "model.stripe_source.stg_stripe__customer"}, "test.stripe_source.not_null_stg_stripe__fee_balance_transaction_id.725d4ac005": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "balance_transaction_id", "model": "{{ get_where_subquery(ref('stg_stripe__fee')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__fee_balance_transaction_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__fee_balance_transaction_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__fee_balance_transaction_id.725d4ac005", "fqn": ["stripe_source", "not_null_stg_stripe__fee_balance_transaction_id"], "alias": "not_null_stg_stripe__fee_balance_transaction_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.256481, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__fee"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__fee_balance_transaction_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__fee`\nwhere balance_transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "balance_transaction_id", "file_key_name": "models.stg_stripe__fee", "attached_node": "model.stripe_source.stg_stripe__fee"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__fee_balance_transaction_id__index__source_relation.d2b1cfff07": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["balance_transaction_id", "index", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__fee')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__fee_balance_transaction_id__index__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_9a74c6b8ae128e748eb04d052cfbb16f.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__fee_balance_transaction_id__index__source_relation.d2b1cfff07", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__fee_balance_transaction_id__index__source_relation"], "alias": "dbt_utils_unique_combination_o_9a74c6b8ae128e748eb04d052cfbb16f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9a74c6b8ae128e748eb04d052cfbb16f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9a74c6b8ae128e748eb04d052cfbb16f"}, "created_at": 1709229533.257621, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9a74c6b8ae128e748eb04d052cfbb16f\") }}", "language": "sql", "refs": [{"name": "stg_stripe__fee", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__fee"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_9a74c6b8ae128e748eb04d052cfbb16f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, index, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__fee`\n    group by balance_transaction_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__fee", "attached_node": "model.stripe_source.stg_stripe__fee"}, "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_intent_id", "model": "{{ get_where_subquery(ref('stg_stripe__payment_intent')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__payment_intent_payment_intent_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__payment_intent_payment_intent_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb", "fqn": ["stripe_source", "not_null_stg_stripe__payment_intent_payment_intent_id"], "alias": "not_null_stg_stripe__payment_intent_payment_intent_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.260354, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__payment_intent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_intent"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__payment_intent_payment_intent_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_intent_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_intent`\nwhere payment_intent_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_intent_id", "file_key_name": "models.stg_stripe__payment_intent", "attached_node": "model.stripe_source.stg_stripe__payment_intent"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_intent_payment_intent_id__source_relation.046730da02": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["payment_intent_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__payment_intent')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__payment_intent_payment_intent_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_c8e5059f7f05d3c2762f32185e621ed3.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_intent_payment_intent_id__source_relation.046730da02", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__payment_intent_payment_intent_id__source_relation"], "alias": "dbt_utils_unique_combination_o_c8e5059f7f05d3c2762f32185e621ed3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c8e5059f7f05d3c2762f32185e621ed3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c8e5059f7f05d3c2762f32185e621ed3"}, "created_at": 1709229533.261473, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c8e5059f7f05d3c2762f32185e621ed3\") }}", "language": "sql", "refs": [{"name": "stg_stripe__payment_intent", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_intent"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_c8e5059f7f05d3c2762f32185e621ed3.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_intent_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_intent`\n    group by payment_intent_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__payment_intent", "attached_node": "model.stripe_source.stg_stripe__payment_intent"}, "test.stripe_source.not_null_stg_stripe__payment_method_card_payment_method_id.f246b11438": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_method_id", "model": "{{ get_where_subquery(ref('stg_stripe__payment_method_card')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__payment_method_card_payment_method_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__payment_method_card_payment_method_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_card_payment_method_id.f246b11438", "fqn": ["stripe_source", "not_null_stg_stripe__payment_method_card_payment_method_id"], "alias": "not_null_stg_stripe__payment_method_card_payment_method_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.26416, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__payment_method_card", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_method_card"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__payment_method_card_payment_method_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_card`\nwhere payment_method_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method_id", "file_key_name": "models.stg_stripe__payment_method_card", "attached_node": "model.stripe_source.stg_stripe__payment_method_card"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_card_payment_method_id__source_relation.fe1f48acd0": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["payment_method_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__payment_method_card')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_card_payment_method_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_67cdb901497818d0c61e0cebbc173769.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_card_payment_method_id__source_relation.fe1f48acd0", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_card_payment_method_id__source_relation"], "alias": "dbt_utils_unique_combination_o_67cdb901497818d0c61e0cebbc173769", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_67cdb901497818d0c61e0cebbc173769", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_67cdb901497818d0c61e0cebbc173769"}, "created_at": 1709229533.265323, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_67cdb901497818d0c61e0cebbc173769\") }}", "language": "sql", "refs": [{"name": "stg_stripe__payment_method_card", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_method_card"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_67cdb901497818d0c61e0cebbc173769.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_method_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_card`\n    group by payment_method_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__payment_method_card", "attached_node": "model.stripe_source.stg_stripe__payment_method_card"}, "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_method_id", "model": "{{ get_where_subquery(ref('stg_stripe__payment_method')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__payment_method_payment_method_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__payment_method_payment_method_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471", "fqn": ["stripe_source", "not_null_stg_stripe__payment_method_payment_method_id"], "alias": "not_null_stg_stripe__payment_method_payment_method_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.268002, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__payment_method", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_method"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__payment_method_payment_method_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method`\nwhere payment_method_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payment_method_id", "file_key_name": "models.stg_stripe__payment_method", "attached_node": "model.stripe_source.stg_stripe__payment_method"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_payment_method_id__source_relation.02a8143517": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["payment_method_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__payment_method')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_payment_method_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_e17cb5c83f9ea090764e1b642353ef4e.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_payment_method_id__source_relation.02a8143517", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_payment_method_id__source_relation"], "alias": "dbt_utils_unique_combination_o_e17cb5c83f9ea090764e1b642353ef4e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e17cb5c83f9ea090764e1b642353ef4e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e17cb5c83f9ea090764e1b642353ef4e"}, "created_at": 1709229533.2691169, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e17cb5c83f9ea090764e1b642353ef4e\") }}", "language": "sql", "refs": [{"name": "stg_stripe__payment_method", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_method"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_e17cb5c83f9ea090764e1b642353ef4e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_method_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method`\n    group by payment_method_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__payment_method", "attached_node": "model.stripe_source.stg_stripe__payment_method"}, "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payout_id", "model": "{{ get_where_subquery(ref('stg_stripe__payout')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__payout_payout_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__payout_payout_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc", "fqn": ["stripe_source", "not_null_stg_stripe__payout_payout_id"], "alias": "not_null_stg_stripe__payout_payout_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.2717628, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__payout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payout"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__payout_payout_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payout_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payout`\nwhere payout_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "payout_id", "file_key_name": "models.stg_stripe__payout", "attached_node": "model.stripe_source.stg_stripe__payout"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payout_payout_id__source_relation.f9897a29ec": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["payout_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__payout')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__payout_payout_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_f8333d15db7544367b5371cf961a3c00.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payout_payout_id__source_relation.f9897a29ec", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__payout_payout_id__source_relation"], "alias": "dbt_utils_unique_combination_o_f8333d15db7544367b5371cf961a3c00", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f8333d15db7544367b5371cf961a3c00", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f8333d15db7544367b5371cf961a3c00"}, "created_at": 1709229533.272939, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f8333d15db7544367b5371cf961a3c00\") }}", "language": "sql", "refs": [{"name": "stg_stripe__payout", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payout"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_f8333d15db7544367b5371cf961a3c00.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payout_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payout`\n    group by payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__payout", "attached_node": "model.stripe_source.stg_stripe__payout"}, "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "refund_id", "model": "{{ get_where_subquery(ref('stg_stripe__refund')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__refund_refund_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__refund_refund_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0", "fqn": ["stripe_source", "not_null_stg_stripe__refund_refund_id"], "alias": "not_null_stg_stripe__refund_refund_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.275758, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__refund", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__refund"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__refund_refund_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__refund`\nwhere refund_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "refund_id", "file_key_name": "models.stg_stripe__refund", "attached_node": "model.stripe_source.stg_stripe__refund"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__refund_refund_id__source_relation.93aa6111ec": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["refund_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__refund')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__refund_refund_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_0856938d9fa09b7284767b88b42f817e.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__refund_refund_id__source_relation.93aa6111ec", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__refund_refund_id__source_relation"], "alias": "dbt_utils_unique_combination_o_0856938d9fa09b7284767b88b42f817e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0856938d9fa09b7284767b88b42f817e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0856938d9fa09b7284767b88b42f817e"}, "created_at": 1709229533.276889, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0856938d9fa09b7284767b88b42f817e\") }}", "language": "sql", "refs": [{"name": "stg_stripe__refund", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__refund"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_0856938d9fa09b7284767b88b42f817e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__refund`\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__refund", "attached_node": "model.stripe_source.stg_stripe__refund"}, "test.stripe_source.not_null_stg_stripe__invoice_line_item_invoice_line_item_id.5b9c83b5f3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_line_item_id", "model": "{{ get_where_subquery(ref('stg_stripe__invoice_line_item')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__invoice_line_item_invoice_line_item_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__invoice_line_item_invoice_line_item_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_line_item_invoice_line_item_id.5b9c83b5f3", "fqn": ["stripe_source", "not_null_stg_stripe__invoice_line_item_invoice_line_item_id"], "alias": "not_null_stg_stripe__invoice_line_item_invoice_line_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.280179, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__invoice_line_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__invoice_line_item"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__invoice_line_item_invoice_line_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_line_item_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item`\nwhere invoice_line_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_line_item_id", "file_key_name": "models.stg_stripe__invoice_line_item", "attached_node": "model.stripe_source.stg_stripe__invoice_line_item"}, "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_invoice_line_item_id.a59523b7b7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_invoice_line_item_id", "model": "{{ get_where_subquery(ref('stg_stripe__invoice_line_item')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "unique_stg_stripe__invoice_line_item_unique_invoice_line_item_id", "resource_type": "test", "package_name": "stripe_source", "path": "unique_stg_stripe__invoice_lin_18d1a62c4664531c39417de113dfbc71.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_invoice_line_item_id.a59523b7b7", "fqn": ["stripe_source", "unique_stg_stripe__invoice_line_item_unique_invoice_line_item_id"], "alias": "unique_stg_stripe__invoice_lin_18d1a62c4664531c39417de113dfbc71", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_stg_stripe__invoice_lin_18d1a62c4664531c39417de113dfbc71", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_stripe__invoice_lin_18d1a62c4664531c39417de113dfbc71"}, "created_at": 1709229533.281419, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_stripe__invoice_lin_18d1a62c4664531c39417de113dfbc71\") }}", "language": "sql", "refs": [{"name": "stg_stripe__invoice_line_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__invoice_line_item"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__invoice_lin_18d1a62c4664531c39417de113dfbc71.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unique_invoice_line_item_id as unique_field\n  from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item`\n  where unique_invoice_line_item_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "unique_invoice_line_item_id", "file_key_name": "models.stg_stripe__invoice_line_item", "attached_node": "model.stripe_source.stg_stripe__invoice_line_item"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_line_item_invoice_line_item_id__invoice_id__source_relation.d2ff4b8aed": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["invoice_line_item_id", "invoice_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__invoice_line_item')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__invoice_line_item_invoice_line_item_id__invoice_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_a61a694060542937ad92df635b565412.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_line_item_invoice_line_item_id__invoice_id__source_relation.d2ff4b8aed", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__invoice_line_item_invoice_line_item_id__invoice_id__source_relation"], "alias": "dbt_utils_unique_combination_o_a61a694060542937ad92df635b565412", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a61a694060542937ad92df635b565412", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a61a694060542937ad92df635b565412"}, "created_at": 1709229533.282541, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a61a694060542937ad92df635b565412\") }}", "language": "sql", "refs": [{"name": "stg_stripe__invoice_line_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__invoice_line_item"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_a61a694060542937ad92df635b565412.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_line_item_id, invoice_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item`\n    group by invoice_line_item_id, invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__invoice_line_item", "attached_node": "model.stripe_source.stg_stripe__invoice_line_item"}, "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_stripe__invoice')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__invoice_invoice_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__invoice_invoice_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095", "fqn": ["stripe_source", "not_null_stg_stripe__invoice_invoice_id"], "alias": "not_null_stg_stripe__invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.2852638, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__invoice"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__invoice_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice`\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invoice_id", "file_key_name": "models.stg_stripe__invoice", "attached_node": "model.stripe_source.stg_stripe__invoice"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_invoice_id__source_relation.f632654e72": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["invoice_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__invoice')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__invoice_invoice_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_30733ee9bf5d482daeaa774ff25afa9f.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_invoice_id__source_relation.f632654e72", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__invoice_invoice_id__source_relation"], "alias": "dbt_utils_unique_combination_o_30733ee9bf5d482daeaa774ff25afa9f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_30733ee9bf5d482daeaa774ff25afa9f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_30733ee9bf5d482daeaa774ff25afa9f"}, "created_at": 1709229533.2863832, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_30733ee9bf5d482daeaa774ff25afa9f\") }}", "language": "sql", "refs": [{"name": "stg_stripe__invoice", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__invoice"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_30733ee9bf5d482daeaa774ff25afa9f.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice`\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__invoice", "attached_node": "model.stripe_source.stg_stripe__invoice"}, "test.stripe_source.not_null_stg_stripe__subscription_subscription_id.b242b1f7bc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('stg_stripe__subscription')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__subscription_subscription_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__subscription_subscription_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__subscription_subscription_id.b242b1f7bc", "fqn": ["stripe_source", "not_null_stg_stripe__subscription_subscription_id"], "alias": "not_null_stg_stripe__subscription_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.2891798, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__subscription", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__subscription"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__subscription_subscription_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`\nwhere subscription_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "subscription_id", "file_key_name": "models.stg_stripe__subscription", "attached_node": "model.stripe_source.stg_stripe__subscription"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__subscription_subscription_id__source_relation.1b87d4205c": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["subscription_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__subscription')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__subscription_subscription_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_b8787d2eac1dec883e9b6abe37534da0.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__subscription_subscription_id__source_relation.1b87d4205c", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__subscription_subscription_id__source_relation"], "alias": "dbt_utils_unique_combination_o_b8787d2eac1dec883e9b6abe37534da0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b8787d2eac1dec883e9b6abe37534da0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_b8787d2eac1dec883e9b6abe37534da0"}, "created_at": 1709229533.290318, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b8787d2eac1dec883e9b6abe37534da0\") }}", "language": "sql", "refs": [{"name": "stg_stripe__subscription", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__subscription"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_b8787d2eac1dec883e9b6abe37534da0.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`\n    group by subscription_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__subscription", "attached_node": "model.stripe_source.stg_stripe__subscription"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__price_plan_price_plan_id__source_relation.3d189cd99d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["price_plan_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__price_plan')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__price_plan_price_plan_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_c49da3fb10e7fcda8c76c36ce1f94d90.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__price_plan_price_plan_id__source_relation.3d189cd99d", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__price_plan_price_plan_id__source_relation"], "alias": "dbt_utils_unique_combination_o_c49da3fb10e7fcda8c76c36ce1f94d90", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c49da3fb10e7fcda8c76c36ce1f94d90", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c49da3fb10e7fcda8c76c36ce1f94d90"}, "created_at": 1709229533.293, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c49da3fb10e7fcda8c76c36ce1f94d90\") }}", "language": "sql", "refs": [{"name": "stg_stripe__price_plan", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__price_plan"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_c49da3fb10e7fcda8c76c36ce1f94d90.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        price_plan_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__price_plan`\n    group by price_plan_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__price_plan", "attached_node": "model.stripe_source.stg_stripe__price_plan"}, "test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_note_id", "model": "{{ get_where_subquery(ref('stg_stripe__credit_note')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__credit_note_credit_note_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__credit_note_credit_note_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd", "fqn": ["stripe_source", "not_null_stg_stripe__credit_note_credit_note_id"], "alias": "not_null_stg_stripe__credit_note_credit_note_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.295514, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__credit_note", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "credit_note_id", "file_key_name": "models.stg_stripe__credit_note", "attached_node": "model.stripe_source.stg_stripe__credit_note"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__credit_note_credit_note_id__source_relation.ae67150efb": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["credit_note_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__credit_note')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__credit_note_credit_note_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_1749099a9569c9cb2ba829acbf30cb82.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__credit_note_credit_note_id__source_relation.ae67150efb", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__credit_note_credit_note_id__source_relation"], "alias": "dbt_utils_unique_combination_o_1749099a9569c9cb2ba829acbf30cb82", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_1749099a9569c9cb2ba829acbf30cb82", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_1749099a9569c9cb2ba829acbf30cb82"}, "created_at": 1709229533.296893, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1749099a9569c9cb2ba829acbf30cb82\") }}", "language": "sql", "refs": [{"name": "stg_stripe__credit_note", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__credit_note", "attached_node": "model.stripe_source.stg_stripe__credit_note"}, "test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_note_line_item_id", "model": "{{ get_where_subquery(ref('stg_stripe__credit_note_line_item')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7", "fqn": ["stripe_source", "not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id"], "alias": "not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d"}, "created_at": 1709229533.299615, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d\") }}", "language": "sql", "refs": [{"name": "stg_stripe__credit_note_line_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "credit_note_line_item_id", "file_key_name": "models.stg_stripe__credit_note_line_item", "attached_node": "model.stripe_source.stg_stripe__credit_note_line_item"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__credit_note_line_item_credit_note_line_item_id__source_relation.0d59ab0d29": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["credit_note_line_item_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__credit_note_line_item')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__credit_note_line_item_credit_note_line_item_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_de80c79b60617ab904e1c2dd7a6f5ab8.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__credit_note_line_item_credit_note_line_item_id__source_relation.0d59ab0d29", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__credit_note_line_item_credit_note_line_item_id__source_relation"], "alias": "dbt_utils_unique_combination_o_de80c79b60617ab904e1c2dd7a6f5ab8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": "dbt_utils_unique_combination_o_de80c79b60617ab904e1c2dd7a6f5ab8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_de80c79b60617ab904e1c2dd7a6f5ab8"}, "created_at": 1709229533.300747, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_de80c79b60617ab904e1c2dd7a6f5ab8\") }}", "language": "sql", "refs": [{"name": "stg_stripe__credit_note_line_item", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__credit_note_line_item", "attached_node": "model.stripe_source.stg_stripe__credit_note_line_item"}, "test.stripe_source.not_null_stg_stripe__account_account_id.374858379a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_stripe__account')) }}"}, "namespace": null}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "not_null_stg_stripe__account_account_id", "resource_type": "test", "package_name": "stripe_source", "path": "not_null_stg_stripe__account_account_id.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.not_null_stg_stripe__account_account_id.374858379a", "fqn": ["stripe_source", "not_null_stg_stripe__account_account_id"], "alias": "not_null_stg_stripe__account_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1709229533.303443, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stg_stripe__account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__account"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__account_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account`\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "account_id", "file_key_name": "models.stg_stripe__account", "attached_node": "model.stripe_source.stg_stripe__account"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__account_account_id__source_relation.822bb93896": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__account')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__account_account_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_c89155f97740bf80f412d6766683f388.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__account_account_id__source_relation.822bb93896", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__account_account_id__source_relation"], "alias": "dbt_utils_unique_combination_o_c89155f97740bf80f412d6766683f388", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c89155f97740bf80f412d6766683f388", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_c89155f97740bf80f412d6766683f388"}, "created_at": 1709229533.304854, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c89155f97740bf80f412d6766683f388\") }}", "language": "sql", "refs": [{"name": "stg_stripe__account", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__account"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_c89155f97740bf80f412d6766683f388.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account`\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__account", "attached_node": "model.stripe_source.stg_stripe__account"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__dispute_dispute_id__source_relation.3fe3205476": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["dispute_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__dispute')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__dispute_dispute_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_0f9ed8c67783db8fdd2dd44b72f4010a.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__dispute_dispute_id__source_relation.3fe3205476", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__dispute_dispute_id__source_relation"], "alias": "dbt_utils_unique_combination_o_0f9ed8c67783db8fdd2dd44b72f4010a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0f9ed8c67783db8fdd2dd44b72f4010a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0f9ed8c67783db8fdd2dd44b72f4010a"}, "created_at": 1709229533.307807, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0f9ed8c67783db8fdd2dd44b72f4010a\") }}", "language": "sql", "refs": [{"name": "stg_stripe__dispute", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__dispute"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_0f9ed8c67783db8fdd2dd44b72f4010a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        dispute_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__dispute`\n    group by dispute_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__dispute", "attached_node": "model.stripe_source.stg_stripe__dispute"}, "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__transfer_transfer_id__source_relation.ade160ba67": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transfer_id", "source_relation"], "model": "{{ get_where_subquery(ref('stg_stripe__transfer')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stg_stripe__transfer_transfer_id__source_relation", "resource_type": "test", "package_name": "stripe_source", "path": "dbt_utils_unique_combination_o_9bfac04d681892582b15432349cfe7af.sql", "original_file_path": "models/stg_stripe.yml", "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__transfer_transfer_id__source_relation.ade160ba67", "fqn": ["stripe_source", "dbt_utils_unique_combination_of_columns_stg_stripe__transfer_transfer_id__source_relation"], "alias": "dbt_utils_unique_combination_o_9bfac04d681892582b15432349cfe7af", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9bfac04d681892582b15432349cfe7af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9bfac04d681892582b15432349cfe7af"}, "created_at": 1709229533.310459, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9bfac04d681892582b15432349cfe7af\") }}", "language": "sql", "refs": [{"name": "stg_stripe__transfer", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__transfer"]}, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/dbt_utils_unique_combination_o_9bfac04d681892582b15432349cfe7af.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__transfer`\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stg_stripe__transfer", "attached_node": "model.stripe_source.stg_stripe__transfer"}, "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_transactions_balance_transaction_id__source_relation.e7b1075064": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["balance_transaction_id", "source_relation"], "model": "{{ get_where_subquery(ref('stripe__balance_transactions')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stripe__balance_transactions_balance_transaction_id__source_relation", "resource_type": "test", "package_name": "stripe", "path": "dbt_utils_unique_combination_o_21c205d04d5b83a5807789ec8843313d.sql", "original_file_path": "models/stripe.yml", "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_transactions_balance_transaction_id__source_relation.e7b1075064", "fqn": ["stripe", "dbt_utils_unique_combination_of_columns_stripe__balance_transactions_balance_transaction_id__source_relation"], "alias": "dbt_utils_unique_combination_o_21c205d04d5b83a5807789ec8843313d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_21c205d04d5b83a5807789ec8843313d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_21c205d04d5b83a5807789ec8843313d"}, "created_at": 1709229533.420809, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_21c205d04d5b83a5807789ec8843313d\") }}", "language": "sql", "refs": [{"name": "stripe__balance_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__balance_transactions"]}, "compiled_path": "target/compiled/stripe/models/stripe.yml/dbt_utils_unique_combination_o_21c205d04d5b83a5807789ec8843313d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stripe__balance_transactions", "attached_node": "model.stripe.stripe__balance_transactions"}, "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_details_invoice_id__source_relation.77a5fcff44": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["invoice_id", "source_relation"], "model": "{{ get_where_subquery(ref('stripe__invoice_details')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stripe__invoice_details_invoice_id__source_relation", "resource_type": "test", "package_name": "stripe", "path": "dbt_utils_unique_combination_o_a0070473ff6185e925e7869e543a33c5.sql", "original_file_path": "models/stripe.yml", "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_details_invoice_id__source_relation.77a5fcff44", "fqn": ["stripe", "dbt_utils_unique_combination_of_columns_stripe__invoice_details_invoice_id__source_relation"], "alias": "dbt_utils_unique_combination_o_a0070473ff6185e925e7869e543a33c5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a0070473ff6185e925e7869e543a33c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a0070473ff6185e925e7869e543a33c5"}, "created_at": 1709229533.4238322, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a0070473ff6185e925e7869e543a33c5\") }}", "language": "sql", "refs": [{"name": "stripe__invoice_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__invoice_details"]}, "compiled_path": "target/compiled/stripe/models/stripe.yml/dbt_utils_unique_combination_o_a0070473ff6185e925e7869e543a33c5.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__invoice_details`\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stripe__invoice_details", "attached_node": "model.stripe.stripe__invoice_details"}, "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_line_item_details_invoice_line_item_id__invoice_id__source_relation.c9a57418fb": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["invoice_line_item_id", "invoice_id", "source_relation"], "model": "{{ get_where_subquery(ref('stripe__invoice_line_item_details')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stripe__invoice_line_item_details_invoice_line_item_id__invoice_id__source_relation", "resource_type": "test", "package_name": "stripe", "path": "dbt_utils_unique_combination_o_143342fe44ae6be86781fed3c512ca6a.sql", "original_file_path": "models/stripe.yml", "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_line_item_details_invoice_line_item_id__invoice_id__source_relation.c9a57418fb", "fqn": ["stripe", "dbt_utils_unique_combination_of_columns_stripe__invoice_line_item_details_invoice_line_item_id__invoice_id__source_relation"], "alias": "dbt_utils_unique_combination_o_143342fe44ae6be86781fed3c512ca6a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_143342fe44ae6be86781fed3c512ca6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_143342fe44ae6be86781fed3c512ca6a"}, "created_at": 1709229533.4267929, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_143342fe44ae6be86781fed3c512ca6a\") }}", "language": "sql", "refs": [{"name": "stripe__invoice_line_item_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__invoice_line_item_details"]}, "compiled_path": "target/compiled/stripe/models/stripe.yml/dbt_utils_unique_combination_o_143342fe44ae6be86781fed3c512ca6a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_line_item_id, invoice_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__invoice_line_item_details`\n    group by invoice_line_item_id, invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stripe__invoice_line_item_details", "attached_node": "model.stripe.stripe__invoice_line_item_details"}, "test.stripe.dbt_utils_unique_combination_of_columns_stripe__subscription_details_subscription_id__source_relation.a1aa0c421a": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["subscription_id", "source_relation"], "model": "{{ get_where_subquery(ref('stripe__subscription_details')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stripe__subscription_details_subscription_id__source_relation", "resource_type": "test", "package_name": "stripe", "path": "dbt_utils_unique_combination_o_f50db9e26a3db95cda396b9267cfe88a.sql", "original_file_path": "models/stripe.yml", "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__subscription_details_subscription_id__source_relation.a1aa0c421a", "fqn": ["stripe", "dbt_utils_unique_combination_of_columns_stripe__subscription_details_subscription_id__source_relation"], "alias": "dbt_utils_unique_combination_o_f50db9e26a3db95cda396b9267cfe88a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f50db9e26a3db95cda396b9267cfe88a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_f50db9e26a3db95cda396b9267cfe88a"}, "created_at": 1709229533.429497, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f50db9e26a3db95cda396b9267cfe88a\") }}", "language": "sql", "refs": [{"name": "stripe__subscription_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__subscription_details"]}, "compiled_path": "target/compiled/stripe/models/stripe.yml/dbt_utils_unique_combination_o_f50db9e26a3db95cda396b9267cfe88a.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__subscription_details`\n    group by subscription_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stripe__subscription_details", "attached_node": "model.stripe.stripe__subscription_details"}, "test.stripe.dbt_utils_unique_combination_of_columns_stripe__daily_overview_account_id__date_day__source_relation.81c846ac71": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["account_id", "date_day", "source_relation"], "model": "{{ get_where_subquery(ref('stripe__daily_overview')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stripe__daily_overview_account_id__date_day__source_relation", "resource_type": "test", "package_name": "stripe", "path": "dbt_utils_unique_combination_o_86a2314946d96e2b01b592003878d5e5.sql", "original_file_path": "models/stripe.yml", "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__daily_overview_account_id__date_day__source_relation.81c846ac71", "fqn": ["stripe", "dbt_utils_unique_combination_of_columns_stripe__daily_overview_account_id__date_day__source_relation"], "alias": "dbt_utils_unique_combination_o_86a2314946d96e2b01b592003878d5e5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_86a2314946d96e2b01b592003878d5e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_86a2314946d96e2b01b592003878d5e5"}, "created_at": 1709229533.432221, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_86a2314946d96e2b01b592003878d5e5\") }}", "language": "sql", "refs": [{"name": "stripe__daily_overview", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__daily_overview"]}, "compiled_path": "target/compiled/stripe/models/stripe.yml/dbt_utils_unique_combination_o_86a2314946d96e2b01b592003878d5e5.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, date_day, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__daily_overview`\n    group by account_id, date_day, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stripe__daily_overview", "attached_node": "model.stripe.stripe__daily_overview"}, "test.stripe.dbt_utils_unique_combination_of_columns_stripe__activity_itemized_2_balance_transaction_id__source_relation.bfde3a7d9b": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["balance_transaction_id", "source_relation"], "model": "{{ get_where_subquery(ref('stripe__activity_itemized_2')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stripe__activity_itemized_2_balance_transaction_id__source_relation", "resource_type": "test", "package_name": "stripe", "path": "dbt_utils_unique_combination_o_a77d4c0feeb935510bd5e7f5700f1b8d.sql", "original_file_path": "models/stripe.yml", "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__activity_itemized_2_balance_transaction_id__source_relation.bfde3a7d9b", "fqn": ["stripe", "dbt_utils_unique_combination_of_columns_stripe__activity_itemized_2_balance_transaction_id__source_relation"], "alias": "dbt_utils_unique_combination_o_a77d4c0feeb935510bd5e7f5700f1b8d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a77d4c0feeb935510bd5e7f5700f1b8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_a77d4c0feeb935510bd5e7f5700f1b8d"}, "created_at": 1709229533.4350169, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a77d4c0feeb935510bd5e7f5700f1b8d\") }}", "language": "sql", "refs": [{"name": "stripe__activity_itemized_2", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__activity_itemized_2"]}, "compiled_path": "target/compiled/stripe/models/stripe.yml/dbt_utils_unique_combination_o_a77d4c0feeb935510bd5e7f5700f1b8d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__activity_itemized_2`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stripe__activity_itemized_2", "attached_node": "model.stripe.stripe__activity_itemized_2"}, "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_change_from_activity_itemized_3_balance_transaction_id__source_relation.042900aa7d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["balance_transaction_id", "source_relation"], "model": "{{ get_where_subquery(ref('stripe__balance_change_from_activity_itemized_3')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stripe__balance_change_from_activity_itemized_3_balance_transaction_id__source_relation", "resource_type": "test", "package_name": "stripe", "path": "dbt_utils_unique_combination_o_9b2252abdbf95f88860fade0788960b1.sql", "original_file_path": "models/stripe.yml", "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_change_from_activity_itemized_3_balance_transaction_id__source_relation.042900aa7d", "fqn": ["stripe", "dbt_utils_unique_combination_of_columns_stripe__balance_change_from_activity_itemized_3_balance_transaction_id__source_relation"], "alias": "dbt_utils_unique_combination_o_9b2252abdbf95f88860fade0788960b1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9b2252abdbf95f88860fade0788960b1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9b2252abdbf95f88860fade0788960b1"}, "created_at": 1709229533.437641, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9b2252abdbf95f88860fade0788960b1\") }}", "language": "sql", "refs": [{"name": "stripe__balance_change_from_activity_itemized_3", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__balance_change_from_activity_itemized_3"]}, "compiled_path": "target/compiled/stripe/models/stripe.yml/dbt_utils_unique_combination_o_9b2252abdbf95f88860fade0788960b1.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_change_from_activity_itemized_3`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stripe__balance_change_from_activity_itemized_3", "attached_node": "model.stripe.stripe__balance_change_from_activity_itemized_3"}, "test.stripe.dbt_utils_unique_combination_of_columns_stripe__ending_balance_reconciliation_itemized_4_automatic_payout_id__source_relation.a4e66a7386": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["automatic_payout_id", "source_relation"], "model": "{{ get_where_subquery(ref('stripe__ending_balance_reconciliation_itemized_4')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stripe__ending_balance_reconciliation_itemized_4_automatic_payout_id__source_relation", "resource_type": "test", "package_name": "stripe", "path": "dbt_utils_unique_combination_o_de6fcc227241da1f1aff2a55b9218eaa.sql", "original_file_path": "models/stripe.yml", "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__ending_balance_reconciliation_itemized_4_automatic_payout_id__source_relation.a4e66a7386", "fqn": ["stripe", "dbt_utils_unique_combination_of_columns_stripe__ending_balance_reconciliation_itemized_4_automatic_payout_id__source_relation"], "alias": "dbt_utils_unique_combination_o_de6fcc227241da1f1aff2a55b9218eaa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_de6fcc227241da1f1aff2a55b9218eaa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_de6fcc227241da1f1aff2a55b9218eaa"}, "created_at": 1709229533.4401548, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_de6fcc227241da1f1aff2a55b9218eaa\") }}", "language": "sql", "refs": [{"name": "stripe__ending_balance_reconciliation_itemized_4", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__ending_balance_reconciliation_itemized_4"]}, "compiled_path": "target/compiled/stripe/models/stripe.yml/dbt_utils_unique_combination_o_de6fcc227241da1f1aff2a55b9218eaa.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        automatic_payout_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__ending_balance_reconciliation_itemized_4`\n    group by automatic_payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stripe__ending_balance_reconciliation_itemized_4", "attached_node": "model.stripe.stripe__ending_balance_reconciliation_itemized_4"}, "test.stripe.dbt_utils_unique_combination_of_columns_stripe__payout_itemized_3_payout_id__source_relation.db08f37862": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["payout_id", "source_relation"], "model": "{{ get_where_subquery(ref('stripe__payout_itemized_3')) }}"}, "namespace": "dbt_utils"}, "database": "dbt-package-testing", "schema": "stripe_testing_dbt_test__audit", "name": "dbt_utils_unique_combination_of_columns_stripe__payout_itemized_3_payout_id__source_relation", "resource_type": "test", "package_name": "stripe", "path": "dbt_utils_unique_combination_o_0ca60a99c606c9d24a89adf0f58c343b.sql", "original_file_path": "models/stripe.yml", "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__payout_itemized_3_payout_id__source_relation.db08f37862", "fqn": ["stripe", "dbt_utils_unique_combination_of_columns_stripe__payout_itemized_3_payout_id__source_relation"], "alias": "dbt_utils_unique_combination_o_0ca60a99c606c9d24a89adf0f58c343b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0ca60a99c606c9d24a89adf0f58c343b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_0ca60a99c606c9d24a89adf0f58c343b"}, "created_at": 1709229533.443169, "relation_name": null, "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0ca60a99c606c9d24a89adf0f58c343b\") }}", "language": "sql", "refs": [{"name": "stripe__payout_itemized_3", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__payout_itemized_3"]}, "compiled_path": "target/compiled/stripe/models/stripe.yml/dbt_utils_unique_combination_o_0ca60a99c606c9d24a89adf0f58c343b.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payout_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__payout_itemized_3`\n    group by payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.stripe__payout_itemized_3", "attached_node": "model.stripe.stripe__payout_itemized_3"}}, "sources": {"source.stripe_source.stripe.balance_transaction": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "balance_transaction", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.balance_transaction", "fqn": ["stripe_source", "stripe", "balance_transaction"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "balance_transaction_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Gross amount of the transaction, in cents.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the transaction\u2019s net funds will become available in the Stripe balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_id": {"name": "connected_account_id", "description": "The ID of the account connected to the transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the amount in currency A, times exchange_rate, would be the amount in currency B.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "fee": {"name": "fee", "description": "fees (in cents) paid for this transaction.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction, in cents.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reporting_category": {"name": "reporting_category", "description": "Improves on the type field by providing a more-useful grouping for most finance and reporting purposes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source": {"name": "source", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "If the transaction\u2019s net funds are available in the Stripe balance yet. Either 'available' or 'pending'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of transaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`balance_transaction_data`", "created_at": 1709229533.4473522}, "source.stripe_source.stripe.card": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "card", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.card", "fqn": ["stripe_source", "stripe", "card"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "card_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Details of a credit card that has been saved to the system.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "ID of account associated with this card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_city": {"name": "address_city", "description": "City, district, suburb, town, or village.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_country": {"name": "address_country", "description": "Two-letter country code (ISO 3166-1 alpha-2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_line_1": {"name": "address_line_1", "description": "Address line 1 (e.g., street, PO Box, or company name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_line_2": {"name": "address_line_2", "description": "Address line 2 (e.g., apartment, suite, unit, or building).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_state": {"name": "address_state", "description": "State/County/Province/Region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_zip": {"name": "address_zip", "description": "ZIP or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you\u2019ve collected.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The customer that this card belongs to.  NULL if belongs to an account or recipient.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Cardholder name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "funding": {"name": "funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wallet_type": {"name": "wallet_type", "description": "The type of the card wallet, one of amex_express_checkout, apple_pay, google_pay, masterpass, samsung_pay, or visa_checkout. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "three_d_secure_authentication_flow": {"name": "three_d_secure_authentication_flow", "description": "For authenticated transactions, how the customer was authenticated by the issuing bank.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "three_d_secure_result": {"name": "three_d_secure_result", "description": "Indicates the outcome of 3D Secure authentication.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "three_d_secure_result_reason": {"name": "three_d_secure_result_reason", "description": "Additional information about why 3D Secure succeeded or failed based on the result.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "three_d_secure_version": {"name": "three_d_secure_version", "description": "The version of 3D Secure that was used.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`card_data`", "created_at": 1709229533.4475}, "source.stripe_source.stripe.charge": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "charge", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.charge", "fqn": ["stripe_source", "stripe", "charge"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "charge_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_refunded": {"name": "amount_refunded", "description": "The amount of the charge, if any, that has been refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "captured": {"name": "captured", "description": "If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "card_id": {"name": "card_id", "description": "ID of the card that was charged.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_id": {"name": "connected_account_id", "description": "ID of account connected for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer this charge is for if one exists.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failure_code": {"name": "failure_code", "description": "Error code explaining reason for charge failure if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "failure_message": {"name": "failure_message", "description": "Message to user further explaining reason for charge failure if available.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid": {"name": "paid", "description": "true if the charge succeeded, or was successfully authorized for later capture.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "ID of the PaymentIntent associated with this charge, if one exists.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "This is the email address that the receipt for this charge was sent to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refunded": {"name": "refunded", "description": "Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the payment is either succeeded, pending, or failed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "City, district, suburb, town, or village.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Two-letter country code (ISO 3166-1 alpha-2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Address line 1 (e.g., street, PO Box, or company name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Address line 2 (e.g., apartment, suite, unit, or building).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "ZIP or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "State, county, province, or region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_carrier": {"name": "shipping_carrier", "description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Recipient name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Recipient phone (including extension).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_tracking_number": {"name": "shipping_tracking_number", "description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "ID of the source associated. Source objects allow you to accept a variety of payment methods. They represent a customer's payment instrument, and can be used with the Stripe API just like a Card object, once chargeable, they can be charged, or can be attached to customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_transfer": {"name": "source_transfer", "description": "The transfer ID which created this charge. Only present if the charge came from another Stripe account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "statement_descriptor": {"name": "statement_descriptor", "description": "Extra information about a source. This will appear on your customer\u2019s statement every time you charge the source.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "Unique identifier for the payment method object used in this charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "calculated_statement_descriptor": {"name": "calculated_statement_descriptor", "description": "The full statement descriptor that is passed to card networks, and that is displayed on your customers\u2019 credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_address_city": {"name": "billing_detail_address_city", "description": "City, district, suburb, town, or village.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_address_country": {"name": "billing_detail_address_country", "description": "Two-letter country code (ISO 3166-1 alpha-2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_address_line1": {"name": "billing_detail_address_line1", "description": "Address line 1 (e.g., street, PO Box, or company name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_address_line2": {"name": "billing_detail_address_line2", "description": "Address line 2 (e.g., apartment, suite, unit, or building).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_address_postal_code": {"name": "billing_detail_address_postal_code", "description": "ZIP or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_address_state": {"name": "billing_detail_address_state", "description": "State, county, province, or region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_email": {"name": "billing_detail_email", "description": "Email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_name": {"name": "billing_detail_name", "description": "Full name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_detail_phone": {"name": "billing_detail_phone", "description": "Billing phone number (including extension).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`charge_data`", "created_at": 1709229533.44767}, "source.stripe_source.stripe.customer": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "customer", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.customer", "fqn": ["stripe_source", "stripe", "customer"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "customer_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_city": {"name": "address_city", "description": "City, district, suburb, town, or village.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_country": {"name": "address_country", "description": "Two-letter country code (ISO 3166-1 alpha-2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_line_1": {"name": "address_line_1", "description": "Address line 1 (e.g., street, PO Box, or company name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_line_2": {"name": "address_line_2", "description": "Address line 2 (e.g., apartment, suite, unit, or building).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_postal_code": {"name": "address_postal_code", "description": "ZIP or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_state": {"name": "address_state", "description": "State, county, province, or region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfully applied to any invoice. This balance is only taken into account as invoices are finalized.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "bank_account_id": {"name": "bank_account_id", "description": "ID of the bank account associated with this customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_card_id": {"name": "default_card_id", "description": "ID for the default card used by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "delinquent": {"name": "delinquent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "The customer\u2019s email address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "name": {"name": "name", "description": "Customer name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone": {"name": "phone", "description": "Customer's phone number.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Boolean reflecting whether the customer has been deleted in Stripe.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`customer_data`", "created_at": 1709229533.447802}, "source.stripe_source.stripe.dispute": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "dispute", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.dispute", "fqn": ["stripe_source", "stripe", "dispute"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "dispute_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "The details of a dispute related to a charge. A dispute occurs when a customer questions your charge with their card issuer. When this happens, you're given the opportunity to respond to the dispute with evidence that shows that the charge is legitimate.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction": {"name": "balance_transaction", "description": "List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the charge that was disputed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "connected_account_id": {"name": "connected_account_id", "description": "Account id associated with this dispute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created. Measured in seconds since the Unix epoch.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase. Must be a supported currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_access_activity_log": {"name": "evidence_access_activity_log", "description": "Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_billing_address": {"name": "evidence_billing_address", "description": "The billing address provided by the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_cancellation_policy": {"name": "evidence_cancellation_policy", "description": "(ID of a file upload) Your subscription cancellation policy, as shown to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_cancellation_policy_disclosure": {"name": "evidence_cancellation_policy_disclosure", "description": "An explanation of how and when the customer was shown your refund policy prior to purchase. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_cancellation_rebuttal": {"name": "evidence_cancellation_rebuttal", "description": "A justification for why the customer\u2019s subscription was not canceled. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_customer_communication": {"name": "evidence_customer_communication", "description": "(ID of a file upload) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_customer_email_address": {"name": "evidence_customer_email_address", "description": "The email address of the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_customer_name": {"name": "evidence_customer_name", "description": "The name of the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_customer_purchase_ip": {"name": "evidence_customer_purchase_ip", "description": "The IP address that the customer used when making the purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_customer_signature": {"name": "evidence_customer_signature", "description": "(ID of a file upload) A relevant document or contract showing the customer\u2019s signature.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_details_due_by": {"name": "evidence_details_due_by", "description": "Date by which evidence must be submitted in order to successfully challenge dispute. Will be 0 if the customer\u2019s bank or credit card company doesn\u2019t allow a response for this particular dispute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_details_has_evidence": {"name": "evidence_details_has_evidence", "description": "Whether evidence has been staged for this dispute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_details_past_due": {"name": "evidence_details_past_due", "description": "Whether the last evidence submission was submitted past the due date. Defaults to false if no evidence submissions have occurred. If true, then delivery of the latest evidence is not guaranteed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_details_submission_count": {"name": "evidence_details_submission_count", "description": "The number of times evidence has been submitted. Typically, you may only submit evidence once.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_duplicate_charge_documentation": {"name": "evidence_duplicate_charge_documentation", "description": "(ID of a file upload) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_duplicate_charge_explanation": {"name": "evidence_duplicate_charge_explanation", "description": "An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_duplicate_charge_id": {"name": "evidence_duplicate_charge_id", "description": "The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_product_description": {"name": "evidence_product_description", "description": "A description of the product or service that was sold. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_receipt": {"name": "evidence_receipt", "description": "(ID of a file upload) Any receipt or message sent to the customer notifying them of the charge.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_refund_policy": {"name": "evidence_refund_policy", "description": "(ID of a file upload) Your refund policy, as shown to the customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_refund_policy_disclosure": {"name": "evidence_refund_policy_disclosure", "description": "Documentation demonstrating that the customer was shown your refund policy prior to purchase. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_refund_refusal_explanation": {"name": "evidence_refund_refusal_explanation", "description": "A justification for why the customer is not entitled to a refund. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_service_date": {"name": "evidence_service_date", "description": "The date on which the customer received or began receiving the purchased service, in a clear human-readable format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_service_documentation": {"name": "evidence_service_documentation", "description": "(ID of a file upload) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_shipping_address": {"name": "evidence_shipping_address", "description": "The address to which a physical product was shipped. You should try to include as complete address information as possible.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_shipping_carrier": {"name": "evidence_shipping_carrier", "description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_shipping_date": {"name": "evidence_shipping_date", "description": "The date on which a physical product began its route to the shipping address, in a clear human-readable format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_shipping_documentation": {"name": "evidence_shipping_documentation", "description": "(ID of a file upload) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer\u2019s full shipping address, if possible.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_shipping_tracking_number": {"name": "evidence_shipping_tracking_number", "description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_uncategorized_file": {"name": "evidence_uncategorized_file", "description": "(ID of a file upload) Any additional evidence or statements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "evidence_uncategorized_text": {"name": "evidence_uncategorized_text", "description": "Any additional evidence or statements. Has a maximum character count of 20,000.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_charge_refundable": {"name": "is_charge_refundable", "description": "Boolean ff true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test dispute.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reason": {"name": "reason", "description": "Reason given by cardholder for dispute. Possible values are bank_cannot_process, check_returned, credit_not_processed, customer_initiated, debit_not_authorized, duplicate, fraudulent, general, incorrect_account_details, insufficient_funds, product_not_received, product_unacceptable, subscription_canceled, or unrecognized.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of dispute. Possible values are warning_needs_response, warning_under_review, warning_closed, needs_response, under_review, won, or lost.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`dispute_data`", "created_at": 1709229533.4483771}, "source.stripe_source.stripe.fee": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "fee", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.fee", "fqn": ["stripe_source", "stripe", "fee"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "fee_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "The details of a fee associated with a balance_transaction", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction entry the fee applies to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "index": {"name": "index", "description": "The index of the fee within the balance transaction", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount of the fee, in cents.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that earned the fee.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of the fee, can be application_fee, stripe_fee or tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`fee_data`", "created_at": 1709229533.4484868}, "source.stripe_source.stripe.payment_intent": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "payment_intent", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.payment_intent", "fqn": ["stripe_source", "stripe", "payment_intent"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "payment_intent_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "A Payment Intent guides you through the process of collecting a payment from your customer.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_capturable": {"name": "amount_capturable", "description": "Amount that can be captured from this PaymentIntent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_received": {"name": "amount_received", "description": "Amount that was collected by this PaymentIntent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that created the PaymentIntent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the resulting payment.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "Populated when status is canceled, this is the time at which the PaymentIntent was canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancellation_reason": {"name": "cancellation_reason", "description": "Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "capture_method": {"name": "capture_method", "description": "Controls when the funds will be captured from the customer\u2019s account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "confirmation_method": {"name": "confirmation_method", "description": "Whether confirmed automatically or manually", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the Customer this PaymentIntent belongs to, if one exists.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method used in this PaymentIntent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "Email address that the receipt for the resulting payment will be sent to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "statement_descriptor": {"name": "statement_descriptor", "description": "For non-card charges, you can use this value as the complete description that appears on your customers\u2019 statements.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test payment intent.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`payment_intent_data`", "created_at": 1709229533.448598}, "source.stripe_source.stripe.payment_method_card": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "payment_method_card", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.payment_method_card", "fqn": ["stripe_source", "stripe", "payment_method_card"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "payment_method_card_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table with the relationships between a payment method and a card", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "funding": {"name": "funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the charge that this card belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "wallet_type": {"name": "wallet_type", "description": "The type of the card wallet, one of amex_express_checkout, apple_pay, google_pay, masterpass, samsung_pay, or visa_checkout. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`payment_method_card_data`", "created_at": 1709229533.4486961}, "source.stripe_source.stripe.payment_method": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "payment_method", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.payment_method", "fqn": ["stripe_source", "stripe", "payment_method"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "payment_method_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test payment method.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`payment_method_data`", "created_at": 1709229533.4487932}, "source.stripe_source.stripe.payout": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "payout", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.payout", "fqn": ["stripe_source", "stripe", "payout"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "payout_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount (in cents) to be transferred to your bank account or debit card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "arrival_date": {"name": "arrival_date", "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "automatic": {"name": "automatic", "description": "true if the payout was created by an automated payout schedule, and false if it was requested manually.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this payout on your account balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "destination_bank_account_id": {"name": "destination_bank_account_id", "description": "ID of the bank account the payout was sent to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "destination_card_id": {"name": "destination_card_id", "description": "ID of the card the payout was sent to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "method": {"name": "method", "description": "The method used to send this payout, which can be standard or instant.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The source balance this payout came from. One of card, fpx, or bank_account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Can be bank_account or card.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test payout.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`payout_data`", "created_at": 1709229533.448908}, "source.stripe_source.stripe.refund": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "refund", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.refund", "fqn": ["stripe_source", "stripe", "refund"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "refund_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Details of transactions that have been refunded", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount, in cents.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID for the balance transaction that describes the impact on your account balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the charge that was refunded.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "ID of the payment intent associated with this refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reason": {"name": "reason", "description": "Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this refund.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`refund_data`", "created_at": 1709229533.449059}, "source.stripe_source.stripe.invoice_line_item": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "invoice_line_item", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.invoice_line_item", "fqn": ["stripe_source", "stripe", "invoice_line_item"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "invoice_line_item_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "The different items that an invoice contains", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The ID of the invoice this item is a part of", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_item_id": {"name": "invoice_item_id", "description": "The ID of the invoice item this item is a part of", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "price_id": {"name": "price_id", "description": "ID of the price object this item pertains to", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount, in cents.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discountable": {"name": "discountable", "description": "If true, discounts will apply to this line item. Always false for prorations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The ID of the plan of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "proration": {"name": "proration", "description": "Whether this is a proration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The ID of the subscription that the invoice item pertains to, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_item_id": {"name": "subscription_item_id", "description": "The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "A string identifying the type of the source of this line item, either an invoice item or a subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unique_invoice_line_item_id": {"name": "unique_invoice_line_item_id", "description": "A unique id generated for old invoice ID's from a past version of the API", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test invoice line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`invoice_line_item_data`", "created_at": 1709229533.4491708}, "source.stripe_source.stripe.invoice": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "invoice", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.invoice", "fqn": ["stripe_source", "stripe", "invoice"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "invoice_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "Final amount due at this time for this invoice. If the invoice\u2019s total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, in cents, that was paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount remaining, in cents, that is due.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "auto_advance": {"name": "auto_advance", "description": "Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice\u2019s state will not automatically advance without an explicit action.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_reason": {"name": "billing_reason", "description": "Indicates the reason why the invoice was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the latest charge generated for this invoice, if any.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the customer who will be billed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. Referenced as \u2018memo\u2019 in the Dashboard.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date on which payment for this invoice is due. This value will be null for invoices where collection_method=charge_automatically.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "paid": {"name": "paid", "description": "Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer\u2019s account balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The ID of the subscription that the invoice pertains to,.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Total of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tax_percent": {"name": "tax_percent", "description": "The percent used to calculate the tax amount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total": {"name": "total", "description": "Total after discounts and taxes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_start": {"name": "period_start", "description": "Start of the usage period during for which the invoice was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "period_end": {"name": "period_end", "description": "End of the usage period during for which the invoice was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "ID of the default payment method in this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "ID of the PaymentIntent associated with this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "post_payment_credit_notes_amount": {"name": "post_payment_credit_notes_amount", "description": "Total amount of all post-payment credit notes issued for this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pre_payment_credit_notes_amount": {"name": "pre_payment_credit_notes_amount", "description": "Total amount of all pre-payment credit notes issued for this invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_transitions_finalized_at": {"name": "status_transitions_finalized_at", "description": "The time that the invoice draft was finalized.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_transitions_marked_uncollectible_at": {"name": "status_transitions_marked_uncollectible_at", "description": "The time that the invoice was marked uncollectible.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_transitions_paid_at": {"name": "status_transitions_paid_at", "description": "The time that the invoice was paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status_transitions_voided_at": {"name": "status_transitions_voided_at", "description": "The time that the invoice was voided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`invoice_data`", "created_at": 1709229533.449314}, "source.stripe_source.stripe.subscription_history": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "subscription_history", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.subscription_history", "fqn": ["stripe_source", "stripe", "subscription_history"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "subscription_history_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Subscriptions allow you to charge a customer on a recurring basis. Please note this source table is used only on connectors setup **after** February 09, 2022.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing": {"name": "billing", "description": "How the invoice is billed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancel_at_period_end": {"name": "cancel_at_period_end", "description": "Boolean indicating whether this subscription should cancel at the end of the current period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of customer this subscription belongs to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "_fivetran_active": {"name": "_fivetran_active", "description": "Boolean indicating if the record is the latest.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "latest_invoice_id": {"name": "latest_invoice_id", "description": "ID of the latest invoice for this subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "ID of the default payment method for this subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pending_setup_intent_id": {"name": "pending_setup_intent_id", "description": "ID of the payment setup intent for this subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pause_collection_behavior": {"name": "pause_collection_behavior", "description": "The payment collection behavior for this subscription while paused. One of keep_as_draft, mark_uncollectible, or void.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pause_collection_resumes_at": {"name": "pause_collection_resumes_at", "description": "The time after which the subscription will resume collecting payments.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`subscription_history_data`", "created_at": 1709229533.449481}, "source.stripe_source.stripe.subscription": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "subscription", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.subscription", "fqn": ["stripe_source", "stripe", "subscription"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "subscription_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Subscriptions allow you to charge a customer on a recurring basis. Please note this source table is only present in connectors setup **before** February 09, 2022.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing": {"name": "billing", "description": "How the invoice is billed", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "cancel_at_period_end": {"name": "cancel_at_period_end", "description": "Boolean indicating whether this subscription should cancel at the end of the current period.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test subscription.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pause_collection_behavior": {"name": "pause_collection_behavior", "description": "The payment collection behavior for this subscription while paused. One of keep_as_draft, mark_uncollectible, or void.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pause_collection_resumes_at": {"name": "pause_collection_resumes_at", "description": "The time after which the subscription will resume collecting payments.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`subscription_data`", "created_at": 1709229533.44962}, "source.stripe_source.stripe.plan": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "plan", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.plan", "fqn": ["stripe_source", "stripe", "plan"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "plan_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Plans define the base price, currency, and billing cycle for recurring purchases of products.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the plan can be used for new purchases.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The unit amount in cents to be charged, represented as a whole integer if possible.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "interval": {"name": "interval", "description": "The frequency at which a subscription is billed. One of day, week, month or year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "interval_count": {"name": "interval_count", "description": "The number of intervals between subscription billings. For example, interval_count=3 bills every 3 months.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nickname": {"name": "nickname", "description": "A brief description of the plan, hidden from customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product": {"name": "product", "description": "The product whose pricing this plan determines.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test plan.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`plan_data`", "created_at": 1709229533.4985569}, "source.stripe_source.stripe.credit_note": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "credit_note", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.credit_note", "fqn": ["stripe_source", "stripe", "credit_note"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "credit_note_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Credit notes are documents that decrease the amount owed on an invoice. They\u2019re the only way to adjust the amount of a finalized invoice other than voiding and recreating the invoice.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The integer amount in cents representing the total amount of the credit note, including tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the charge. Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_amount": {"name": "discount_amount", "description": "The integer amount in cents representing the total amount of discount that was credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "The integer amount in cents representing the amount of the credit note, excluding tax and invoice level discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "total": {"name": "total", "description": "The integer amount in cents representing the total amount of the credit note, including tax and all discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Has the value true if the object exists in live mode or the value false if the object exists in test mode.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "memo": {"name": "memo", "description": "Customer-facing text that appears on the credit note PDF.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pdf": {"name": "pdf", "description": "The link to download the PDF of the credit note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reason": {"name": "reason", "description": "Reason for issuing this credit note, one of duplicate, fraudulent, order_change, or product_unsatisfactory", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of this credit note, one of issued or void. Learn more about voiding credit notes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of this credit note, one of pre_payment or post_payment. A pre_payment credit note means it was issued when the invoice was open. A post_payment credit note means it was issued when the invoice was paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "voided_at": {"name": "voided_at", "description": "The time that the credit note was voided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_balance_transaction": {"name": "customer_balance_transaction", "description": "Customer balance transaction related to this credit note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with this credit note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_id": {"name": "refund_id", "description": "The id of the refund associated with this credit note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`credit_note_data`", "created_at": 1709229533.498713}, "source.stripe_source.stripe.credit_note_line_item": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "credit_note_line_item", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.credit_note_line_item", "fqn": ["stripe_source", "stripe", "credit_note_line_item"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "credit_note_line_item_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "The different items that a credit note contains.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_id": {"name": "credit_note_id", "description": "The ID of the credit note this item is a part of.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The integer amount in cents representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "discount_amount": {"name": "discount_amount", "description": "The integer amount in cents representing the discount being credited for this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the item being credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Has the value true if the object exists in live mode or the value false if the object exists in test mode.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The number of units of product being credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the credit note line item, one of invoice_line_item or custom_line_item. When the type is invoice_line_item there is an additional invoice_line_item property on the resource the value of which is the id of the credited line item on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "The cost of each unit of product being credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount_decimal": {"name": "unit_amount_decimal", "description": "Same as unit_amount, but contains a decimal value with at most 12 decimal places.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`credit_note_line_item_data`", "created_at": 1709229533.498813}, "source.stripe_source.stripe.price": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "price", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.price", "fqn": ["stripe_source", "stripe", "price"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "price_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.", "columns": {"active": {"name": "active", "description": "Whether the price can be used for new purchases.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "billing_scheme": {"name": "billing_scheme", "description": "Describes how to compute the price per period. Either per_unit or tiered. per_unit indicates that the fixed amount (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity (for prices with usage_type=licensed), or per unit of total usage (for prices with usage_type=metered). tiered indicates that the unit pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase. Must be a supported currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_item_id": {"name": "invoice_item_id", "description": "The ID of the invoice item this record is a part of.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Whether record has been deleted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Has the value true if the object exists in live mode or the value false if the object exists in test mode.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "lookup_key": {"name": "lookup_key", "description": "A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nickname": {"name": "nickname", "description": "A brief description of the price, hidden from customers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The ID of the product this price is associated with.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recurring_aggregate_usage": {"name": "recurring_aggregate_usage", "description": "Specifies a usage aggregation strategy for prices of usage_type=metered. Allowed values are sum for summing up all usage during a period, last_during_period for using the last usage record reported within a period, last_ever for using the last usage record ever (across period bounds) or max which uses the usage record with the maximum reported usage during a period. Defaults to sum.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recurring_interval": {"name": "recurring_interval", "description": "Specifies billing frequency. Either day, week, month or year.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recurring_interval_count": {"name": "recurring_interval_count", "description": "The number of intervals between subscription billings. For example, interval=month and interval_count=3 bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "recurring_usage_type": {"name": "recurring_usage_type", "description": "Configures how the quantity per period should be determined. Can be either metered or licensed. licensed automatically bills the quantity set when adding it to a subscription. metered aggregates the total usage based on usage records. Defaults to licensed.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "tiers_mode": {"name": "tiers_mode", "description": "Defines if the tiering price should be graduated or volume based. In volume-based tiering, the maximum quantity within a period determines the per unit price. In graduated tiering, pricing can change as the quantity grows.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transform_quantity_divide_by": {"name": "transform_quantity_divide_by", "description": "Divide usage by this number. Transform Quantity applies a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with tiers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transform_quantity_round": {"name": "transform_quantity_round", "description": "After division, either round the result up or down. Transform Quantity applies a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with tiers.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "One of one_time or recurring depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "The unit amount in cents to be charged, represented as a whole integer if possible. Only set if billing_scheme=per_unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "unit_amount_decimal": {"name": "unit_amount_decimal", "description": "The unit amount in cents to be charged, represented as a decimal string with at most 12 decimal places. Only set if billing_scheme=per_unit.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`price_data`", "created_at": 1709229533.4989219}, "source.stripe_source.stripe.account": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "account", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.account", "fqn": ["stripe_source", "stripe", "account"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "account_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_profile_name": {"name": "business_profile_name", "description": "The customer-facing business name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_type": {"name": "business_type", "description": "The business type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "business_profile_mcc": {"name": "business_profile_mcc", "description": "The merchant category code for the account. MCCs are used to classify businesses based on the goods or services they provide.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "charges_enabled": {"name": "charges_enabled", "description": "Whether the account can create live charges.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_address_city": {"name": "company_address_city", "description": "City, district, suburb, town, or village.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_address_country": {"name": "company_address_country", "description": "Two-letter country code (ISO 3166-1 alpha-2).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_address_line_1": {"name": "company_address_line_1", "description": "Address line 1 (e.g., street, PO Box, or company name).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_address_line_2": {"name": "company_address_line_2", "description": "Address line 2 (e.g., apartment, suite, unit, or building).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_address_postal_code": {"name": "company_address_postal_code", "description": "ZIP or postal code.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_address_state": {"name": "company_address_state", "description": "State, county, province, or region.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_name": {"name": "company_name", "description": "The company\u2019s legal name.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "company_phone": {"name": "company_phone", "description": "The company\u2019s phone number (used for verification).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "country": {"name": "country", "description": "The account's country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "default_currency": {"name": "default_currency", "description": "Three-letter ISO currency code representing the default currency for the account. This must be a currency that Stripe supports in the account\u2019s country.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email": {"name": "email", "description": "An email address associated with the account. You can treat this as metadata; it is not used for authentication or messaging account holders.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_deleted": {"name": "is_deleted", "description": "Boolean of whether account has been deleted. Accounts created using test-mode keys can be deleted at any time. Standard accounts created using live-mode keys cannot be deleted. Custom or Express accounts created using live-mode keys can only be deleted once all balances are zero.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to metadata.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "payouts_enabled": {"name": "payouts_enabled", "description": "Boolean of whether payouts are enabled.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "type": {"name": "type", "description": "Account type", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`account_data`", "created_at": 1709229533.499033}, "source.stripe_source.stripe.transfer": {"database": "dbt-package-testing", "schema": "stripe_testing", "name": "transfer", "resource_type": "source", "package_name": "stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "unique_id": "source.stripe_source.stripe.transfer", "fqn": ["stripe_source", "stripe", "transfer"], "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "transfer_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "A Transfer object is created when you move funds between Stripe accounts as part of Connect. Before April 6, 2017, transfers also represented movement of funds from a Stripe account to a card or bank account. That has since been moved to the Payout object. The Payout object represents money moving from a Stripe account to an external account (bank or debit card). The Transfer object now only represents money moving between Stripe accounts on a Connect platform.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount in cents to be transferred.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "amount_reversed": {"name": "amount_reversed", "description": "Amount in cents reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "Balance transaction that describes the impact of this transfer on your account balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created": {"name": "created", "description": "Time that this record of the transfer was first created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase. Must be a supported currency.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "destination": {"name": "destination", "description": "ID of the Stripe account the transfer was sent to.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "destination_payment": {"name": "destination_payment", "description": "If the destination is a Stripe account, the payment that the destination account received for the transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "destination_payment_id": {"name": "destination_payment_id", "description": "If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "reversed": {"name": "reversed", "description": "Boolean of whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_transaction": {"name": "source_transaction", "description": "The source transaction related to this transfer.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_transaction_id": {"name": "source_transaction_id", "description": "ID of the charge or payment that was used to fund the transfer. If null, the transfer was funded from the available balance.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The source balance this transfer came from. One of card, fpx, or bank_account.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "transfer_group": {"name": "transfer_group", "description": "A string that identifies this transaction as part of a group. See the Connect documentation for details.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`dbt-package-testing`.`stripe_testing`.`transfer_data`", "created_at": 1709229533.49914}}, "macros": {"macro.dbt_bigquery.date_sharded_table": {"name": "date_sharded_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.387323, "supported_languages": null}, "macro.dbt_bigquery.grant_access_to": {"name": "grant_access_to", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.387576, "supported_languages": null}, "macro.dbt_bigquery.get_partitions_metadata": {"name": "get_partitions_metadata", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "unique_id": "macro.dbt_bigquery.get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.387885, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_table_as": {"name": "bigquery__create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- if partition_config.time_ingestion_partitioning -%}\n    {%- set columns = get_columns_with_types_in_query_sql(sql) -%}\n    {%- set table_dest_columns_csv = columns_without_partition_fields_csv(partition_config, columns) -%}\n    {%- set columns = '(' ~ table_dest_columns_csv ~ ')' -%}\n    {%- endif -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n      {%- set contract_config = config.get('contract') -%}\n      {%- if contract_config.enforced -%}\n        {{ get_assert_columns_equivalent(compiled_code) }}\n        {{ get_table_columns_and_constraints() }}\n        {%- set compiled_code = get_select_subquery(compiled_code) %}\n      {% else %}\n        {#-- cannot do contracts at the same time as time ingestion partitioning -#}\n        {{ columns }}\n      {% endif %}\n    {{ partition_by(partition_config) }}\n    {{ cluster_by(raw_cluster_by) }}\n\n    {{ bigquery_table_options(config, model, temporary) }}\n\n    {#-- PARTITION BY cannot be used with the AS query_statement clause.\n         https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language#partition_expression\n    -#}\n    {%- if not partition_config.time_ingestion_partitioning %}\n    as (\n      {{ compiled_code }}\n    );\n    {%- endif %}\n  {%- elif language == 'python' -%}\n    {#--\n    N.B. Python models _can_ write to temp views HOWEVER they use a different session\n    and have already expired by the time they need to be used (I.E. in merges for incremental models)\n\n    TODO: Deep dive into spark sessions to see if we can reuse a single session for an entire\n    dbt invocation.\n     --#}\n\n    {#-- when a user wants to change the schema of an existing relation, they must intentionally drop the table in the dataset --#}\n    {%- set old_relation = adapter.get_relation(database=relation.database, schema=relation.schema, identifier=relation.identifier) -%}\n    {%- if (old_relation.is_table and (should_full_refresh())) -%}\n      {% do adapter.drop_relation(relation) %}\n    {%- endif -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation.quote(database=False, schema=False, identifier=False)) }}\n  {%- else -%}\n    {% do exceptions.raise_compiler_error(\"bigquery__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options", "macro.dbt.should_full_refresh", "macro.dbt_bigquery.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.392936, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_view_as": {"name": "bigquery__create_view_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  as {{ sql }};\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.393466, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_schema": {"name": "bigquery__drop_schema", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.39361, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"name": "bigquery__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.3937669, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"name": "bigquery__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.393922, "supported_languages": null}, "macro.dbt_bigquery.bigquery__list_schemas": {"name": "bigquery__list_schemas", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.394075, "supported_languages": null}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"name": "bigquery__check_schema_exists", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.3942652, "supported_languages": null}, "macro.dbt_bigquery.bigquery__persist_docs": {"name": "bigquery__persist_docs", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.3945549, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"name": "bigquery__alter_column_comment", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.3947241, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"name": "bigquery__alter_relation_add_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.395158, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"name": "bigquery__alter_relation_drop_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n\n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.3955798, "supported_languages": null}, "macro.dbt_bigquery.bigquery__alter_column_type": {"name": "bigquery__alter_column_type", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.39651, "supported_languages": null}, "macro.dbt_bigquery.bigquery__test_unique": {"name": "bigquery__test_unique", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n\n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.3968582, "supported_languages": null}, "macro.dbt_bigquery.bigquery__upload_file": {"name": "bigquery__upload_file", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_bigquery.bigquery__upload_file", "macro_sql": "{% macro bigquery__upload_file(local_file_path, database, table_schema, table_name) %}\n\n  {{ log(\"kwargs: \" ~ kwargs) }}\n\n  {% do adapter.upload_file(local_file_path, database, table_schema, table_name, kwargs=kwargs) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.39726, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_csv_table": {"name": "bigquery__create_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.39775, "supported_languages": null}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"name": "bigquery__reset_csv_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.3979342, "supported_languages": null}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"name": "bigquery__load_csv_rows", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n\n  {% call statement() %}\n    alter table {{ this.render() }} set {{ bigquery_table_options(config, model) }}\n  {% endcall %}\n\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.398773, "supported_languages": null}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"name": "bigquery__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.3993962, "supported_languages": null}, "macro.dbt_bigquery.materialization_view_bigquery": {"name": "materialization_view_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    -- grab current tables grants config for comparision later on\n    {% set grant_config = config.get('grants') %}\n\n    {% set to_return = bigquery__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.400237, "supported_languages": ["sql"]}, "macro.dbt_bigquery.materialization_table_bigquery": {"name": "materialization_table_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery', supported_languages=['sql', 'python']-%}\n\n  {%- set language = model['language'] -%}\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n\n  -- build model\n  {%- call statement('main', language=language) -%}\n    {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.404341, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_bigquery.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\nfrom pyspark.sql import SparkSession\n{%- set raw_partition_by = config.get('partition_by', none) -%}\n{%- set raw_cluster_by = config.get('cluster_by', none) -%}\n{%- set partition_config = adapter.parse_partition_by(raw_partition_by) %}\n\nspark = SparkSession.builder.appName('smallTest').getOrCreate()\n\nspark.conf.set(\"viewsEnabled\",\"true\")\nspark.conf.set(\"temporaryGcsBucket\",\"{{target.gcs_bucket}}\")\n\n{{ compiled_code }}\ndbt = dbtObj(spark.read.format(\"bigquery\").load)\ndf = model(dbt, spark)\n\n# COMMAND ----------\n# this is materialization code dbt generated, please do not modify\n\nimport pyspark\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyspark.pandas exists before using it\ntry:\n  import pyspark.pandas\n  pyspark_pandas_api_available = True\nexcept ImportError:\n  pyspark_pandas_api_available = False\n\n# make sure databricks.koalas exists before using it\ntry:\n  import databricks.koalas\n  koalas_available = True\nexcept ImportError:\n  koalas_available = False\n\n# preferentially convert pandas DataFrames to pandas-on-Spark or Koalas DataFrames first\n# since they know how to convert pandas DataFrames better than `spark.createDataFrame(df)`\n# and converting from pandas-on-Spark to Spark DataFrame has no overhead\nif pyspark_pandas_api_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = pyspark.pandas.frame.DataFrame(df)\nelif koalas_available and pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = databricks.koalas.frame.DataFrame(df)\n\n# convert to pyspark.sql.dataframe.DataFrame\nif isinstance(df, pyspark.sql.dataframe.DataFrame):\n  pass  # since it is already a Spark DataFrame\nelif pyspark_pandas_api_available and isinstance(df, pyspark.pandas.frame.DataFrame):\n  df = df.to_spark()\nelif koalas_available and isinstance(df, databricks.koalas.frame.DataFrame):\n  df = df.to_spark()\nelif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  df = spark.createDataFrame(df)\nelse:\n  msg = f\"{type(df)} is not a supported type for dbt Python materialization\"\n  raise Exception(msg)\n\ndf.write \\\n  .mode(\"overwrite\") \\\n  .format(\"bigquery\") \\\n  .option(\"writeMethod\", \"indirect\").option(\"writeDisposition\", 'WRITE_TRUNCATE') \\\n  {%- if partition_config is not none %}\n  {%- if partition_config.data_type | lower in ('date','timestamp','datetime') %}\n  .option(\"partitionField\", \"{{- partition_config.field -}}\") \\\n  {%- if partition_config.granularity is not none %}\n  .option(\"partitionType\", \"{{- partition_config.granularity| upper -}}\") \\\n  {%- endif %}\n  {%- endif %}\n  {%- endif %}\n  {%- if raw_cluster_by is not none %}\n  .option(\"clusteredFields\", \"{{- raw_cluster_by | join(',') -}}\") \\\n  {%- endif %}\n  .save(\"{{target_relation}}\")\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.405453, "supported_languages": null}, "macro.dbt_bigquery.materialization_copy_bigquery": {"name": "materialization_copy_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(ref_table.get('package'), ref_table.name, version=ref_table.get('version'))) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {%- do apply_grants(target_relation, grant_config) -%}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.406904, "supported_languages": ["sql"]}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"name": "dbt_bigquery_validate_get_incremental_strategy", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\") or 'merge' -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.409298, "supported_languages": null}, "macro.dbt_bigquery.source_sql_with_partition": {"name": "source_sql_with_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.source_sql_with_partition", "macro_sql": "{% macro source_sql_with_partition(partition_by, source_sql) %}\n\n  {%- if partition_by.time_ingestion_partitioning %}\n    {{ return(wrap_with_time_ingestion_partitioning_sql(partition_by, source_sql, False))  }}\n  {% else %}\n    {{ return(source_sql)  }}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.409608, "supported_languages": null}, "macro.dbt_bigquery.bq_create_table_as": {"name": "bq_create_table_as", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_create_table_as", "macro_sql": "{% macro bq_create_table_as(partition_by, temporary, relation, compiled_code, language='sql') %}\n  {%- set _dbt_max_partition = declare_dbt_max_partition(this, partition_by, compiled_code, language) -%}\n  {% if partition_by.time_ingestion_partitioning and language == 'python' %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models do not support ingestion time partitioning\"\n    ) %}\n  {% elif partition_by.time_ingestion_partitioning and language == 'sql' %}\n    {#-- Create the table before inserting data as ingestion time partitioned tables can't be created with the transformed data --#}\n    {% do run_query(create_table_as(temporary, relation, compiled_code)) %}\n    {{ return(_dbt_max_partition + bq_insert_into_ingestion_time_partitioned_table_sql(relation, compiled_code)) }}\n  {% else %}\n    {{ return(_dbt_max_partition + create_table_as(temporary, relation, compiled_code, language)) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4105349, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"name": "bq_generate_incremental_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions, incremental_predicates\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set build_sql = bq_generate_incremental_insert_overwrite_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n\n    {% set build_sql = bq_generate_incremental_merge_build_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n    ) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.411295, "supported_languages": null}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"name": "materialization_incremental_bigquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery', supported_languages=['sql', 'python'] -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] %}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n  {% set incremental_predicates = config.get('predicates', default=none) or config.get('incremental_predicates', default=none) %}\n\n   -- grab current tables grants config for comparison later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if partition_by.copy_partitions is true and strategy != 'insert_overwrite' %} {#-- We can't copy partitions with merge strategy --#}\n        {% set wrong_strategy_msg -%}\n        The 'copy_partitions' option requires the 'incremental_strategy' option to be set to 'insert_overwrite'.\n        {%- endset %}\n        {% do exceptions.raise_compiler_error(wrong_strategy_msg) %}\n\n  {% elif existing_relation is none %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {%- call statement('main', language=language) -%}\n        {{ bq_create_table_as(partition_by, False, target_relation, compiled_code, language) }}\n      {%- endcall -%}\n\n  {% else %}\n    {%- if language == 'python' and strategy == 'insert_overwrite' -%}\n      {#-- This lets us move forward assuming no python will be directly templated into a query --#}\n      {%- set python_unsupported_msg -%}\n        The 'insert_overwrite' strategy is not yet supported for python models.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(python_unsupported_msg) %}\n    {%- endif -%}\n\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' or language == 'python' %}\n      {#-- Check first, since otherwise we may not build a temp table --#}\n      {#-- Python always needs to create a temp table --#}\n      {%- call statement('create_tmp_relation', language=language) -%}\n        {{ bq_create_table_as(partition_by, True, tmp_relation, compiled_code, language) }}\n      {%- endcall -%}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {#--  Add time ingestion pseudo column to destination column as not part of the 'schema' but still need it for actual data insertion --#}\n    {% if partition_by.time_ingestion_partitioning %}\n      {% set dest_columns = adapter.add_time_ingestion_partition_column(partition_by, dest_columns) %}\n    {% endif %}\n\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, compiled_code, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, partition_by.copy_partitions, incremental_predicates\n    ) %}\n\n    {%- call statement('main') -%}\n      {{ build_sql }}\n    {% endcall %}\n\n    {%- if language == 'python' and tmp_relation -%}\n      {{ adapter.drop_relation(tmp_relation) }}\n    {%- endif -%}\n\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4158468, "supported_languages": ["sql", "python"]}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"name": "bigquery__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4163468, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_columns": {"name": "bigquery__create_columns", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.416515, "supported_languages": null}, "macro.dbt_bigquery.bigquery__post_snapshot": {"name": "bigquery__post_snapshot", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.416655, "supported_languages": null}, "macro.dbt_bigquery.bigquery__can_clone_table": {"name": "bigquery__can_clone_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__can_clone_table", "macro_sql": "{% macro bigquery__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.416853, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_clone": {"name": "bigquery__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_clone", "macro_sql": "{% macro bigquery__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.41699, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql": {"name": "bq_generate_incremental_merge_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/merge.sql", "original_file_path": "macros/materializations/incremental_strategy/merge.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_merge_build_sql", "macro_sql": "{% macro bq_generate_incremental_merge_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, incremental_predicates\n) %}\n    {%- set source_sql -%}\n        {%- if tmp_relation_exists -%}\n        (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n        )\n        {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n            {%- if partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n            {%- else -%}\n            {{sql}}\n            {%- endif %}\n        )\n        {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns, incremental_predicates) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.417946, "supported_languages": null}, "macro.dbt_bigquery.declare_dbt_max_partition": {"name": "declare_dbt_max_partition", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/common.sql", "original_file_path": "macros/materializations/incremental_strategy/common.sql", "unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, compiled_code, language='sql') %}\n\n  {#-- TODO: revisit partitioning with python models --#}\n  {%- if '_dbt_max_partition' in compiled_code and language == 'sql' -%}\n\n    declare _dbt_max_partition {{ partition_by.data_type_for_partition() }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.418407, "supported_languages": null}, "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql": {"name": "bq_generate_incremental_insert_overwrite_build_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_generate_incremental_insert_overwrite_build_sql", "macro_sql": "{% macro bq_generate_incremental_insert_overwrite_build_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n    {% if partition_by is none %}\n      {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite_sql(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n    ) %}\n\n    {{ return(build_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4216168, "supported_languages": null}, "macro.dbt_bigquery.bq_copy_partitions": {"name": "bq_copy_partitions", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_copy_partitions", "macro_sql": "{% macro bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n\n  {% for partition in partitions %}\n    {% if partition_by.data_type == 'int64' %}\n      {% set partition = partition | as_text %}\n    {% elif partition_by.granularity == 'hour' %}\n      {% set partition = partition.strftime(\"%Y%m%d%H\") %}\n    {% elif partition_by.granularity == 'day' %}\n      {% set partition = partition.strftime(\"%Y%m%d\") %}\n    {% elif partition_by.granularity == 'month' %}\n      {% set partition = partition.strftime(\"%Y%m\") %}\n    {% elif partition_by.granularity == 'year' %}\n      {% set partition = partition.strftime(\"%Y\") %}\n    {% endif %}\n    {% set tmp_relation_partitioned = api.Relation.create(database=tmp_relation.database, schema=tmp_relation.schema, identifier=tmp_relation.table ~ '$' ~ partition, type=tmp_relation.type) %}\n    {% set target_relation_partitioned = api.Relation.create(database=target_relation.database, schema=target_relation.schema, identifier=target_relation.table ~ '$' ~ partition, type=target_relation.type) %}\n    {% do adapter.copy_table(tmp_relation_partitioned, target_relation_partitioned, \"table\") %}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4231832, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_overwrite_sql": {"name": "bq_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_insert_overwrite_sql", "macro_sql": "{% macro bq_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n  {% if partitions is not none and partitions != [] %} {# static #}\n      {{ bq_static_insert_overwrite_sql(tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else %} {# dynamic #}\n      {{ bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.423906, "supported_languages": null}, "macro.dbt_bigquery.bq_static_insert_overwrite_sql": {"name": "bq_static_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_static_insert_overwrite_sql", "macro_sql": "{% macro bq_static_insert_overwrite_sql(\n    tmp_relation, target_relation, sql, partition_by, partitions, dest_columns, tmp_relation_exists, copy_partitions\n) %}\n\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {% if partition_by.time_ingestion_partitioning and tmp_relation_exists -%}\n          select\n            {{ partition_by.insertable_time_partitioning_field() }},\n            * from {{ tmp_relation }}\n          {% elif tmp_relation_exists -%}\n            select\n            * from {{ tmp_relation }}\n          {%- elif partition_by.time_ingestion_partitioning -%}\n            {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, True) }}\n          {%- else -%}\n            {{sql}}\n          {%- endif -%}\n\n        )\n      {%- endset -%}\n\n      {% if copy_partitions %}\n          {% do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) %}\n      {% else %}\n\n      {#-- In case we're putting the model SQL _directly_ into the MERGE statement,\n         we need to prepend the MERGE statement with the user-configured sql_header,\n         which may be needed to resolve that model SQL (e.g. referencing a variable or UDF in the header)\n         in the \"temporary table exists\" case, we save the model SQL result as a temp table first, wherein the\n         sql_header is included by the create_table_as macro.\n      #}\n      -- 1. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header = not tmp_relation_exists) }};\n\n      {%- if tmp_relation_exists -%}\n      -- 2. clean up the temp table\n      drop table if exists {{ tmp_relation }};\n      {%- endif -%}\n\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro.dbt_bigquery.bq_copy_partitions", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.425157, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql": {"name": "bq_dynamic_copy_partitions_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_copy_partitions_insert_overwrite_sql(\n  tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions\n  ) %}\n  {%- if tmp_relation_exists is false -%}\n  {# We run temp table creation in a separated script to move to partitions copy if it doesn't already exist #}\n    {%- call statement('create_tmp_relation_for_copy', language='sql') -%}\n      {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql')\n    }}\n    {%- endcall %}\n  {%- endif -%}\n  {%- set partitions_sql -%}\n    select distinct {{ partition_by.render_wrapped() }}\n    from {{ tmp_relation }}\n  {%- endset -%}\n  {%- set partitions = run_query(partitions_sql).columns[0].values() -%}\n  {# We copy the partitions #}\n  {%- do bq_copy_partitions(tmp_relation, target_relation, partitions, partition_by) -%}\n  -- Clean up the temp table\n  drop table if exists {{ tmp_relation }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.bq_copy_partitions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.425962, "supported_languages": null}, "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql": {"name": "bq_dynamic_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental_strategy/insert_overwrite.sql", "unique_id": "macro.dbt_bigquery.bq_dynamic_insert_overwrite_sql", "macro_sql": "{% macro bq_dynamic_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) %}\n  {%- if copy_partitions is true %}\n     {{ bq_dynamic_copy_partitions_insert_overwrite_sql(tmp_relation, target_relation, sql, unique_key, partition_by, dest_columns, tmp_relation_exists, copy_partitions) }}\n  {% else -%}\n      {% set predicate -%}\n          {{ partition_by.render_wrapped(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select\n        {% if partition_by.time_ingestion_partitioning -%}\n        {{ partition_by.insertable_time_partitioning_field() }},\n        {%- endif -%}\n        * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type_for_partition() }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n       -- 1. create a temp table with model data\n        {{ bq_create_table_as(partition_by, True, tmp_relation, sql, 'sql') }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n      {%- set partition_field = partition_by.time_partitioning_field() if partition_by.time_ingestion_partitioning else partition_by.render_wrapped() -%}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              -- IGNORE NULLS: this needs to be aligned to _dbt_max_partition, which ignores null\n              array_agg(distinct {{ partition_field }} IGNORE NULLS)\n          from {{ tmp_relation }}\n      );\n\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate]) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bq_dynamic_copy_partitions_insert_overwrite_sql", "macro.dbt_bigquery.bq_create_table_as", "macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.42716, "supported_languages": null}, "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql": {"name": "wrap_with_time_ingestion_partitioning_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql", "macro_sql": "{% macro wrap_with_time_ingestion_partitioning_sql(partition_by, sql, is_nested) %}\n\n  select TIMESTAMP({{ partition_by.field }}) as {{ partition_by.insertable_time_partitioning_field() }}, * EXCEPT({{ partition_by.field }}) from (\n    {{ sql }}\n  ){%- if not is_nested -%};{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4287, "supported_languages": null}, "macro.dbt_bigquery.get_quoted_with_types_csv": {"name": "get_quoted_with_types_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_quoted_with_types_csv", "macro_sql": "{% macro get_quoted_with_types_csv(columns) %}\n    {% set quoted = [] %}\n    {% for col in columns -%}\n        {%- do quoted.append(adapter.quote(col.name) ~ \" \" ~ col.data_type) -%}\n    {%- endfor %}\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.429141, "supported_languages": null}, "macro.dbt_bigquery.columns_without_partition_fields_csv": {"name": "columns_without_partition_fields_csv", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.columns_without_partition_fields_csv", "macro_sql": "{% macro columns_without_partition_fields_csv(partition_config, columns) -%}\n  {%- set columns_no_partition = partition_config.reject_partition_field_column(columns) -%}\n  {% set columns_names = get_quoted_with_types_csv(columns_no_partition) %}\n  {{ return(columns_names) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.get_quoted_with_types_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.429408, "supported_languages": null}, "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql": {"name": "bq_insert_into_ingestion_time_partitioned_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.bq_insert_into_ingestion_time_partitioned_table_sql", "macro_sql": "{% macro bq_insert_into_ingestion_time_partitioned_table_sql(target_relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  {{ sql_header if sql_header is not none }}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set dest_columns_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n  insert into {{ target_relation }} ({{ partition_by.insertable_time_partitioning_field() }}, {{ dest_columns_csv }})\n    {{ wrap_with_time_ingestion_partitioning_sql(partition_by, sql, False) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt_bigquery.wrap_with_time_ingestion_partitioning_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.430105, "supported_languages": null}, "macro.dbt_bigquery.get_columns_with_types_in_query_sql": {"name": "get_columns_with_types_in_query_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "original_file_path": "macros/materializations/incremental_strategy/time_ingestion_tables.sql", "unique_id": "macro.dbt_bigquery.get_columns_with_types_in_query_sql", "macro_sql": "{% macro get_columns_with_types_in_query_sql(select_sql) %}\n  {% set sql %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n    select * from (\n      {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n  {% endset %}\n  {{ return(adapter.get_columns_in_select_sql(sql)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.43052, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_relation": {"name": "bigquery__drop_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n    {% do adapter.drop_relation(relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.430722, "supported_languages": null}, "macro.dbt_bigquery.bigquery_options": {"name": "bigquery_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/options.sql", "original_file_path": "macros/relations/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.431395, "supported_languages": null}, "macro.dbt_bigquery.cluster_by": {"name": "cluster_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/cluster.sql", "original_file_path": "macros/relations/cluster.sql", "unique_id": "macro.dbt_bigquery.cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.432035, "supported_languages": null}, "macro.dbt_bigquery.bigquery__rename_relation": {"name": "bigquery__rename_relation", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.432273, "supported_languages": null}, "macro.dbt_bigquery.partition_by": {"name": "partition_by", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/partition.sql", "original_file_path": "macros/relations/partition.sql", "unique_id": "macro.dbt_bigquery.partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.time_ingestion_partitioning -%}\n        partition by {{ partition_config.render_wrapped() }}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.433217, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_materialized_view": {"name": "bigquery__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_materialized_view", "macro_sql": "{% macro bigquery__drop_materialized_view(relation) %}\n    drop materialized view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4333792, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql": {"name": "bigquery__get_replace_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_replace_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_replace_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_model_node(config.model) -%}\n\n    create or replace materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4340339, "supported_languages": null}, "macro.dbt_bigquery.bigquery__refresh_materialized_view": {"name": "bigquery__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_bigquery.bigquery__refresh_materialized_view", "macro_sql": "{% macro bigquery__refresh_materialized_view(relation) %}\n    call bq.refresh_materialized_view('{{ relation.database }}.{{ relation.schema }}.{{ relation.identifier }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.43427, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql": {"name": "bigquery__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n    {% else %}\n\n        alter materialized view {{ relation }}\n            set {{ bigquery_options(configuration_changes.options.context.as_ddl_dict()) }}\n\n    {%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4348779, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes": {"name": "bigquery__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes", "macro_sql": "{% macro bigquery__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = adapter.describe_relation(existing_relation) %}\n    {% set _configuration_changes = existing_relation.materialized_view_config_changeset(_existing_materialized_view, new_config) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.435194, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql": {"name": "bigquery__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql", "macro_sql": "{% macro bigquery__get_create_materialized_view_as_sql(relation, sql) %}\n\n    {%- set materialized_view = adapter.Relation.materialized_view_from_model_node(config.model) -%}\n\n    create materialized view if not exists {{ relation }}\n    {% if materialized_view.partition %}{{ partition_by(materialized_view.partition) }}{% endif %}\n    {% if materialized_view.cluster %}{{ cluster_by(materialized_view.cluster.fields) }}{% endif %}\n    {{ bigquery_options(materialized_view.options.as_ddl_dict()) }}\n    as {{ sql }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.43583, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_table": {"name": "bigquery__drop_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_table", "macro_sql": "{% macro bigquery__drop_table(relation) %}\n    drop table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.43601, "supported_languages": null}, "macro.dbt_bigquery.bigquery_table_options": {"name": "bigquery_table_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/options.sql", "original_file_path": "macros/relations/table/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4363499, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_table_sql": {"name": "bigquery__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_table_sql", "macro_sql": "{%- macro bigquery__get_rename_table_sql(relation, new_name) -%}\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.436542, "supported_languages": null}, "macro.dbt_bigquery.bigquery__drop_view": {"name": "bigquery__drop_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_bigquery.bigquery__drop_view", "macro_sql": "{% macro bigquery__drop_view(relation) %}\n    drop view if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.436676, "supported_languages": null}, "macro.dbt_bigquery.bigquery__create_or_replace_view": {"name": "bigquery__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.bigquery__create_or_replace_view", "macro_sql": "{% macro bigquery__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4386282, "supported_languages": null}, "macro.dbt_bigquery.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.438858, "supported_languages": null}, "macro.dbt_bigquery.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_bigquery.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4390998, "supported_languages": null}, "macro.dbt_bigquery.bigquery_view_options": {"name": "bigquery_view_options", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/options.sql", "original_file_path": "macros/relations/view/options.sql", "unique_id": "macro.dbt_bigquery.bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4393952, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_rename_view_sql": {"name": "bigquery__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_rename_view_sql", "macro_sql": "{%- macro bigquery__get_rename_view_sql(relation, new_name) -%}\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.439569, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog_relations": {"name": "bigquery__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_relation.sql", "original_file_path": "macros/catalog/by_relation.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog_relations", "macro_sql": "{% macro bigquery__get_catalog_relations(information_schema, relations) -%}\n\n    {%- if (relations | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards_stage as ({{ _bigquery__get_table_shards_sql(information_schema) }}),\n                table_shards as (\n                    select * from table_shards_stage\n                    where (\n                        {%- for relation in relations -%}\n                            (\n                                upper(table_schema) = upper('{{ relation.schema }}')\n                            and upper(table_name) = upper('{{ relation.identifier }}')\n                            )\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.441256, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_shards_sql": {"name": "_bigquery__get_table_shards_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro_sql": "{% macro _bigquery__get_table_shards_sql(information_schema) %}\n    select\n        tables.project_id as table_catalog,\n        tables.dataset_id as table_schema,\n        coalesce(REGEXP_EXTRACT(tables.table_id, '^(.+)[0-9]{8}$'), tables.table_id) as table_name,\n        tables.table_id as shard_name,\n        REGEXP_EXTRACT(tables.table_id, '^.+([0-9]{8})$') as shard_index,\n        REGEXP_CONTAINS(tables.table_id, '^.+[0-9]{8}$') and tables.type = 1 as is_date_shard,\n        case\n            when materialized_views.table_name is not null then 'materialized view'\n            when tables.type = 1 then 'table'\n            when tables.type = 2 then 'view'\n            else 'external'\n        end as table_type,\n        tables.type = 1 as is_table,\n        JSON_VALUE(table_description.option_value) as table_comment,\n        tables.size_bytes,\n        tables.row_count\n    from {{ information_schema.replace(information_schema_view='__TABLES__') }} tables\n    left join {{ information_schema.replace(information_schema_view='MATERIALIZED_VIEWS') }} materialized_views\n        on materialized_views.table_catalog = tables.project_id\n        and materialized_views.table_schema = tables.dataset_id\n        and materialized_views.table_name = tables.table_id\n    left join {{ information_schema.replace(information_schema_view='TABLE_OPTIONS') }} table_description\n        on table_description.table_catalog = tables.project_id\n        and table_description.table_schema = tables.dataset_id\n        and table_description.table_name = tables.table_id\n        and table_description.option_name = 'description'\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.444269, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_tables_sql": {"name": "_bigquery__get_tables_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_tables_sql", "macro_sql": "{% macro _bigquery__get_tables_sql() %}\n    select distinct\n        table_catalog,\n        table_schema,\n        table_name,\n        is_date_shard,\n        table_type,\n        is_table,\n        table_comment\n    from table_shards\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.444382, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_table_stats_sql": {"name": "_bigquery__get_table_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro_sql": "{% macro _bigquery__get_table_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        max(shard_name) as latest_shard_name,\n        min(shard_index) as shard_min,\n        max(shard_index) as shard_max,\n        count(shard_index) as shard_count,\n        sum(size_bytes) as size_bytes,\n        sum(row_count) as row_count\n    from table_shards\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.444505, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_columns_sql": {"name": "_bigquery__get_columns_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_columns_sql", "macro_sql": "{% macro _bigquery__get_columns_sql(information_schema) %}\n    select\n        columns.table_catalog,\n        columns.table_schema,\n        columns.table_name as shard_name,\n        coalesce(paths.field_path, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields\n        -- BQ does not treat these nested properties as independent fields\n        row_number() over (\n            partition by\n                columns.table_catalog,\n                columns.table_schema,\n                columns.table_name\n            order by\n                columns.ordinal_position,\n                paths.field_path\n        ) as column_index,\n        coalesce(paths.data_type, '<unknown>') as column_type,\n        paths.description as column_comment,\n        case when columns.is_partitioning_column = 'YES' then 1 else 0 end as is_partitioning_column,\n        case when columns.is_partitioning_column = 'YES' then paths.field_path end as partition_column,\n        case when columns.clustering_ordinal_position is not null then 1 else 0 end as is_clustering_column,\n        case when columns.clustering_ordinal_position is not null then paths.field_path end as cluster_column,\n        columns.clustering_ordinal_position\n    from {{ information_schema.replace(information_schema_view='COLUMNS') }} columns\n    join {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }} paths\n        on paths.table_catalog = columns.table_catalog\n        and paths.table_schema = columns.table_schema\n        and paths.table_name = columns.table_name\n        and paths.column_name = columns.column_name\n    where columns.ordinal_position is not null\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.44481, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_column_stats_sql": {"name": "_bigquery__get_column_stats_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro_sql": "{% macro _bigquery__get_column_stats_sql() %}\n    select\n        table_catalog,\n        table_schema,\n        shard_name,\n        max(is_partitioning_column) = 1 as is_partitioned,\n        max(partition_column) as partition_column,\n        max(is_clustering_column) = 1 as is_clustered,\n        array_to_string(\n            array_agg(\n                cluster_column ignore nulls\n                order by clustering_ordinal_position\n            ), ', '\n        ) as clustering_columns\n    from columns\n    group by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.444917, "supported_languages": null}, "macro.dbt_bigquery._bigquery__get_extended_catalog_sql": {"name": "_bigquery__get_extended_catalog_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/catalog.sql", "original_file_path": "macros/catalog/catalog.sql", "unique_id": "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro_sql": "{% macro _bigquery__get_extended_catalog_sql() %}\n    select\n        tables.table_catalog as table_database,\n        tables.table_schema,\n        case\n            when tables.is_date_shard then concat(tables.table_name, '*')\n            else tables.table_name\n        end as table_name,\n        tables.table_type,\n        tables.table_comment,\n        -- coalesce column metadata fields to ensure they are non-null for catalog generation\n        -- external table columns are not present in COLUMN_FIELD_PATHS\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        coalesce(columns.column_index, 1) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        coalesce(columns.column_comment, '') as column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_stats.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        tables.is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_stats.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        tables.is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_stats.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        tables.is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        table_stats.row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        tables.is_table as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        table_stats.size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        tables.is_table as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        column_stats.partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        column_stats.is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        column_stats.clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        column_stats.is_clustered as `stats__clustering_fields__include`\n\n    from tables\n    join table_stats\n        on table_stats.table_catalog = tables.table_catalog\n        and table_stats.table_schema = tables.table_schema\n        and table_stats.table_name = tables.table_name\n    left join column_stats\n        on column_stats.table_catalog = tables.table_catalog\n        and column_stats.table_schema = tables.table_schema\n        and column_stats.shard_name = table_stats.latest_shard_name\n    left join columns\n        on columns.table_catalog = tables.table_catalog\n        and columns.table_schema = tables.table_schema\n        and columns.shard_name = table_stats.latest_shard_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.44519, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_catalog": {"name": "bigquery__get_catalog", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/catalog/by_schema.sql", "original_file_path": "macros/catalog/by_schema.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n    {%- if (schemas | length) == 0 -%}\n        {# Hopefully nothing cares about the columns we return when there are no rows #}\n        {%- set query = \"select 1 as id limit 0\" -%}\n\n    {%- else -%}\n        {%- set query -%}\n            with\n                table_shards as (\n                    {{ _bigquery__get_table_shards_sql(information_schema) }}\n                    where (\n                        {%- for schema in schemas -%}\n                            upper(tables.dataset_id) = upper('{{ schema }}')\n                            {%- if not loop.last %} or {% endif -%}\n                        {%- endfor -%}\n                    )\n                ),\n                tables as ({{ _bigquery__get_tables_sql() }}),\n                table_stats as ({{ _bigquery__get_table_stats_sql() }}),\n\n                columns as ({{ _bigquery__get_columns_sql(information_schema) }}),\n                column_stats as ({{ _bigquery__get_column_stats_sql() }})\n\n            {{ _bigquery__get_extended_catalog_sql() }}\n        {%- endset -%}\n\n    {%- endif -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery._bigquery__get_table_shards_sql", "macro.dbt_bigquery._bigquery__get_tables_sql", "macro.dbt_bigquery._bigquery__get_table_stats_sql", "macro.dbt_bigquery._bigquery__get_columns_sql", "macro.dbt_bigquery._bigquery__get_column_stats_sql", "macro.dbt_bigquery._bigquery__get_extended_catalog_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4464982, "supported_languages": null}, "macro.dbt_bigquery.bigquery__except": {"name": "bigquery__except", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt_bigquery.bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.44664, "supported_languages": null}, "macro.dbt_bigquery.bigquery__dateadd": {"name": "bigquery__dateadd", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_bigquery.bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.446887, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp": {"name": "bigquery__current_timestamp", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.447063, "supported_languages": null}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"name": "bigquery__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.447264, "supported_languages": null}, "macro.dbt_bigquery.bigquery__current_timestamp_backcompat": {"name": "bigquery__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_bigquery.bigquery__current_timestamp_backcompat", "macro_sql": "{% macro bigquery__current_timestamp_backcompat() -%}\n  current_timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.447346, "supported_languages": null}, "macro.dbt_bigquery.bigquery__intersect": {"name": "bigquery__intersect", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt_bigquery.bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4474602, "supported_languages": null}, "macro.dbt_bigquery.bigquery__escape_single_quotes": {"name": "bigquery__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_bigquery.bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.447671, "supported_languages": null}, "macro.dbt_bigquery.bigquery__format_column": {"name": "bigquery__format_column", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__format_column", "macro_sql": "{% macro bigquery__format_column(column) -%}\n  {% set data_type = column.data_type %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.448878, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_schema_sql": {"name": "bigquery__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_schema_sql", "macro_sql": "{% macro bigquery__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {% for col in columns.values() %}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n\n    {%- set columns = adapter.nest_column_data_types(columns) -%}\n    {{ return(dbt.default__get_empty_schema_sql(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4495769, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_select_subquery": {"name": "bigquery__get_select_subquery", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_select_subquery", "macro_sql": "{% macro bigquery__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.449758, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_column_names": {"name": "bigquery__get_column_names", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/get_columns_spec_ddl.sql", "original_file_path": "macros/utils/get_columns_spec_ddl.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_column_names", "macro_sql": "{% macro bigquery__get_column_names() %}\n  {#- loop through nested user_provided_columns to get column names -#}\n    {%- set user_provided_columns = adapter.nest_column_data_types(model['columns']) -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.450309, "supported_languages": null}, "macro.dbt_bigquery.bigquery__right": {"name": "bigquery__right", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_bigquery.bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4505699, "supported_languages": null}, "macro.dbt_bigquery.bigquery__listagg": {"name": "bigquery__listagg", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_bigquery.bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.450979, "supported_languages": null}, "macro.dbt_bigquery.bigquery__datediff": {"name": "bigquery__datediff", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_bigquery.bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n  {% if dbt_version[0] == 1 and dbt_version[2] >= 2 %}\n    {{ return(dbt.datediff(first_date, second_date, datepart)) }}\n  {% else %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.451493, "supported_languages": null}, "macro.dbt_bigquery.bigquery__safe_cast": {"name": "bigquery__safe_cast", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_bigquery.bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.451664, "supported_languages": null}, "macro.dbt_bigquery.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt_bigquery.bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt.default__hash(field)}})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.451823, "supported_languages": null}, "macro.dbt_bigquery.bigquery__position": {"name": "bigquery__position", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt_bigquery.bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.452034, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_concat": {"name": "bigquery__array_concat", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.452221, "supported_languages": null}, "macro.dbt_bigquery.bigquery__bool_or": {"name": "bigquery__bool_or", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_bigquery.bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n\n    logical_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.452369, "supported_languages": null}, "macro.dbt_bigquery.bigquery__split_part": {"name": "bigquery__split_part", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_bigquery.bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1 + {{ part_number }}\n        )]\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.453006, "supported_languages": null}, "macro.dbt_bigquery.bigquery__date_trunc": {"name": "bigquery__date_trunc", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt_bigquery.bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.453205, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_construct": {"name": "bigquery__array_construct", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    [ {{ inputs|join(' , ') }} ]\n    {% else %}\n    ARRAY<{{data_type}}>[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.453543, "supported_languages": null}, "macro.dbt_bigquery.bigquery__array_append": {"name": "bigquery__array_append", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt_bigquery.bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ array_concat(array, array_construct([new_element])) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.array_concat", "macro.dbt.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4537642, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_show_grant_sql": {"name": "bigquery__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_show_grant_sql", "macro_sql": "{% macro bigquery__get_show_grant_sql(relation) %}\n    {% set location = adapter.get_dataset_location(relation) %}\n    {% set relation = relation.incorporate(location=location) %}\n\n    select privilege_type, grantee\n    from {{ relation.information_schema(\"OBJECT_PRIVILEGES\") }}\n    where object_schema = \"{{ relation.dataset }}\"\n      and object_name = \"{{ relation.identifier }}\"\n      -- filter out current user\n      and split(grantee, ':')[offset(1)] != session_user()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.454463, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_grant_sql": {"name": "bigquery__get_grant_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_grant_sql", "macro_sql": "\n\n\n{%- macro bigquery__get_grant_sql(relation, privilege, grantee) -%}\n    grant `{{ privilege }}` on {{ relation.type }} {{ relation }} to {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.454735, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_revoke_sql": {"name": "bigquery__get_revoke_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_revoke_sql", "macro_sql": "{%- macro bigquery__get_revoke_sql(relation, privilege, grantee) -%}\n    revoke `{{ privilege }}` on {{ relation.type }} {{ relation }} from {{ '\\\"' + grantee|join('\\\", \\\"') + '\\\"' }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.454994, "supported_languages": null}, "macro.dbt_bigquery.bigquery__get_empty_subquery_sql": {"name": "bigquery__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt_bigquery.bigquery__get_empty_subquery_sql", "macro_sql": "{% macro bigquery__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false and current_timestamp() = current_timestamp()\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.455294, "supported_languages": null}, "macro.dbt_bigquery.bigquery__resolve_model_name": {"name": "bigquery__resolve_model_name", "resource_type": "macro", "package_name": "dbt_bigquery", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt_bigquery.bigquery__resolve_model_name", "macro_sql": "{% macro bigquery__resolve_model_name(input_model_name) -%}\n    {{ input_model_name | string | replace('`', '') | replace('\"', '\\\"') }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.455574, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.457079, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.457313, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.457469, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4576142, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.457759, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.458156, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.458484, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.45881, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4592488, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.459532, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.463375, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.463573, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4638789, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.46485, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4650738, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.465285, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.467139, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.468607, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.473242, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.473572, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4737651, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.473863, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.474018, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4741418, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.47437, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.475343, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4755478, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.475821, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.476319, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.483496, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4865038, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4869812, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.487309, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.487714, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.488109, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4936671, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.494139, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.494424, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.4958851, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.496149, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.49688, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5001311, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.503565, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5053031, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.505933, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5067542, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.507067, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.507884, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.515389, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.517099, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.517378, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.518419, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5187032, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.519382, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5200598, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.521201, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.521495, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.521715, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.522089, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.52247, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.522837, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.523052, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5233731, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5235689, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.523726, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.524043, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.529461, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.535578, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.536868, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.53816, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5390542, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.53931, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5394309, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.539732, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.539871, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.544109, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.547534, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.553167, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.554132, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5543811, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.554899, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.555118, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.555259, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5554051, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.555525, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.555696, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.555837, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5563362, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5565271, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.55793, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.558382, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.558784, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.559344, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.559626, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.55993, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.560341, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.560606, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5613482, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5617259, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.561913, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.562117, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.562325, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.563255, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.564676, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.565112, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.565404, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5657501, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.565973, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.566709, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.567185, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.567415, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.567724, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5681028, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.568396, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.568884, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.569349, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.569692, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.569909, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.570185, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.570294, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.570583, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.57075, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5710678, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.571274, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.571552, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5716999, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.572342, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5725482, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5728471, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5729978, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.573309, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.573487, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.574544, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5746691, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.575267, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.575448, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.575593, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.577018, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.577413, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5777721, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.578049, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5781581, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.578441, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.57859, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5788648, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.579017, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.579895, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.580084, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5805461, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.581322, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5818439, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.582041, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.582231, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.582508, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.582613, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.583505, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.583672, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.58512, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.585325, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5855548, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5858319, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.585981, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.586406, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.586572, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5867589, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5871968, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5875552, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.587859, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5881338, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5887601, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.590626, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.591291, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.591606, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.593556, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.594939, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.595736, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.59602, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.596261, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.596341, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5971131, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.597735, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.597976, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.5983849, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.598733, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.598903, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.599159, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.599353, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.60035, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.600875, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.601092, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6016698, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.601952, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.602067, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6024199, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6025898, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.602821, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.603008, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.603287, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.603436, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.603738, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.603879, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6045692, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.604992, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6053429, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6055338, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.605864, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.606026, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6063201, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6064892, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.606741, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.606904, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.607161, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.60727, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.607579, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.607727, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.607997, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.608178, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.609161, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.609329, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.609497, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.60965, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.60982, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.609983, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6101499, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.610336, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.610504, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.610661, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.610828, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6109738, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.611139, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.611286, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.611569, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.611705, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.611957, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.612063, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6124291, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.612772, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.612926, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.613481, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6136808, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.613973, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.614282, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.614435, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.614861, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.615136, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.615558, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.615703, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.616089, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6162791, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.61645, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6166348, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.617128, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.617284, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.617482, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.617606, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6177752, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6178539, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.618102, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_bigquery.bigquery__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.618283, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.619137, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.619276, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6194391, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.619859, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.620051, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.62019, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.62035, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.62048, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.622549, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6227179, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.622941, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.623243, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6234949, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.623826, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.624117, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.624332, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.624609, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.625345, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.625603, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6257532, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6262279, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.626692, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.627, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.627241, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.629003, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6291242, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.629299, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.629428, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.629795, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.629992, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6301088, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6303518, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.630559, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.630812, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.631008, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.631244, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6320598, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.632267, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.632532, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6327791, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.633999, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6345558, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6347551, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.634898, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6355882, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.635766, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.635975, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.636147, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.636428, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.636927, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6398551, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.640136, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.640355, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.640624, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.640828, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.640994, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.641192, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6415281, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.641737, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.642047, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.642241, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.642407, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.642578, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6427379, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6429498, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.643125, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.645463, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.645628, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6459498, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.646176, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.646383, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6465678, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.647912, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6483068, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6485078, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.64889, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6491368, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6497622, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6500301, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.650839, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6525598, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.652724, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.653607, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6540642, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6547048, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.655197, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.655276, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.655821, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.656078, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6563761, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.656655, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.657025, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.657546, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.658046, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6588118, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.65914, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.65949, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.660613, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.661802, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.662772, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6639192, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.664581, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6649349, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6656818, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.666576, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6670358, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.66752, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6681411, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.668637, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6692119, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.669607, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.670319, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.671284, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.671965, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.672662, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.673218, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.673574, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.673984, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.674357, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.67501, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6758568, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.676777, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.677732, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.678493, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.679463, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.680099, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.680439, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.683994, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6859, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6861901, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.686392, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.686885, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6871848, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.687393, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.687702, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6878982, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.68855, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6894221, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.690135, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.690754, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.690997, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.691372, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.691765, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.69233, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.692656, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.693011, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.693729, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.694706, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.695595, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.696077, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.696285, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.696832, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.6975548, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.698441, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.69886, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.699161, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.700523, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7020009, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7034812, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.705523, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7058492, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.705986, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7094998, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.713352, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.713695, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.713969, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.714747, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.71497, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.715181, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7153769, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.715563, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7157388, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.716133, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.716384, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7167711, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.717333, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.717682, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.718027, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.719938, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.720375, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.721267, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.721819, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.723052, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7247, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.725853, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.726768, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.727286, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.728062, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7289522, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.729459, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7296672, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.730069, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7307048, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.731182, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7318358, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7324002, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.73255, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.732695, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.732836, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.73338, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.734215, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.735361, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7356522, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.736264, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7372239, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.742754, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.743538, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.744577, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.745478, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.746298, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.747339, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.747536, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.747655, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.750772, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.758983, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.759132, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7592561, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.759881, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.761597, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.761972, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.762271, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7625751, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7629702, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.763179, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.763392, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.763807, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.76478, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.76495, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.765122, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.765287, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.765435, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.765599, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7664928, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.767185, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.768574, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.768846, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7691011, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7693472, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7696, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.769888, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.770174, "supported_languages": null}, "macro.fivetran_utils.sqlserver__json_parse": {"name": "sqlserver__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.sqlserver__json_parse", "macro_sql": "{% macro sqlserver__json_parse(string, string_path) %}\n\n  json_value({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.770431, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.770785, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.770893, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7709959, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.771102, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.771476, "supported_languages": null}, "macro.fivetran_utils.drop_schemas_automation": {"name": "drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.drop_schemas_automation", "macro_sql": "{% macro drop_schemas_automation(drop_target_schema=true) %}\n    {{ return(adapter.dispatch('drop_schemas_automation', 'fivetran_utils')(drop_target_schema)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__drop_schemas_automation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.772187, "supported_languages": null}, "macro.fivetran_utils.default__drop_schemas_automation": {"name": "default__drop_schemas_automation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/drop_schemas_automation.sql", "original_file_path": "macros/drop_schemas_automation.sql", "unique_id": "macro.fivetran_utils.default__drop_schemas_automation", "macro_sql": "{% macro default__drop_schemas_automation(drop_target_schema=true) %}\n\n{% set fetch_list_sql %}\n    {% if target.type not in ('databricks', 'spark') %}\n        select schema_name\n        from \n        {{ wrap_in_quotes(target.database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like '{{ target.schema | lower }}{%- if not drop_target_schema -%}_{%- endif -%}%'\n    {% else %}\n        SHOW SCHEMAS LIKE '{{ target.schema }}{%- if not drop_target_schema -%}_{%- endif -%}*'\n    {% endif %}\n{% endset %}\n\n{% set results = run_query(fetch_list_sql) %}\n\n{% if execute %}\n    {% set results_list = results.columns[0].values() %}\n{% else %}\n    {% set results_list = [] %}\n{% endif %}\n\n{% for schema_to_drop in results_list %}\n    {% do adapter.drop_schema(api.Relation.create(database=target.database, schema=schema_to_drop)) %}\n    {{ print('Schema ' ~ schema_to_drop ~ ' successfully dropped from the ' ~ target.database ~ ' database.\\n')}}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.wrap_in_quotes", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.773481, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.774184, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.775028, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.775585, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.775733, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.775893, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.776033, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.776184, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.779239, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7794151, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.779584, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7797492, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.781596, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.782572, "supported_languages": null}, "macro.fivetran_utils.default__try_cast": {"name": "default__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__try_cast", "macro_sql": "{% macro default__try_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.78272, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.783189, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.783594, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.783741, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7838788, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7840378, "supported_languages": null}, "macro.fivetran_utils.sqlserver__try_cast": {"name": "sqlserver__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.sqlserver__try_cast", "macro_sql": "{% macro sqlserver__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7841752, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.784738, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.785446, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.785975, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.786189, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7864242, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7866912, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.787931, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.792154, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.792531, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7930171, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.79482, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.795434, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7960389, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.796204, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.796373, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7965581, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.796715, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.7968729, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.797754, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n\n  {% if dbt_version.split('.') | map('int') | list >= [1, 5, 0]  %}\n    {{ return(load_result('collect_freshness')) }}\n  {% else %}\n    {{ return(load_result('collect_freshness').table) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.79931, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.bigquery__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.800098, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.800281, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.800448, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.80061, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8007739, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8009531, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8012202, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.801332, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.801434, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.802112, "supported_languages": null}, "macro.fivetran_utils.fivetran_date_spine": {"name": "fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.fivetran_date_spine", "macro_sql": "{% macro fivetran_date_spine(datepart, start_date, end_date) -%}\n\n{{ return(adapter.dispatch('fivetran_date_spine', 'fivetran_utils') (datepart, start_date, end_date)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__fivetran_date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8035572, "supported_languages": null}, "macro.fivetran_utils.default__fivetran_date_spine": {"name": "default__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.default__fivetran_date_spine", "macro_sql": "{% macro default__fivetran_date_spine(datepart, start_date, end_date) %}\n\n    {{ dbt_utils.date_spine(datepart, start_date, end_date) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.803738, "supported_languages": null}, "macro.fivetran_utils.sqlserver__fivetran_date_spine": {"name": "sqlserver__fivetran_date_spine", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fivetran_date_spine.sql", "original_file_path": "macros/fivetran_date_spine.sql", "unique_id": "macro.fivetran_utils.sqlserver__fivetran_date_spine", "macro_sql": "{% macro sqlserver__fivetran_date_spine(datepart, start_date, end_date) -%}\n\n    {% set date_spine_query %}\n        with\n\n        l0 as (\n\n            select c\n            from (select 1 union all select 1) as d(c)\n\n        ),\n        l1 as (\n\n            select\n                1 as c\n            from l0 as a\n            cross join l0 as b\n\n        ),\n\n        l2 as (\n\n            select 1 as c\n            from l1 as a\n            cross join l1 as b\n        ),\n\n        l3 as (\n\n            select 1 as c\n            from l2 as a\n            cross join l2 as b\n        ),\n\n        l4 as (\n\n            select 1 as c\n            from l3 as a\n            cross join l3 as b\n        ),\n\n        l5 as (\n\n            select 1 as c\n            from l4 as a\n            cross join l4 as b\n        ),\n\n        nums as (\n\n            select row_number() over (order by (select null)) as rownum\n            from l5\n        ),\n\n        rawdata as (\n\n            select top ({{dbt.datediff(start_date, end_date, datepart)}}) rownum -1 as n\n            from nums\n            order by rownum\n        ),\n\n        all_periods as (\n\n            select (\n                {{\n                    dbt.dateadd(\n                        datepart,\n                        'n',\n                        start_date\n                    )\n                }}\n            ) as date_{{datepart}}\n            from rawdata\n        ),\n\n        filtered as (\n\n            select *\n            from all_periods\n            where date_{{datepart}} <= {{ end_date }}\n\n        )\n\n        select * from filtered\n        order by 1\n\n    {% endset %}\n\n    {% set results = run_query(date_spine_query) %}\n\n    {% if execute %}\n\n        {% set results_list = results.columns[0].values() %}\n    \n    {% else %}\n\n        {% set results_list = [] %}\n\n    {% endif %}\n\n    {%- for date_field in results_list %}\n        select cast('{{ date_field }}' as date) as date_{{datepart}} {{ 'union all ' if not loop.last else '' }}\n    {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.dateadd", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.804617, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{%- macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8083048, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{%- macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) -%}\n\n{%- if var(union_schema_variable, none) -%}\n\n    {%- set relations = [] -%}\n    \n    {%- if var(union_schema_variable) is string -%}\n    {%- set trimmed = var(union_schema_variable)|trim('[')|trim(']') -%}\n    {%- set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") -%}\n    {%- else -%}\n    {%- set schemas = var(union_schema_variable) -%}\n    {%- endif -%}\n\n    {%- for schema in var(union_schema_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n    \n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- elif var(union_database_variable, none) -%}\n\n    {%- set relations = [] -%}\n\n    {%- for database in var(union_database_variable) -%}\n    {%- set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {%- set relation_exists=relation is not none -%}\n\n    {%- if relation_exists -%}\n        {%- do relations.append(relation) -%}\n    {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- if relations != [] -%}\n        {{ dbt_utils.union_relations(relations) }}\n    {%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n    {%- endif -%}\n\n{%- else -%}\n    {% set exception_schemas = {\"linkedin_company_pages\": \"linkedin_pages\", \"instagram_business_pages\": \"instagram_business\"} %}\n    {% set relation = namespace(value=\"\") %}\n    {% if default_schema in exception_schemas.keys() %}\n        {% for corrected_schema_name in exception_schemas.items() %}   \n            {% if default_schema in corrected_schema_name %}\n                {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n                {% set identifier_var = corrected_schema_name[1] + \"_\" + table_identifier + \"_identifier\"  %}\n                {%- set relation.value=adapter.get_relation(\n                    database=source(corrected_schema_name[1], table_identifier).database,\n                    schema=source(corrected_schema_name[1], table_identifier).schema,\n                    identifier=var(identifier_var, table_identifier)\n                ) -%}\n            {% endif %}\n        {% endfor %}\n    {% else %}\n        {# In order for this macro to effectively work within upstream integration tests (mainly used by the Fivetran dbt package maintainers), this identifier variable selection is required to use the macro with different identifier names. #}\n        {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifier\"  %}\n        {# Unfortunately the Twitter Organic identifiers were misspelled. As such, we will need to account for this in the model. This will be adjusted in the Twitter Organic package, but to ensure backwards compatibility, this needs to be included. #}\n        {% if var(identifier_var, none) is none %} \n            {% set identifier_var = default_schema + \"_\" + table_identifier + \"_identifer\"  %}\n        {% endif %}\n        {%- set relation.value=adapter.get_relation(\n            database=source(default_schema, table_identifier).database,\n            schema=source(default_schema, table_identifier).schema,\n            identifier=var(identifier_var, table_identifier)\n        ) -%}\n    {% endif %}\n{%- set table_exists=relation.value is not none -%}\n\n{%- if table_exists -%}\n    select * \n    from {{ relation.value }}\n{%- else -%}\n    {% if execute and not var('fivetran__remove_empty_table_warnings', false) -%}\n    {{ exceptions.warn(\"\\n\\nPlease be aware: The \" ~ table_identifier|upper ~ \" table was not found in your \" ~ default_schema|upper ~ \" schema(s). The Fivetran dbt package will create a completely empty \" ~ table_identifier|upper ~ \" staging model as to not break downstream transformations. To turn off these warnings, set the `fivetran__remove_empty_table_warnings` variable to TRUE (see https://github.com/fivetran/dbt_fivetran_utils/tree/releases/v0.4.latest#union_data-source for details).\\n\") }}\n    {% endif -%}\n    select \n        cast(null as {{ dbt.type_string() }}) as _dbt_source_relation\n    limit 0\n{%- endif -%}\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.813279, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8147998, "supported_languages": null}, "macro.fivetran_utils.extract_url_parameter": {"name": "extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.extract_url_parameter", "macro_sql": "{% macro extract_url_parameter(field, url_parameter) -%}\n\n{{ adapter.dispatch('extract_url_parameter', 'fivetran_utils') (field, url_parameter) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__extract_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8151538, "supported_languages": null}, "macro.fivetran_utils.default__extract_url_parameter": {"name": "default__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.default__extract_url_parameter", "macro_sql": "{% macro default__extract_url_parameter(field, url_parameter) -%}\n\n{{ dbt_utils.get_url_parameter(field, url_parameter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.815308, "supported_languages": null}, "macro.fivetran_utils.spark__extract_url_parameter": {"name": "spark__extract_url_parameter", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/extract_url_parameter.sql", "original_file_path": "macros/extract_url_parameter.sql", "unique_id": "macro.fivetran_utils.spark__extract_url_parameter", "macro_sql": "{% macro spark__extract_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"=([^&]+)'\" -%}\nnullif(regexp_extract({{ field }}, {{ formatted_url_parameter }}, 1), '')\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.81551, "supported_languages": null}, "macro.fivetran_utils.wrap_in_quotes": {"name": "wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.wrap_in_quotes", "macro_sql": "{%- macro wrap_in_quotes(object_to_quote) -%}\n\n{{ return(adapter.dispatch('wrap_in_quotes', 'fivetran_utils')(object_to_quote)) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fivetran_utils.default__wrap_in_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.815851, "supported_languages": null}, "macro.fivetran_utils.default__wrap_in_quotes": {"name": "default__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.default__wrap_in_quotes", "macro_sql": "{%- macro default__wrap_in_quotes(object_to_quote)  -%}\n{# bigquery, spark, databricks #}\n    `{{ object_to_quote }}`\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.815967, "supported_languages": null}, "macro.fivetran_utils.snowflake__wrap_in_quotes": {"name": "snowflake__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.snowflake__wrap_in_quotes", "macro_sql": "{%- macro snowflake__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote | upper }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.816117, "supported_languages": null}, "macro.fivetran_utils.redshift__wrap_in_quotes": {"name": "redshift__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.redshift__wrap_in_quotes", "macro_sql": "{%- macro redshift__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8162189, "supported_languages": null}, "macro.fivetran_utils.postgres__wrap_in_quotes": {"name": "postgres__wrap_in_quotes", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/wrap_in_quotes.sql", "original_file_path": "macros/wrap_in_quotes.sql", "unique_id": "macro.fivetran_utils.postgres__wrap_in_quotes", "macro_sql": "{%- macro postgres__wrap_in_quotes(object_to_quote)  -%}\n    \"{{ object_to_quote }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8163211, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8166158, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.816737, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8168378, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.817248, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8176582, "supported_languages": null}, "macro.stripe_source.get_account_columns": {"name": "get_account_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_account_columns.sql", "original_file_path": "macros/get_account_columns.sql", "unique_id": "macro.stripe_source.get_account_columns", "macro_sql": "{% macro get_account_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"business_profile_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_profile_mcc\", \"datatype\": dbt.type_string()},\n    {\"name\": \"business_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charges_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"company_address_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_address_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_address_line_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_address_line_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_address_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_address_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"company_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"details_submitted\", \"datatype\": \"boolean\"},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payouts_enabled\", \"datatype\": \"boolean\"},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8203928, "supported_languages": null}, "macro.stripe_source.get_credit_note_columns": {"name": "get_credit_note_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_credit_note_columns.sql", "original_file_path": "macros/get_credit_note_columns.sql", "unique_id": "macro.stripe_source.get_credit_note_columns", "macro_sql": "{% macro get_credit_note_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subtotal\", \"datatype\": dbt.type_int()},\n    {\"name\": \"total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"memo\", \"datatype\": dbt.type_string()},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pdf\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"voided_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"customer_balance_transaction\", \"datatype\": dbt.type_int()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refund_id\", \"datatype\": dbt.type_string()},\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.822714, "supported_languages": null}, "macro.stripe_source.get_dispute_columns": {"name": "get_dispute_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_dispute_columns.sql", "original_file_path": "macros/get_dispute_columns.sql", "unique_id": "macro.stripe_source.get_dispute_columns", "macro_sql": "{% macro get_dispute_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"balance_transaction\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_access_activity_log\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_billing_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_cancellation_policy\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_cancellation_policy_disclosure\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_cancellation_rebuttal\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_customer_communication\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_customer_email_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_customer_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_customer_purchase_ip\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_customer_signature\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_details_due_by\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"evidence_details_has_evidence\", \"datatype\": \"boolean\"},\n    {\"name\": \"evidence_details_past_due\", \"datatype\": \"boolean\"},\n    {\"name\": \"evidence_details_submission_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"evidence_duplicate_charge_documentation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_duplicate_charge_explanation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_duplicate_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_product_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_receipt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_refund_policy\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_refund_policy_disclosure\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_refund_refusal_explanation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_service_date\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_service_documentation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_shipping_address\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_shipping_carrier\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_shipping_date\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_shipping_documentation\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_shipping_tracking_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_uncategorized_file\", \"datatype\": dbt.type_string()},\n    {\"name\": \"evidence_uncategorized_text\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_charge_refundable\", \"datatype\": \"boolean\"},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.828266, "supported_languages": null}, "macro.stripe_source.get_transfer_columns": {"name": "get_transfer_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_transfer_columns.sql", "original_file_path": "macros/get_transfer_columns.sql", "unique_id": "macro.stripe_source.get_transfer_columns", "macro_sql": "{% macro get_transfer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"amount_reversed\", \"datatype\": dbt.type_int()},\n    {\"name\": \"balance_transaction_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"destination\", \"datatype\": dbt.type_string()},\n    {\"name\": \"destination_payment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"destination_payment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reversed\", \"datatype\": \"boolean\"},\n    {\"name\": \"source_transaction\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_transaction_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transfer_group\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.830389, "supported_languages": null}, "macro.stripe_source.get_refund_columns": {"name": "get_refund_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_refund_columns.sql", "original_file_path": "macros/get_refund_columns.sql", "unique_id": "macro.stripe_source.get_refund_columns", "macro_sql": "{% macro get_refund_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"balance_transaction_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_intent_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"failure_balance_transaction_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"failure_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"receipt_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.832201, "supported_languages": null}, "macro.stripe_source.get_payment_method_columns": {"name": "get_payment_method_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_payment_method_columns.sql", "original_file_path": "macros/get_payment_method_columns.sql", "unique_id": "macro.stripe_source.get_payment_method_columns", "macro_sql": "{% macro get_payment_method_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"billing_detail_address_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_address_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_address_line_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_address_line_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_address_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_address_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.834131, "supported_languages": null}, "macro.stripe_source.get_credit_note_line_item_columns": {"name": "get_credit_note_line_item_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_credit_note_line_item_columns.sql", "original_file_path": "macros/get_credit_note_line_item_columns.sql", "unique_id": "macro.stripe_source.get_credit_note_line_item_columns", "macro_sql": "{% macro get_credit_note_line_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"credit_note_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"discount_amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unit_amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"unit_amount_decimal\", \"datatype\": dbt.type_int()},\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.835562, "supported_languages": null}, "macro.stripe_source.livemode_predicate": {"name": "livemode_predicate", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/livemode_predicate.sql", "original_file_path": "macros/livemode_predicate.sql", "unique_id": "macro.stripe_source.livemode_predicate", "macro_sql": "{% macro livemode_predicate() %}\n\n    where cast(livemode as {{ dbt.type_boolean() }} ) = {{ var('stripe__using_livemode', true) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.835812, "supported_languages": null}, "macro.stripe_source.get_card_columns": {"name": "get_card_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_card_columns.sql", "original_file_path": "macros/get_card_columns.sql", "unique_id": "macro.stripe_source.get_card_columns", "macro_sql": "{% macro get_card_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_line_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_line_1_check\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_line_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_zip\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_zip_check\", \"datatype\": dbt.type_string()},\n    {\"name\": \"brand\", \"datatype\": dbt.type_string()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cvc_check\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dynamic_last_4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exp_month\", \"datatype\": dbt.type_int()},\n    {\"name\": \"exp_year\", \"datatype\": dbt.type_int()},\n    {\"name\": \"fingerprint\", \"datatype\": dbt.type_string()},\n    {\"name\": \"funding\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"last_4\", \"datatype\": dbt.type_string()},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"network\", \"datatype\": dbt.type_string()},\n    {\"name\": \"recipient\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tokenization_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"wallet_type\", \"datatype\": dbt.type_string()},\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.839396, "supported_languages": null}, "macro.stripe_source.get_customer_columns": {"name": "get_customer_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_customer_columns.sql", "original_file_path": "macros/get_customer_columns.sql", "unique_id": "macro.stripe_source.get_customer_columns", "macro_sql": "{% macro get_customer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_balance\", \"datatype\": dbt.type_int()},\n    {\"name\": \"address_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_line_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_line_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt.type_int()},\n    {\"name\": \"bank_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_card_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"delinquent\", \"datatype\": \"boolean\"},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_prefix\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_settings_default_payment_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_settings_footer\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_line_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_line_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_carrier\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_tracking_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_exempt\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_info_tax_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_info_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_info_verification_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_info_verification_verified_name\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8443441, "supported_languages": null}, "macro.stripe_source.get_invoice_columns": {"name": "get_invoice_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_invoice_columns.sql", "original_file_path": "macros/get_invoice_columns.sql", "unique_id": "macro.stripe_source.get_invoice_columns", "macro_sql": "{% macro get_invoice_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount_due\", \"datatype\": dbt.type_int()},\n    {\"name\": \"amount_paid\", \"datatype\": dbt.type_int()},\n    {\"name\": \"amount_remaining\", \"datatype\": dbt.type_int()},\n    {\"name\": \"application_fee_amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"post_payment_credit_notes_amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"pre_payment_credit_notes_amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"attempt_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"attempted\", \"datatype\": \"boolean\"},\n    {\"name\": \"auto_advance\", \"datatype\": \"boolean\"},\n    {\"name\": \"billing\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"due_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"ending_balance\", \"datatype\": dbt.type_int()},\n    {\"name\": \"finalized_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"footer\", \"datatype\": dbt.type_string()},\n    {\"name\": \"hosted_invoice_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_pdf\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"next_payment_attempt\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"paid\", \"datatype\": \"boolean\"},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_intent_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"period_end\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"period_start\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"receipt_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"starting_balance\", \"datatype\": dbt.type_int()},\n    {\"name\": \"statement_descriptor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status_transitions_finalized_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"status_transitions_marked_uncollectible_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"status_transitions_paid_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"status_transitions_voided_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"subscription_proration_date\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subtotal\", \"datatype\": dbt.type_int()},\n    {\"name\": \"tax\", \"datatype\": dbt.type_int()},\n    {\"name\": \"tax_percent\", \"datatype\": dbt.type_numeric()},\n    {\"name\": \"threshold_reason_amount_gte\", \"datatype\": dbt.type_int()},\n    {\"name\": \"total\", \"datatype\": dbt.type_int()},\n    {\"name\": \"webhooks_delivered_at\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.850846, "supported_languages": null}, "macro.stripe_source.get_subscription_columns": {"name": "get_subscription_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_subscription_columns.sql", "original_file_path": "macros/get_subscription_columns.sql", "unique_id": "macro.stripe_source.get_subscription_columns", "macro_sql": "{% macro get_subscription_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"_fivetran_active\", \"datatype\": \"boolean\"},\n    {\"name\": \"application_fee_percent\", \"datatype\": dbt.type_float()},\n    {\"name\": \"billing\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_cycle_anchor\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"billing_threshold_amount_gte\", \"datatype\": dbt.type_int()},\n    {\"name\": \"billing_threshold_reset_billing_cycle_anchor\", \"datatype\": \"boolean\"},\n    {\"name\": \"cancel_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"cancel_at_period_end\", \"datatype\": \"boolean\"},\n    {\"name\": \"canceled_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"current_period_end\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"current_period_start\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"days_until_due\", \"datatype\": dbt.type_int()},\n    {\"name\": \"default_source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ended_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"latest_invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pending_setup_intent_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"start_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_percent\", \"datatype\": dbt.type_float()},\n    {\"name\": \"trial_end\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"trial_start\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"pause_collection_behavior\", \"datatype\": dbt.type_string()},\n    {\"name\": \"pause_collection_resumes_at\", \"datatype\": dbt.type_timestamp()},\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_float", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8545, "supported_languages": null}, "macro.stripe_source.get_payment_method_card_columns": {"name": "get_payment_method_card_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_payment_method_card_columns.sql", "original_file_path": "macros/get_payment_method_card_columns.sql", "unique_id": "macro.stripe_source.get_payment_method_card_columns", "macro_sql": "{% macro get_payment_method_card_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"brand\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"funding\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"wallet_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"three_d_secure_authentication_flow\", \"datatype\": dbt.type_string()},\n    {\"name\": \"three_d_secure_result\", \"datatype\": dbt.type_string()},\n    {\"name\": \"three_d_secure_result_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"three_d_secure_version\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8558521, "supported_languages": null}, "macro.stripe_source.get_charge_columns": {"name": "get_charge_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_charge_columns.sql", "original_file_path": "macros/get_charge_columns.sql", "unique_id": "macro.stripe_source.get_charge_columns", "macro_sql": "{% macro get_charge_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"amount_refunded\", \"datatype\": dbt.type_int()},\n    {\"name\": \"application\", \"datatype\": dbt.type_string()},\n    {\"name\": \"application_fee_amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"balance_transaction_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bank_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"calculated_statement_descriptor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"captured\", \"datatype\": \"boolean\"},\n    {\"name\": \"card_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"destination\", \"datatype\": dbt.type_string()},\n    {\"name\": \"failure_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"failure_message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fraud_details_stripe_report\", \"datatype\": dbt.type_string()},\n    {\"name\": \"fraud_details_user_report\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"on_behalf_of\", \"datatype\": dbt.type_string()},\n    {\"name\": \"outcome_network_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"outcome_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"outcome_risk_level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"outcome_risk_score\", \"datatype\": dbt.type_int()},\n    {\"name\": \"outcome_seller_message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"outcome_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"paid\", \"datatype\": \"boolean\"},\n    {\"name\": \"payment_intent_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"receipt_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"receipt_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"receipt_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refunded\", \"datatype\": \"boolean\"},\n    {\"name\": \"shipping_address_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_line_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_line_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_address_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_carrier\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_phone\", \"datatype\": dbt.type_string()},\n    {\"name\": \"shipping_tracking_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_transfer\", \"datatype\": dbt.type_string()},\n    {\"name\": \"statement_descriptor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transfer_data_destination\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transfer_group\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transfer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_address_city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_address_country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_address_line1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_address_line2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_address_postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_address_state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_detail_phone\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.864495, "supported_languages": null}, "macro.stripe_source.get_invoice_line_item_columns": {"name": "get_invoice_line_item_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_invoice_line_item_columns.sql", "original_file_path": "macros/get_invoice_line_item_columns.sql", "unique_id": "macro.stripe_source.get_invoice_line_item_columns", "macro_sql": "{% macro get_invoice_line_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discountable\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"period_end\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"period_start\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"price_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"proration\", \"datatype\": \"boolean\"},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unique_id\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8668869, "supported_languages": null}, "macro.stripe_source.does_table_exist": {"name": "does_table_exist", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/does_table_exist.sql", "original_file_path": "macros/does_table_exist.sql", "unique_id": "macro.stripe_source.does_table_exist", "macro_sql": "{%- macro does_table_exist(table_name) -%}\n    {%- if execute -%} -- returns true when dbt is in execute mode\n    {%- set ns = namespace(has_table=false) -%} -- declare boolean namespace and default value \n        {%- for node in graph.sources.values() -%} -- grab sources from the dictionary of nodes \n        -- call the database for the matching table\n            {%- set source_relation = adapter.get_relation(\n                    database=node.database,\n                    schema=node.schema,\n                    identifier=node.identifier ) -%} \n            {%- if source_relation == None and node.name | lower == table_name | lower -%} \n                {{ return(False) }} -- return false if relation identified by the database.schema.identifier does not exist for the given table name\n            {%- elif source_relation != None and node.name | lower == table_name | lower -%} \n                {{ return(True) }} -- otherwise return True \n            {% endif %}\n        {%- endfor -%}\n    {%- endif -%} \n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.867968, "supported_languages": null}, "macro.stripe_source.get_payment_intent_columns": {"name": "get_payment_intent_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_payment_intent_columns.sql", "original_file_path": "macros/get_payment_intent_columns.sql", "unique_id": "macro.stripe_source.get_payment_intent_columns", "macro_sql": "{% macro get_payment_intent_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"amount_capturable\", \"datatype\": dbt.type_int()},\n    {\"name\": \"amount_received\", \"datatype\": dbt.type_int()},\n    {\"name\": \"application\", \"datatype\": dbt.type_string()},\n    {\"name\": \"application_fee_amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"canceled_at\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"cancellation_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"capture_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"confirmation_method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_payment_error_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_payment_error_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_payment_error_decline_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_payment_error_doc_url\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_payment_error_message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_payment_error_param\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_payment_error_source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_payment_error_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"on_behalf_of\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"receipt_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"statement_descriptor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transfer_data_destination\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transfer_group\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.871839, "supported_languages": null}, "macro.stripe_source.get_fee_columns": {"name": "get_fee_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_fee_columns.sql", "original_file_path": "macros/get_fee_columns.sql", "unique_id": "macro.stripe_source.get_fee_columns", "macro_sql": "{% macro get_fee_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"application\", \"datatype\": dbt.type_string()},\n    {\"name\": \"balance_transaction_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.873052, "supported_languages": null}, "macro.stripe_source.get_balance_transaction_columns": {"name": "get_balance_transaction_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_balance_transaction_columns.sql", "original_file_path": "macros/get_balance_transaction_columns.sql", "unique_id": "macro.stripe_source.get_balance_transaction_columns", "macro_sql": "{% macro get_balance_transaction_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"available_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"fee\", \"datatype\": dbt.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"net\", \"datatype\": dbt.type_int()},\n    {\"name\": \"payout_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reporting_category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.874965, "supported_languages": null}, "macro.stripe_source.get_price_plan_columns": {"name": "get_price_plan_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_price_plan_columns.sql", "original_file_path": "macros/get_price_plan_columns.sql", "unique_id": "macro.stripe_source.get_price_plan_columns", "macro_sql": "{% macro get_price_plan_columns() %}\n\n{% if var('stripe__using_price', does_table_exist('price')) %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\",\"alias\": \"is_active\"},\n    {\"name\": \"billing_scheme\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"nickname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"recurring_aggregate_usage\", \"datatype\": dbt.type_string()},\n    {\"name\": \"recurring_interval\", \"datatype\": dbt.type_string()},\n    {\"name\": \"recurring_interval_count\", \"datatype\": dbt.type_int()},\n    {\"name\": \"recurring_usage_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unit_amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"unit_amount_decimal\", \"datatype\": dbt.type_string()}\n] %}\n\n{% else %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\",\"alias\": \"is_active\"},\n    {\"name\": \"aggregate_usage\", \"datatype\": dbt.type_string(),\"alias\": \"recurring_aggregate_usage\"},\n    {\"name\": \"amount\", \"datatype\": dbt.type_int(),\"alias\": \"unit_amount\"},\n    {\"name\": \"billing_scheme\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"interval_count\", \"datatype\": dbt.type_int(),\"alias\": \"recurring_interval_count\"},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"nickname\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"trial_period_days\", \"datatype\": dbt.type_int()},\n    {\"name\": \"usage_type\", \"datatype\": dbt.type_string(),\"alias\": \"recurring_usage_type\"}\n] %}\n\n{% if target.type in ('bigquery', 'spark', 'databricks') %}\n    {{ columns.append( {\"name\": 'interval', \"datatype\": dbt.type_string(), \"quote\": True, \"alias\": \"recurring_interval\" } ) }}\n\n{% else %}\n    {{ columns.append( {\"name\": \"interval\", \"datatype\": dbt.type_string(), \"alias\": \"recurring_interval\"} ) }}\n\n{% endif %}\n\n\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.stripe_source.does_table_exist", "macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.879766, "supported_languages": null}, "macro.stripe_source.get_payout_columns": {"name": "get_payout_columns", "resource_type": "macro", "package_name": "stripe_source", "path": "macros/get_payout_columns.sql", "original_file_path": "macros/get_payout_columns.sql", "unique_id": "macro.stripe_source.get_payout_columns", "macro_sql": "{% macro get_payout_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_int()},\n    {\"name\": \"arrival_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"automatic\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance_transaction_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"destination_bank_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"destination_card_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"failure_balance_transaction_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"failure_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"failure_message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt.type_string()},\n    {\"name\": \"method\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"statement_descriptor\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_int", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8824341, "supported_languages": null}, "macro.stripe.date_timezone": {"name": "date_timezone", "resource_type": "macro", "package_name": "stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "unique_id": "macro.stripe.date_timezone", "macro_sql": "{% macro date_timezone(column) -%}\n\n{{ adapter.dispatch('date_timezone', 'stripe')(column)  }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.stripe.bigquery__date_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.883816, "supported_languages": null}, "macro.stripe.bigquery__date_timezone": {"name": "bigquery__date_timezone", "resource_type": "macro", "package_name": "stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "unique_id": "macro.stripe.bigquery__date_timezone", "macro_sql": "{% macro bigquery__date_timezone(column) -%}\n\ndate(\n    {{ column }}\n    {% if var('stripe_timezone', none) %} , \"{{ var('stripe_timezone') }}\" {% endif %}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8840792, "supported_languages": null}, "macro.stripe.postgres__date_timezone": {"name": "postgres__date_timezone", "resource_type": "macro", "package_name": "stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "unique_id": "macro.stripe.postgres__date_timezone", "macro_sql": "{% macro postgres__date_timezone(column) -%}\n\n{% set converted_date %}\n\n{% if var('stripe_timezone', none) %}\n    {{ column }} at time zone '{{ var('stripe_timezone') }}'\n{% else %}\n    {{ column }}\n{% endif %}\n\n{% endset %}\n\n{{ dbt.date_trunc('day',converted_date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8844779, "supported_languages": null}, "macro.stripe.redshift__date_timezone": {"name": "redshift__date_timezone", "resource_type": "macro", "package_name": "stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "unique_id": "macro.stripe.redshift__date_timezone", "macro_sql": "{% macro redshift__date_timezone(column) -%}\n\n{% set converted_date %}\n\n{% if var('stripe_timezone', none) %}\n    convert_timezone('{{ var(\"stripe_timezone\") }}', {{ column }})\n{% else %}\n    {{ column }}\n{% endif %}\n\n{% endset %}\n\n{{ dbt.date_trunc('day',converted_date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.884876, "supported_languages": null}, "macro.stripe.default__date_timezone": {"name": "default__date_timezone", "resource_type": "macro", "package_name": "stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "unique_id": "macro.stripe.default__date_timezone", "macro_sql": "{% macro default__date_timezone(column) -%}\n\n{% set converted_date %}\n\n{% if var('stripe_timezone', none) %}\n    convert_timezone('{{ var(\"stripe_timezone\") }}', {{ column }})\n{% else %}\n    {{ column }}\n{% endif %}\n\n{% endset %}\n\n{{ dbt.date_trunc('day',converted_date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.885273, "supported_languages": null}, "macro.stripe.spark__date_timezone": {"name": "spark__date_timezone", "resource_type": "macro", "package_name": "stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "unique_id": "macro.stripe.spark__date_timezone", "macro_sql": "{% macro spark__date_timezone(column) -%}\n\n{% set converted_date %}\n\n{% if var('stripe_timezone', none) %}\n    from_utc_timestamp({{ column }}, '{{ var(\"stripe_timezone\") }}')\n{% else %}\n    {{ column }}\n{% endif %}\n\n{% endset %}\n\n{{ dbt.date_trunc('day',converted_date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1709229531.8856661, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.stripe_source._fivetran_synced": {"name": "_fivetran_synced", "resource_type": "doc", "package_name": "stripe_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.stripe_source._fivetran_synced", "block_contents": "The timestamp that Fivetran last synced the record."}, "doc.stripe_source.source_relation": {"name": "source_relation", "resource_type": "doc", "package_name": "stripe_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.stripe_source.source_relation", "block_contents": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string."}, "doc.stripe_source.created": {"name": "created", "resource_type": "doc", "package_name": "stripe_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.stripe_source.created", "block_contents": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided."}, "doc.stripe_source.created_at": {"name": "created_at", "resource_type": "doc", "package_name": "stripe_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.stripe_source.created_at", "block_contents": "Time at which the record was created. Dates in the requested timezone, or UTC if not provided."}, "doc.stripe_source.created_utc": {"name": "created_utc", "resource_type": "doc", "package_name": "stripe_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.stripe_source.created_utc", "block_contents": "Time at which the record was created. Dates in UTC."}, "doc.stripe_source.city": {"name": "city", "resource_type": "doc", "package_name": "stripe_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.stripe_source.city", "block_contents": "City, district, suburb, town, or village."}, "doc.stripe_source.country": {"name": "country", "resource_type": "doc", "package_name": "stripe_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.stripe_source.country", "block_contents": "Two-letter country code (ISO 3166-1 alpha-2)."}, "doc.stripe_source.line_1": {"name": "line_1", "resource_type": "doc", "package_name": "stripe_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.stripe_source.line_1", "block_contents": "Address line 1 (e.g., street, PO Box, or company name)."}, "doc.stripe_source.line_2": {"name": "line_2", "resource_type": "doc", "package_name": "stripe_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.stripe_source.line_2", "block_contents": "Address line 2 (e.g., apartment, suite, unit, or building)."}, "doc.stripe_source.postal_code": {"name": "postal_code", "resource_type": "doc", "package_name": "stripe_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.stripe_source.postal_code", "block_contents": "ZIP or postal code."}, "doc.stripe_source.state": {"name": "state", "resource_type": "doc", "package_name": "stripe_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.stripe_source.state", "block_contents": "State, county, province, or region."}, "doc.stripe.source_relation": {"name": "source_relation", "resource_type": "doc", "package_name": "stripe", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.stripe.source_relation", "block_contents": "The source where this data was pulled from. If you are making use of the `union_schemas` variable, this will be the source schema. If you are making use of the `union_databases` variable, this will be the source database. If you are not unioning together multiple sources, this will be an empty string."}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"model.stripe_source.stg_stripe__credit_note": [{"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__credit_note", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__credit_note.sql", "original_file_path": "models/stg_stripe__credit_note.sql", "unique_id": "model.stripe_source.stg_stripe__credit_note", "fqn": ["stripe_source", "stg_stripe__credit_note"], "alias": "stg_stripe__credit_note", "checksum": {"name": "sha256", "checksum": "2c638bef91430fe1e8b3f5a69c0456b87bc2739c5852359f5fa72253514e915a"}, "config": {"enabled": false, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Credit notes are documents that decrease the amount owed on an invoice. They\u2019re the only way to adjust the amount of a finalized invoice other than voiding and recreating the invoice.", "columns": {"credit_note_id": {"name": "credit_note_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_amount": {"name": "credit_note_amount", "description": "The integer amount in cents representing the total amount of the credit note, including tax.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the when the credit_note was created.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_currency": {"name": "credit_note_currency", "description": "The currency of the charge. Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_discount_amount": {"name": "credit_note_discount_amount", "description": "The integer amount in cents representing the total amount of discount that was credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_subtotal": {"name": "credit_note_subtotal", "description": "The integer amount in cents representing the amount of the credit note, excluding tax and invoice level discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_total": {"name": "credit_note_total", "description": "The integer amount in cents representing the total amount of the credit note, including tax and all discount.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Has the value true if the object exists in live mode or the value false if the object exists in test mode.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "memo": {"name": "memo", "description": "Customer-facing text that appears on the credit note PDF.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_number": {"name": "credit_note_number", "description": "A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pdf": {"name": "pdf", "description": "The link to download the PDF of the credit note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_reason": {"name": "credit_note_reason", "description": "Reason for issuing this credit note, one of duplicate, fraudulent, order_change, or product_unsatisfactory", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_status": {"name": "credit_note_status", "description": "Status of this credit note, one of issued or void.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_type": {"name": "credit_note_type", "description": "Type of this credit note, one of pre_payment or post_payment. A pre_payment credit note means it was issued when the invoice was open. A post_payment credit note means it was issued when the invoice was paid.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "voided_at": {"name": "voided_at", "description": "The time that the credit note was voided.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "customer_balance_transaction": {"name": "customer_balance_transaction", "description": "Customer balance transaction related to this credit note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with this credit note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "refund_id": {"name": "refund_id", "description": "The id of the refund associated with this credit note.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "{{ doc('source_relation') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": false}, "created_at": 1709229533.1782248, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__credit_note`", "raw_code": "{{ config(enabled=var('stripe__using_credit_notes', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__credit_note_tmp') }}\n\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__credit_note_tmp')),\n                staging_columns=get_credit_note_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas', \n            union_database_variable='stripe_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_note_id,\n        amount as credit_note_amount,\n        cast(created as {{ dbt.type_timestamp() }}) as created_at,\n        currency as credit_note_currency,\n        discount_amount as credit_note_discount_amount,\n        subtotal as credit_note_subtotal,\n        total as credit_note_total,\n        memo,\n        metadata,\n        number as credit_note_number,\n        pdf,\n        reason as credit_note_reason,\n        status as credit_note_status,\n        type as credit_note_type,\n        cast(voided_at as {{ dbt.type_timestamp() }}) as voided_at,\n        customer_balance_transaction,\n        invoice_id,\n        refund_id,\n        source_relation\n\n    from fields\n    {{ livemode_predicate() }}\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__credit_note_tmp", "package": null, "version": null}, {"name": "stg_stripe__credit_note_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_credit_note_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.dbt.type_timestamp", "macro.stripe_source.livemode_predicate"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.stripe_source.stg_stripe__credit_note_line_item": [{"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__credit_note_line_item", "resource_type": "model", "package_name": "stripe_source", "path": "stg_stripe__credit_note_line_item.sql", "original_file_path": "models/stg_stripe__credit_note_line_item.sql", "unique_id": "model.stripe_source.stg_stripe__credit_note_line_item", "fqn": ["stripe_source", "stg_stripe__credit_note_line_item"], "alias": "stg_stripe__credit_note_line_item", "checksum": {"name": "sha256", "checksum": "1546cb7732d39b0df3dfa9860e600af344554cad41cd00072432b0c013d7dfb6"}, "config": {"enabled": false, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "The different items that a credit note contains.", "columns": {"credit_note_line_item_id": {"name": "credit_note_line_item_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_id": {"name": "credit_note_id", "description": "The ID of the credit note this item is a part of.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_line_item_amount": {"name": "credit_note_line_item_amount", "description": "The integer amount in cents representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_line_item_discount_amount": {"name": "credit_note_line_item_discount_amount", "description": "The integer amount in cents representing the discount being credited for this line item.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_line_item_description": {"name": "credit_note_line_item_description", "description": "Description of the item being credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The number of units of product being credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_line_item_type": {"name": "credit_note_line_item_type", "description": "The type of the credit note line item, one of invoice_line_item or custom_line_item. When the type is invoice_line_item there is an additional invoice_line_item property on the resource the value of which is the id of the credited line item on the invoice.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "credit_note_line_item_unit_amount": {"name": "credit_note_line_item_unit_amount", "description": "The cost of each unit of product being credited.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Has the value true if the object exists in live mode or the value false if the object exists in test mode.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "source_relation": {"name": "source_relation", "description": "{{ doc('source_relation') }}", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "stripe_source://models/stg_stripe.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": false}, "created_at": 1709229533.1795, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__credit_note_line_item`", "raw_code": "{{ config(enabled=var('stripe__using_credit_notes', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__credit_note_line_item_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__credit_note_line_item_tmp')),\n                staging_columns=get_credit_note_line_item_columns()\n            )\n        }}\n\n        {{ fivetran_utils.source_relation(\n            union_schema_variable='stripe_union_schemas', \n            union_database_variable='stripe_union_databases') \n        }}\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_note_line_item_id,\n        credit_note_id,\n        amount as credit_note_line_item_amount,\n        discount_amount as credit_note_line_item_discount_amount,\n        description as credit_note_line_item_description,\n        quantity,\n        type as credit_note_line_item_type,\n        unit_amount as credit_note_line_item_unit_amount,\n        livemode,\n        source_relation\n\n    from fields\n    {{ livemode_predicate() }}\n)\n\nselect * \nfrom final", "language": "sql", "refs": [{"name": "stg_stripe__credit_note_line_item_tmp", "package": null, "version": null}, {"name": "stg_stripe__credit_note_line_item_tmp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.stripe_source.get_credit_note_line_item_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.source_relation", "macro.stripe_source.livemode_predicate"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.stripe_source.stg_stripe__credit_note_line_item_tmp": [{"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__credit_note_line_item_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__credit_note_line_item_tmp.sql", "original_file_path": "models/tmp/stg_stripe__credit_note_line_item_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__credit_note_line_item_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__credit_note_line_item_tmp"], "alias": "stg_stripe__credit_note_line_item_tmp", "checksum": {"name": "sha256", "checksum": "bdc93f817eafbcd2a2d727887707762245d97a1b931e8c602b549714acbb37d2"}, "config": {"enabled": false, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": false}, "created_at": 1709229532.823989, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__credit_note_line_item_tmp`", "raw_code": "{{ config(enabled=var('stripe__using_credit_notes', False)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='credit_note_line_item', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='credit_note_line_item',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "credit_note_line_item"], ["stripe", "credit_note_line_item"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}], "model.stripe_source.stg_stripe__credit_note_tmp": [{"database": "dbt-package-testing", "schema": "stripe_testing_stg_stripe", "name": "stg_stripe__credit_note_tmp", "resource_type": "model", "package_name": "stripe_source", "path": "tmp/stg_stripe__credit_note_tmp.sql", "original_file_path": "models/tmp/stg_stripe__credit_note_tmp.sql", "unique_id": "model.stripe_source.stg_stripe__credit_note_tmp", "fqn": ["stripe_source", "tmp", "stg_stripe__credit_note_tmp"], "alias": "stg_stripe__credit_note_tmp", "checksum": {"name": "sha256", "checksum": "b78c8f6c80bb22fc4a261bd65ff3bd1c6f5778c5807bf5bdbf55f43a03058680"}, "config": {"enabled": false, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": false}, "created_at": 1709229532.856519, "config_call_dict": {"enabled": false}, "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__credit_note_tmp`", "raw_code": "{{ config(enabled=var('stripe__using_credit_notes', False)) }}\n\n{{\n    fivetran_utils.union_data(\n        table_identifier='credit_note', \n        database_variable='stripe_database', \n        schema_variable='stripe_schema', \n        default_database=target.database,\n        default_schema='stripe',\n        default_variable='credit_note',\n        union_schema_variable='stripe_union_schemas',\n        union_database_variable='stripe_union_databases'\n    )\n}}", "language": "sql", "refs": [], "sources": [["stripe", "credit_note"], ["stripe", "credit_note"]], "metrics": [], "depends_on": {"macros": ["macro.fivetran_utils.union_data"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "defer_relation": null}]}, "parent_map": {"seed.stripe_integration_tests.fee_data": [], "seed.stripe_integration_tests.refund_data": [], "seed.stripe_integration_tests.invoice_data": [], "seed.stripe_integration_tests.invoice_line_item_data": [], "seed.stripe_integration_tests.price_data": [], "seed.stripe_integration_tests.dispute_data": [], "seed.stripe_integration_tests.credit_note_line_item_data": [], "seed.stripe_integration_tests.subscription_history_data": [], "seed.stripe_integration_tests.charge_data": [], "seed.stripe_integration_tests.balance_transaction_data": [], "seed.stripe_integration_tests.payment_method_data": [], "seed.stripe_integration_tests.plan_data": [], "seed.stripe_integration_tests.customer_data": [], "seed.stripe_integration_tests.card_data": [], "seed.stripe_integration_tests.payment_intent_data": [], "seed.stripe_integration_tests.payout_data": [], "seed.stripe_integration_tests.credit_note_data": [], "seed.stripe_integration_tests.account_data": [], "seed.stripe_integration_tests.transfer_data": [], "seed.stripe_integration_tests.payment_method_card_data": [], "seed.stripe_integration_tests.subscription_data": [], "model.stripe_source.stg_stripe__transfer": ["model.stripe_source.stg_stripe__transfer_tmp"], "model.stripe_source.stg_stripe__invoice_line_item": ["model.stripe_source.stg_stripe__invoice_line_item_tmp"], "model.stripe_source.stg_stripe__payment_intent": ["model.stripe_source.stg_stripe__payment_intent_tmp"], "model.stripe_source.stg_stripe__payment_method": ["model.stripe_source.stg_stripe__payment_method_tmp"], "model.stripe_source.stg_stripe__refund": ["model.stripe_source.stg_stripe__refund_tmp"], "model.stripe_source.stg_stripe__subscription": ["model.stripe_source.stg_stripe__subscription_tmp"], "model.stripe_source.stg_stripe__card": ["model.stripe_source.stg_stripe__card_tmp"], "model.stripe_source.stg_stripe__invoice": ["model.stripe_source.stg_stripe__invoice_tmp"], "model.stripe_source.stg_stripe__payout": ["model.stripe_source.stg_stripe__payout_tmp"], "model.stripe_source.stg_stripe__charge": ["model.stripe_source.stg_stripe__charge_tmp"], "model.stripe_source.stg_stripe__balance_transaction": ["model.stripe_source.stg_stripe__balance_transaction_tmp"], "model.stripe_source.stg_stripe__dispute": ["model.stripe_source.stg_stripe__dispute_tmp"], "model.stripe_source.stg_stripe__account": ["model.stripe_source.stg_stripe__account_tmp"], "model.stripe_source.stg_stripe__fee": ["model.stripe_source.stg_stripe__fee_tmp"], "model.stripe_source.stg_stripe__payment_method_card": ["model.stripe_source.stg_stripe__payment_method_card_tmp"], "model.stripe_source.stg_stripe__price_plan": ["model.stripe_source.stg_stripe__price_plan_tmp"], "model.stripe_source.stg_stripe__customer": ["model.stripe_source.stg_stripe__customer_tmp"], "model.stripe_source.stg_stripe__payment_method_card_tmp": ["source.stripe_source.stripe.payment_method_card"], "model.stripe_source.stg_stripe__payment_method_tmp": ["source.stripe_source.stripe.payment_method"], "model.stripe_source.stg_stripe__refund_tmp": ["source.stripe_source.stripe.refund"], "model.stripe_source.stg_stripe__transfer_tmp": ["source.stripe_source.stripe.transfer"], "model.stripe_source.stg_stripe__payout_tmp": ["source.stripe_source.stripe.payout"], "model.stripe_source.stg_stripe__invoice_tmp": ["source.stripe_source.stripe.invoice"], "model.stripe_source.stg_stripe__invoice_line_item_tmp": ["source.stripe_source.stripe.invoice_line_item"], "model.stripe_source.stg_stripe__dispute_tmp": ["source.stripe_source.stripe.dispute"], "model.stripe_source.stg_stripe__charge_tmp": ["source.stripe_source.stripe.charge"], "model.stripe_source.stg_stripe__price_plan_tmp": ["source.stripe_source.stripe.plan"], "model.stripe_source.stg_stripe__fee_tmp": ["source.stripe_source.stripe.fee"], "model.stripe_source.stg_stripe__account_tmp": ["source.stripe_source.stripe.account"], "model.stripe_source.stg_stripe__payment_intent_tmp": ["source.stripe_source.stripe.payment_intent"], "model.stripe_source.stg_stripe__card_tmp": ["source.stripe_source.stripe.card"], "model.stripe_source.stg_stripe__balance_transaction_tmp": ["source.stripe_source.stripe.balance_transaction"], "model.stripe_source.stg_stripe__customer_tmp": ["source.stripe_source.stripe.customer"], "model.stripe_source.stg_stripe__subscription_tmp": ["source.stripe_source.stripe.subscription"], "model.stripe.stripe__customer_overview": ["model.stripe.int_stripe__incomplete_charges", "model.stripe.stripe__balance_transactions", "model.stripe_source.stg_stripe__customer"], "model.stripe.stripe__balance_transactions": ["model.stripe_source.stg_stripe__account", "model.stripe_source.stg_stripe__balance_transaction", "model.stripe_source.stg_stripe__card", "model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__dispute", "model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__payment_intent", "model.stripe_source.stg_stripe__payment_method", "model.stripe_source.stg_stripe__payment_method_card", "model.stripe_source.stg_stripe__payout", "model.stripe_source.stg_stripe__refund", "model.stripe_source.stg_stripe__subscription", "model.stripe_source.stg_stripe__transfer"], "model.stripe.stripe__invoice_details": ["model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__price_plan", "model.stripe_source.stg_stripe__subscription"], "model.stripe.stripe__subscription_details": ["model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__subscription"], "model.stripe.stripe__invoice_line_item_details": ["model.stripe.stripe__invoice_details", "model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__price_plan", "model.stripe_source.stg_stripe__subscription"], "model.stripe.stripe__daily_overview": ["model.stripe.int_stripe__account_partitions"], "model.stripe.stripe__activity_itemized_2": ["model.stripe.stripe__balance_transactions"], "model.stripe.stripe__balance_change_from_activity_itemized_3": ["model.stripe.stripe__balance_transactions"], "model.stripe.stripe__payout_itemized_3": ["model.stripe.stripe__balance_transactions"], "model.stripe.stripe__ending_balance_reconciliation_itemized_4": ["model.stripe.stripe__balance_transactions"], "model.stripe.int_stripe__incomplete_charges": ["model.stripe_source.stg_stripe__charge"], "model.stripe.int_stripe__account_daily": ["model.stripe.int_stripe__date_spine", "model.stripe.int_stripe__incomplete_charges", "model.stripe.stripe__balance_transactions"], "model.stripe.int_stripe__account_rolling_totals": ["model.stripe.int_stripe__account_daily", "model.stripe.int_stripe__date_spine"], "model.stripe.int_stripe__account_partitions": ["model.stripe.int_stripe__account_rolling_totals"], "model.stripe.int_stripe__date_spine": ["model.stripe.stripe__balance_transactions", "model.stripe_source.stg_stripe__account"], "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f": ["model.stripe_source.stg_stripe__balance_transaction"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__balance_transaction_balance_transaction_id__source_relation.e83fa67eba": ["model.stripe_source.stg_stripe__balance_transaction"], "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a": ["model.stripe_source.stg_stripe__card"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__card_card_id__source_relation.6e04594797": ["model.stripe_source.stg_stripe__card"], "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a": ["model.stripe_source.stg_stripe__charge"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__charge_charge_id__source_relation.4616b292a1": ["model.stripe_source.stg_stripe__charge"], "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0": ["model.stripe_source.stg_stripe__customer"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__customer_customer_id__source_relation.3fa0f43271": ["model.stripe_source.stg_stripe__customer"], "test.stripe_source.not_null_stg_stripe__fee_balance_transaction_id.725d4ac005": ["model.stripe_source.stg_stripe__fee"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__fee_balance_transaction_id__index__source_relation.d2b1cfff07": ["model.stripe_source.stg_stripe__fee"], "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb": ["model.stripe_source.stg_stripe__payment_intent"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_intent_payment_intent_id__source_relation.046730da02": ["model.stripe_source.stg_stripe__payment_intent"], "test.stripe_source.not_null_stg_stripe__payment_method_card_payment_method_id.f246b11438": ["model.stripe_source.stg_stripe__payment_method_card"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_card_payment_method_id__source_relation.fe1f48acd0": ["model.stripe_source.stg_stripe__payment_method_card"], "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471": ["model.stripe_source.stg_stripe__payment_method"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_payment_method_id__source_relation.02a8143517": ["model.stripe_source.stg_stripe__payment_method"], "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc": ["model.stripe_source.stg_stripe__payout"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payout_payout_id__source_relation.f9897a29ec": ["model.stripe_source.stg_stripe__payout"], "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0": ["model.stripe_source.stg_stripe__refund"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__refund_refund_id__source_relation.93aa6111ec": ["model.stripe_source.stg_stripe__refund"], "test.stripe_source.not_null_stg_stripe__invoice_line_item_invoice_line_item_id.5b9c83b5f3": ["model.stripe_source.stg_stripe__invoice_line_item"], "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_invoice_line_item_id.a59523b7b7": ["model.stripe_source.stg_stripe__invoice_line_item"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_line_item_invoice_line_item_id__invoice_id__source_relation.d2ff4b8aed": ["model.stripe_source.stg_stripe__invoice_line_item"], "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095": ["model.stripe_source.stg_stripe__invoice"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_invoice_id__source_relation.f632654e72": ["model.stripe_source.stg_stripe__invoice"], "test.stripe_source.not_null_stg_stripe__subscription_subscription_id.b242b1f7bc": ["model.stripe_source.stg_stripe__subscription"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__subscription_subscription_id__source_relation.1b87d4205c": ["model.stripe_source.stg_stripe__subscription"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__price_plan_price_plan_id__source_relation.3d189cd99d": ["model.stripe_source.stg_stripe__price_plan"], "test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__credit_note_credit_note_id__source_relation.ae67150efb": [], "test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__credit_note_line_item_credit_note_line_item_id__source_relation.0d59ab0d29": [], "test.stripe_source.not_null_stg_stripe__account_account_id.374858379a": ["model.stripe_source.stg_stripe__account"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__account_account_id__source_relation.822bb93896": ["model.stripe_source.stg_stripe__account"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__dispute_dispute_id__source_relation.3fe3205476": ["model.stripe_source.stg_stripe__dispute"], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__transfer_transfer_id__source_relation.ade160ba67": ["model.stripe_source.stg_stripe__transfer"], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_transactions_balance_transaction_id__source_relation.e7b1075064": ["model.stripe.stripe__balance_transactions"], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_details_invoice_id__source_relation.77a5fcff44": ["model.stripe.stripe__invoice_details"], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_line_item_details_invoice_line_item_id__invoice_id__source_relation.c9a57418fb": ["model.stripe.stripe__invoice_line_item_details"], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__subscription_details_subscription_id__source_relation.a1aa0c421a": ["model.stripe.stripe__subscription_details"], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__daily_overview_account_id__date_day__source_relation.81c846ac71": ["model.stripe.stripe__daily_overview"], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__activity_itemized_2_balance_transaction_id__source_relation.bfde3a7d9b": ["model.stripe.stripe__activity_itemized_2"], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_change_from_activity_itemized_3_balance_transaction_id__source_relation.042900aa7d": ["model.stripe.stripe__balance_change_from_activity_itemized_3"], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__ending_balance_reconciliation_itemized_4_automatic_payout_id__source_relation.a4e66a7386": ["model.stripe.stripe__ending_balance_reconciliation_itemized_4"], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__payout_itemized_3_payout_id__source_relation.db08f37862": ["model.stripe.stripe__payout_itemized_3"], "source.stripe_source.stripe.balance_transaction": [], "source.stripe_source.stripe.card": [], "source.stripe_source.stripe.charge": [], "source.stripe_source.stripe.customer": [], "source.stripe_source.stripe.dispute": [], "source.stripe_source.stripe.fee": [], "source.stripe_source.stripe.payment_intent": [], "source.stripe_source.stripe.payment_method_card": [], "source.stripe_source.stripe.payment_method": [], "source.stripe_source.stripe.payout": [], "source.stripe_source.stripe.refund": [], "source.stripe_source.stripe.invoice_line_item": [], "source.stripe_source.stripe.invoice": [], "source.stripe_source.stripe.subscription_history": [], "source.stripe_source.stripe.subscription": [], "source.stripe_source.stripe.plan": [], "source.stripe_source.stripe.credit_note": [], "source.stripe_source.stripe.credit_note_line_item": [], "source.stripe_source.stripe.price": [], "source.stripe_source.stripe.account": [], "source.stripe_source.stripe.transfer": []}, "child_map": {"seed.stripe_integration_tests.fee_data": [], "seed.stripe_integration_tests.refund_data": [], "seed.stripe_integration_tests.invoice_data": [], "seed.stripe_integration_tests.invoice_line_item_data": [], "seed.stripe_integration_tests.price_data": [], "seed.stripe_integration_tests.dispute_data": [], "seed.stripe_integration_tests.credit_note_line_item_data": [], "seed.stripe_integration_tests.subscription_history_data": [], "seed.stripe_integration_tests.charge_data": [], "seed.stripe_integration_tests.balance_transaction_data": [], "seed.stripe_integration_tests.payment_method_data": [], "seed.stripe_integration_tests.plan_data": [], "seed.stripe_integration_tests.customer_data": [], "seed.stripe_integration_tests.card_data": [], "seed.stripe_integration_tests.payment_intent_data": [], "seed.stripe_integration_tests.payout_data": [], "seed.stripe_integration_tests.credit_note_data": [], "seed.stripe_integration_tests.account_data": [], "seed.stripe_integration_tests.transfer_data": [], "seed.stripe_integration_tests.payment_method_card_data": [], "seed.stripe_integration_tests.subscription_data": [], "model.stripe_source.stg_stripe__transfer": ["model.stripe.stripe__balance_transactions", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__transfer_transfer_id__source_relation.ade160ba67"], "model.stripe_source.stg_stripe__invoice_line_item": ["model.stripe.stripe__invoice_details", "model.stripe.stripe__invoice_line_item_details", "model.stripe.stripe__subscription_details", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_line_item_invoice_line_item_id__invoice_id__source_relation.d2ff4b8aed", "test.stripe_source.not_null_stg_stripe__invoice_line_item_invoice_line_item_id.5b9c83b5f3", "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_invoice_line_item_id.a59523b7b7"], "model.stripe_source.stg_stripe__payment_intent": ["model.stripe.stripe__balance_transactions", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_intent_payment_intent_id__source_relation.046730da02", "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb"], "model.stripe_source.stg_stripe__payment_method": ["model.stripe.stripe__balance_transactions", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_payment_method_id__source_relation.02a8143517", "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471"], "model.stripe_source.stg_stripe__refund": ["model.stripe.stripe__balance_transactions", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__refund_refund_id__source_relation.93aa6111ec", "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0"], "model.stripe_source.stg_stripe__subscription": ["model.stripe.stripe__balance_transactions", "model.stripe.stripe__invoice_details", "model.stripe.stripe__invoice_line_item_details", "model.stripe.stripe__subscription_details", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__subscription_subscription_id__source_relation.1b87d4205c", "test.stripe_source.not_null_stg_stripe__subscription_subscription_id.b242b1f7bc"], "model.stripe_source.stg_stripe__card": ["model.stripe.stripe__balance_transactions", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__card_card_id__source_relation.6e04594797", "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a"], "model.stripe_source.stg_stripe__invoice": ["model.stripe.stripe__balance_transactions", "model.stripe.stripe__invoice_details", "model.stripe.stripe__subscription_details", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_invoice_id__source_relation.f632654e72", "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095"], "model.stripe_source.stg_stripe__payout": ["model.stripe.stripe__balance_transactions", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payout_payout_id__source_relation.f9897a29ec", "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc"], "model.stripe_source.stg_stripe__charge": ["model.stripe.int_stripe__incomplete_charges", "model.stripe.stripe__balance_transactions", "model.stripe.stripe__invoice_details", "model.stripe.stripe__subscription_details", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__charge_charge_id__source_relation.4616b292a1", "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a"], "model.stripe_source.stg_stripe__balance_transaction": ["model.stripe.stripe__balance_transactions", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__balance_transaction_balance_transaction_id__source_relation.e83fa67eba", "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f"], "model.stripe_source.stg_stripe__dispute": ["model.stripe.stripe__balance_transactions", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__dispute_dispute_id__source_relation.3fe3205476"], "model.stripe_source.stg_stripe__account": ["model.stripe.int_stripe__date_spine", "model.stripe.stripe__balance_transactions", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__account_account_id__source_relation.822bb93896", "test.stripe_source.not_null_stg_stripe__account_account_id.374858379a"], "model.stripe_source.stg_stripe__fee": ["test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__fee_balance_transaction_id__index__source_relation.d2b1cfff07", "test.stripe_source.not_null_stg_stripe__fee_balance_transaction_id.725d4ac005"], "model.stripe_source.stg_stripe__payment_method_card": ["model.stripe.stripe__balance_transactions", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_card_payment_method_id__source_relation.fe1f48acd0", "test.stripe_source.not_null_stg_stripe__payment_method_card_payment_method_id.f246b11438"], "model.stripe_source.stg_stripe__price_plan": ["model.stripe.stripe__invoice_details", "model.stripe.stripe__invoice_line_item_details", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__price_plan_price_plan_id__source_relation.3d189cd99d"], "model.stripe_source.stg_stripe__customer": ["model.stripe.stripe__balance_transactions", "model.stripe.stripe__customer_overview", "model.stripe.stripe__invoice_details", "model.stripe.stripe__subscription_details", "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__customer_customer_id__source_relation.3fa0f43271", "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0"], "model.stripe_source.stg_stripe__payment_method_card_tmp": ["model.stripe_source.stg_stripe__payment_method_card"], "model.stripe_source.stg_stripe__payment_method_tmp": ["model.stripe_source.stg_stripe__payment_method"], "model.stripe_source.stg_stripe__refund_tmp": ["model.stripe_source.stg_stripe__refund"], "model.stripe_source.stg_stripe__transfer_tmp": ["model.stripe_source.stg_stripe__transfer"], "model.stripe_source.stg_stripe__payout_tmp": ["model.stripe_source.stg_stripe__payout"], "model.stripe_source.stg_stripe__invoice_tmp": ["model.stripe_source.stg_stripe__invoice"], "model.stripe_source.stg_stripe__invoice_line_item_tmp": ["model.stripe_source.stg_stripe__invoice_line_item"], "model.stripe_source.stg_stripe__dispute_tmp": ["model.stripe_source.stg_stripe__dispute"], "model.stripe_source.stg_stripe__charge_tmp": ["model.stripe_source.stg_stripe__charge"], "model.stripe_source.stg_stripe__price_plan_tmp": ["model.stripe_source.stg_stripe__price_plan"], "model.stripe_source.stg_stripe__fee_tmp": ["model.stripe_source.stg_stripe__fee"], "model.stripe_source.stg_stripe__account_tmp": ["model.stripe_source.stg_stripe__account"], "model.stripe_source.stg_stripe__payment_intent_tmp": ["model.stripe_source.stg_stripe__payment_intent"], "model.stripe_source.stg_stripe__card_tmp": ["model.stripe_source.stg_stripe__card"], "model.stripe_source.stg_stripe__balance_transaction_tmp": ["model.stripe_source.stg_stripe__balance_transaction"], "model.stripe_source.stg_stripe__customer_tmp": ["model.stripe_source.stg_stripe__customer"], "model.stripe_source.stg_stripe__subscription_tmp": ["model.stripe_source.stg_stripe__subscription"], "model.stripe.stripe__customer_overview": [], "model.stripe.stripe__balance_transactions": ["model.stripe.int_stripe__account_daily", "model.stripe.int_stripe__date_spine", "model.stripe.stripe__activity_itemized_2", "model.stripe.stripe__balance_change_from_activity_itemized_3", "model.stripe.stripe__customer_overview", "model.stripe.stripe__ending_balance_reconciliation_itemized_4", "model.stripe.stripe__payout_itemized_3", "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_transactions_balance_transaction_id__source_relation.e7b1075064"], "model.stripe.stripe__invoice_details": ["model.stripe.stripe__invoice_line_item_details", "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_details_invoice_id__source_relation.77a5fcff44"], "model.stripe.stripe__subscription_details": ["test.stripe.dbt_utils_unique_combination_of_columns_stripe__subscription_details_subscription_id__source_relation.a1aa0c421a"], "model.stripe.stripe__invoice_line_item_details": ["test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_line_item_details_invoice_line_item_id__invoice_id__source_relation.c9a57418fb"], "model.stripe.stripe__daily_overview": ["test.stripe.dbt_utils_unique_combination_of_columns_stripe__daily_overview_account_id__date_day__source_relation.81c846ac71"], "model.stripe.stripe__activity_itemized_2": ["test.stripe.dbt_utils_unique_combination_of_columns_stripe__activity_itemized_2_balance_transaction_id__source_relation.bfde3a7d9b"], "model.stripe.stripe__balance_change_from_activity_itemized_3": ["test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_change_from_activity_itemized_3_balance_transaction_id__source_relation.042900aa7d"], "model.stripe.stripe__payout_itemized_3": ["test.stripe.dbt_utils_unique_combination_of_columns_stripe__payout_itemized_3_payout_id__source_relation.db08f37862"], "model.stripe.stripe__ending_balance_reconciliation_itemized_4": ["test.stripe.dbt_utils_unique_combination_of_columns_stripe__ending_balance_reconciliation_itemized_4_automatic_payout_id__source_relation.a4e66a7386"], "model.stripe.int_stripe__incomplete_charges": ["model.stripe.int_stripe__account_daily", "model.stripe.stripe__customer_overview"], "model.stripe.int_stripe__account_daily": ["model.stripe.int_stripe__account_rolling_totals"], "model.stripe.int_stripe__account_rolling_totals": ["model.stripe.int_stripe__account_partitions"], "model.stripe.int_stripe__account_partitions": ["model.stripe.stripe__daily_overview"], "model.stripe.int_stripe__date_spine": ["model.stripe.int_stripe__account_daily", "model.stripe.int_stripe__account_rolling_totals"], "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__balance_transaction_balance_transaction_id__source_relation.e83fa67eba": [], "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__card_card_id__source_relation.6e04594797": [], "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__charge_charge_id__source_relation.4616b292a1": [], "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__customer_customer_id__source_relation.3fa0f43271": [], "test.stripe_source.not_null_stg_stripe__fee_balance_transaction_id.725d4ac005": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__fee_balance_transaction_id__index__source_relation.d2b1cfff07": [], "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_intent_payment_intent_id__source_relation.046730da02": [], "test.stripe_source.not_null_stg_stripe__payment_method_card_payment_method_id.f246b11438": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_card_payment_method_id__source_relation.fe1f48acd0": [], "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_payment_method_id__source_relation.02a8143517": [], "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payout_payout_id__source_relation.f9897a29ec": [], "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__refund_refund_id__source_relation.93aa6111ec": [], "test.stripe_source.not_null_stg_stripe__invoice_line_item_invoice_line_item_id.5b9c83b5f3": [], "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_invoice_line_item_id.a59523b7b7": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_line_item_invoice_line_item_id__invoice_id__source_relation.d2ff4b8aed": [], "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_invoice_id__source_relation.f632654e72": [], "test.stripe_source.not_null_stg_stripe__subscription_subscription_id.b242b1f7bc": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__subscription_subscription_id__source_relation.1b87d4205c": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__price_plan_price_plan_id__source_relation.3d189cd99d": [], "test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__credit_note_credit_note_id__source_relation.ae67150efb": [], "test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__credit_note_line_item_credit_note_line_item_id__source_relation.0d59ab0d29": [], "test.stripe_source.not_null_stg_stripe__account_account_id.374858379a": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__account_account_id__source_relation.822bb93896": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__dispute_dispute_id__source_relation.3fe3205476": [], "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__transfer_transfer_id__source_relation.ade160ba67": [], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_transactions_balance_transaction_id__source_relation.e7b1075064": [], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_details_invoice_id__source_relation.77a5fcff44": [], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_line_item_details_invoice_line_item_id__invoice_id__source_relation.c9a57418fb": [], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__subscription_details_subscription_id__source_relation.a1aa0c421a": [], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__daily_overview_account_id__date_day__source_relation.81c846ac71": [], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__activity_itemized_2_balance_transaction_id__source_relation.bfde3a7d9b": [], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_change_from_activity_itemized_3_balance_transaction_id__source_relation.042900aa7d": [], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__ending_balance_reconciliation_itemized_4_automatic_payout_id__source_relation.a4e66a7386": [], "test.stripe.dbt_utils_unique_combination_of_columns_stripe__payout_itemized_3_payout_id__source_relation.db08f37862": [], "source.stripe_source.stripe.balance_transaction": ["model.stripe_source.stg_stripe__balance_transaction_tmp"], "source.stripe_source.stripe.card": ["model.stripe_source.stg_stripe__card_tmp"], "source.stripe_source.stripe.charge": ["model.stripe_source.stg_stripe__charge_tmp"], "source.stripe_source.stripe.customer": ["model.stripe_source.stg_stripe__customer_tmp"], "source.stripe_source.stripe.dispute": ["model.stripe_source.stg_stripe__dispute_tmp"], "source.stripe_source.stripe.fee": ["model.stripe_source.stg_stripe__fee_tmp"], "source.stripe_source.stripe.payment_intent": ["model.stripe_source.stg_stripe__payment_intent_tmp"], "source.stripe_source.stripe.payment_method_card": ["model.stripe_source.stg_stripe__payment_method_card_tmp"], "source.stripe_source.stripe.payment_method": ["model.stripe_source.stg_stripe__payment_method_tmp"], "source.stripe_source.stripe.payout": ["model.stripe_source.stg_stripe__payout_tmp"], "source.stripe_source.stripe.refund": ["model.stripe_source.stg_stripe__refund_tmp"], "source.stripe_source.stripe.invoice_line_item": ["model.stripe_source.stg_stripe__invoice_line_item_tmp"], "source.stripe_source.stripe.invoice": ["model.stripe_source.stg_stripe__invoice_tmp"], "source.stripe_source.stripe.subscription_history": [], "source.stripe_source.stripe.subscription": ["model.stripe_source.stg_stripe__subscription_tmp"], "source.stripe_source.stripe.plan": ["model.stripe_source.stg_stripe__price_plan_tmp"], "source.stripe_source.stripe.credit_note": [], "source.stripe_source.stripe.credit_note_line_item": [], "source.stripe_source.stripe.price": [], "source.stripe_source.stripe.account": ["model.stripe_source.stg_stripe__account_tmp"], "source.stripe_source.stripe.transfer": ["model.stripe_source.stg_stripe__transfer_tmp"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}