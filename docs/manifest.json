{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.4", "generated_at": "2022-05-13T21:22:17.707885Z", "invocation_id": "d93933fd-c639-49df-b741-a4ab1e43e7a7", "env": {}, "project_id": "109848508b1db9729face71a82e6e37e", "user_id": "8929baf0-9bc1-477e-9a57-eb8b0db4da62", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"seed.stripe_integration_tests.fee_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "fee_data"], "unique_id": "seed.stripe_integration_tests.fee_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "fee_data.csv", "original_file_path": "seeds/fee_data.csv", "name": "fee_data", "alias": "fee_data", "checksum": {"name": "sha256", "checksum": "2c64d3edd42b0a1c03170433aab3cb53ddc0efe4eb3b57cd1b812f95f3326868"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1652476919.822146, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"fee_data\""}, "seed.stripe_integration_tests.refund_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "refund_data"], "unique_id": "seed.stripe_integration_tests.refund_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "refund_data.csv", "original_file_path": "seeds/refund_data.csv", "name": "refund_data", "alias": "refund_data", "checksum": {"name": "sha256", "checksum": "575a1f94a98f44007083067500829012c319540d0ead9c9adbe740385616e440"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1652476919.8273191, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"refund_data\""}, "seed.stripe_integration_tests.invoice_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "invoice_data"], "unique_id": "seed.stripe_integration_tests.invoice_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "invoice_data.csv", "original_file_path": "seeds/invoice_data.csv", "name": "invoice_data", "alias": "invoice_data", "checksum": {"name": "sha256", "checksum": "ec5a9207dc0326f8c192289c180c7915c1a0e3ce4e1b60d2966fc9bab89d2ae0"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1652476919.8282099, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"invoice_data\""}, "seed.stripe_integration_tests.invoice_line_item_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "invoice_line_item_data"], "unique_id": "seed.stripe_integration_tests.invoice_line_item_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "invoice_line_item_data.csv", "original_file_path": "seeds/invoice_line_item_data.csv", "name": "invoice_line_item_data", "alias": "invoice_line_item_data", "checksum": {"name": "sha256", "checksum": "9b5c5eb93ca737778a500d1125725b028bd0feb0da25c17a3cd139942276b50d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1652476919.8290539, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"invoice_line_item_data\""}, "seed.stripe_integration_tests.subscription_history_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "subscription_history_data"], "unique_id": "seed.stripe_integration_tests.subscription_history_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "subscription_history_data.csv", "original_file_path": "seeds/subscription_history_data.csv", "name": "subscription_history_data", "alias": "subscription_history_data", "checksum": {"name": "sha256", "checksum": "0700c3a49531312d80c5e65fbd68c9ce172d5f7e1d0b1962f5b6d38a30534250"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1652476919.829899, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"subscription_history_data\""}, "seed.stripe_integration_tests.charge_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "balance_transaction_id": "varchar(250)", "created": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "charge_data"], "unique_id": "seed.stripe_integration_tests.charge_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "charge_data.csv", "original_file_path": "seeds/charge_data.csv", "name": "charge_data", "alias": "charge_data", "checksum": {"name": "sha256", "checksum": "54dd0be939dc55a61a2031abc9c8a201f34ef04c546a9db8dbd73551723cfb44"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"balance_transaction_id": "{{ 'varchar(250)' if target.type in ('redshift','postgres') else 'string'}}", "created": "timestamp"}}, "created_at": 1652476919.830849, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"charge_data\""}, "seed.stripe_integration_tests.balance_transaction_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "created": "timestamp", "available_on": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "balance_transaction_data"], "unique_id": "seed.stripe_integration_tests.balance_transaction_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "balance_transaction_data.csv", "original_file_path": "seeds/balance_transaction_data.csv", "name": "balance_transaction_data", "alias": "balance_transaction_data", "checksum": {"name": "sha256", "checksum": "4a5058283b9c973d8b72ec8f71f9358df2cb7764dc40d1977e253178e5f2b68e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"created": "timestamp", "available_on": "timestamp"}}, "created_at": 1652476919.8317282, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"balance_transaction_data\""}, "seed.stripe_integration_tests.payment_method_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "payment_method_data"], "unique_id": "seed.stripe_integration_tests.payment_method_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "payment_method_data.csv", "original_file_path": "seeds/payment_method_data.csv", "name": "payment_method_data", "alias": "payment_method_data", "checksum": {"name": "sha256", "checksum": "fed06046c1179ee28f73b719380c71cafe40a8757f1f9f25008c0407f858f171"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1652476919.832591, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"payment_method_data\""}, "seed.stripe_integration_tests.plan_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "plan_data"], "unique_id": "seed.stripe_integration_tests.plan_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "plan_data.csv", "original_file_path": "seeds/plan_data.csv", "name": "plan_data", "alias": "plan_data", "checksum": {"name": "sha256", "checksum": "935ba255a52fc82615c4045ff404f3ee632474fcee6a74499a397df902411984"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1652476919.8334248, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"plan_data\""}, "seed.stripe_integration_tests.customer_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "description": "varchar(500)"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "customer_data"], "unique_id": "seed.stripe_integration_tests.customer_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "customer_data.csv", "original_file_path": "seeds/customer_data.csv", "name": "customer_data", "alias": "customer_data", "checksum": {"name": "sha256", "checksum": "22437dfa3694f0d318625811f05e776c9ab800c13b42988b95809678ba88d651"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"description": "{{ 'varchar(500)' if target.type in ('redshift','postgres') else 'string'}}"}}, "created_at": 1652476919.8343701, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"customer_data\""}, "seed.stripe_integration_tests.card_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "card_data"], "unique_id": "seed.stripe_integration_tests.card_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "card_data.csv", "original_file_path": "seeds/card_data.csv", "name": "card_data", "alias": "card_data", "checksum": {"name": "sha256", "checksum": "56dddc61c353d2e3c49a78b421025e099411c19c2fa3633ca6eb67a36897f74f"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1652476919.8352242, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"card_data\""}, "seed.stripe_integration_tests.payment_intent_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "payment_intent_data"], "unique_id": "seed.stripe_integration_tests.payment_intent_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "payment_intent_data.csv", "original_file_path": "seeds/payment_intent_data.csv", "name": "payment_intent_data", "alias": "payment_intent_data", "checksum": {"name": "sha256", "checksum": "52f81694f86d67069340156a0d6ad2685e05f53352ffcfa0cc07902c18d0c084"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1652476919.836053, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"payment_intent_data\""}, "seed.stripe_integration_tests.payout_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "payout_data"], "unique_id": "seed.stripe_integration_tests.payout_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "payout_data.csv", "original_file_path": "seeds/payout_data.csv", "name": "payout_data", "alias": "payout_data", "checksum": {"name": "sha256", "checksum": "1e2ed7b8f8152641d7bedb438b7fb1a78fb897164a75511ff8e9da5ae77df5ff"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1652476919.836888, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"payout_data\""}, "seed.stripe_integration_tests.payment_method_card_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "payment_method_card_data"], "unique_id": "seed.stripe_integration_tests.payment_method_card_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "payment_method_card_data.csv", "original_file_path": "seeds/payment_method_card_data.csv", "name": "payment_method_card_data", "alias": "payment_method_card_data", "checksum": {"name": "sha256", "checksum": "41a235914b6f9a704792d779d74bce5f5810c9091bfe2e246232081bfdded372"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1652476919.837715, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"payment_method_card_data\""}, "seed.stripe_integration_tests.subscription_data": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests", "fqn": ["stripe_integration_tests", "subscription_data"], "unique_id": "seed.stripe_integration_tests.subscription_data", "package_name": "stripe_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests", "path": "subscription_data.csv", "original_file_path": "seeds/subscription_data.csv", "name": "subscription_data", "alias": "subscription_data", "checksum": {"name": "sha256", "checksum": "9963744a1f45602c27e4c4090348f5f26da54ddf9c25ae91435826d0e6889239"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"quote_columns": "{{ true if target.type in ('redshift','postgres') else false }}", "column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1652476919.838635, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests\".\"subscription_data\""}, "model.stripe_source.stg_stripe__invoice_line_item": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__invoice_line_item_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__invoice_line_item_tmp')),\n                staging_columns=get_invoice_line_item_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_line_item_id,\n        invoice_id,\n        amount,\n        currency,\n        description,\n        discountable as is_discountable,\n        plan_id,\n        proration,\n        quantity,\n        subscription_id,\n        subscription_item_id,\n        type,\n        unique_id,\n        period_start,\n        period_end\n    from fields\n\n    {% if var('using_invoice_line_sub_filter', true) %}\n    where id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n    {% endif %}\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_invoice_line_item_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__invoice_line_item_tmp", "model.stripe_source.stg_stripe__invoice_line_item_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__invoice_line_item"], "unique_id": "model.stripe_source.stg_stripe__invoice_line_item", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__invoice_line_item.sql", "original_file_path": "models/stg_stripe__invoice_line_item.sql", "name": "stg_stripe__invoice_line_item", "alias": "stg_stripe__invoice_line_item", "checksum": {"name": "sha256", "checksum": "2d5b7206d5e6902ff0d18a5f495af92512f0c0020278f77b8f7d71bb6541188a"}, "tags": [], "refs": [["stg_stripe__invoice_line_item_tmp"], ["stg_stripe__invoice_line_item_tmp"]], "sources": [], "description": "The different items that an invoice contains", "columns": {"invoice_line_item_id": {"name": "invoice_line_item_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The ID of the invoice this item is a part of", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_discountable": {"name": "is_discountable", "description": "If true, discounts will apply to this line item. Always false for prorations.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The ID of the plan of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "proration": {"name": "proration", "description": "Whether this is a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The ID of the subscription that the invoice item pertains to, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_item_id": {"name": "subscription_item_id", "description": "The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "A string identifying the type of the source of this line item, either an invoice item or a subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_id": {"name": "unique_id", "description": "A unique id generated for old invoice ID's from a past version of the API", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__invoice_line_item.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": true}, "created_at": 1652476920.2054331, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__invoice_line_item_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discountable\n    \n as \n    \n    discountable\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    \n    \n    proration\n    \n as \n    \n    proration\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    subscription_item_id\n    \n as \n    \n    subscription_item_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unique_id\n    \n as \n    \n    unique_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_line_item_id,\n        invoice_id,\n        amount,\n        currency,\n        description,\n        discountable as is_discountable,\n        plan_id,\n        proration,\n        quantity,\n        subscription_id,\n        subscription_item_id,\n        type,\n        unique_id,\n        period_start,\n        period_end\n    from fields\n\n    \n    where id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n    \n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__invoice_line_item\""}, "model.stripe_source.stg_stripe__payment_intent": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__payment_intent_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__payment_intent_tmp')),\n                staging_columns=get_payment_intent_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_intent_id,\n        amount,\n        amount_capturable,\n        amount_received,\n        application,\n        application_fee_amount,\n        canceled_at,\n        cancellation_reason,\n        capture_method,\n        confirmation_method,\n        created as created_at,\n        currency,\n        customer_id,\n        description,\n        metadata,\n        payment_method_id,\n        receipt_email,\n        statement_descriptor,\n        status\n\n        {% if var('stripe__payment_intent_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__payment_intent_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_payment_intent_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__payment_intent_tmp", "model.stripe_source.stg_stripe__payment_intent_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__payment_intent"], "unique_id": "model.stripe_source.stg_stripe__payment_intent", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__payment_intent.sql", "original_file_path": "models/stg_stripe__payment_intent.sql", "name": "stg_stripe__payment_intent", "alias": "stg_stripe__payment_intent", "checksum": {"name": "sha256", "checksum": "e3b6323e9c978d72576a7c4e89e10e8e304b6eda9242f9bb602d503add644cd8"}, "tags": [], "refs": [["stg_stripe__payment_intent_tmp"], ["stg_stripe__payment_intent_tmp"]], "sources": [], "description": "A Payment Intent guides you through the process of collecting a payment from your customer.", "columns": {"payment_intent_id": {"name": "payment_intent_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_capturable": {"name": "amount_capturable", "description": "Amount that can be captured from this PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_received": {"name": "amount_received", "description": "Amount that was collected by this PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that created the PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the resulting payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "Populated when status is canceled, this is the time at which the PaymentIntent was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancellation_reason": {"name": "cancellation_reason", "description": "Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "capture_method": {"name": "capture_method", "description": "Controls when the funds will be captured from the customer\u2019s account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "confirmation_method": {"name": "confirmation_method", "description": "Whether confirmed automatically or manually", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the Customer this PaymentIntent belongs to, if one exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method used in this PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "Email address that the receipt for the resulting payment will be sent to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statement_descriptor": {"name": "statement_descriptor", "description": "For non-card charges, you can use this value as the complete description that appears on your customers\u2019 statements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__payment_intent.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1652476920.1985438, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_intent_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_capturable\n    \n as \n    \n    amount_capturable\n    \n, \n    \n    \n    amount_received\n    \n as \n    \n    amount_received\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    capture_method\n    \n as \n    \n    capture_method\n    \n, \n    \n    \n    confirmation_method\n    \n as \n    \n    confirmation_method\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_payment_error_charge_id\n    \n as \n    \n    last_payment_error_charge_id\n    \n, \n    \n    \n    last_payment_error_code\n    \n as \n    \n    last_payment_error_code\n    \n, \n    \n    \n    last_payment_error_decline_code\n    \n as \n    \n    last_payment_error_decline_code\n    \n, \n    \n    \n    last_payment_error_doc_url\n    \n as \n    \n    last_payment_error_doc_url\n    \n, \n    \n    \n    last_payment_error_message\n    \n as \n    \n    last_payment_error_message\n    \n, \n    \n    \n    last_payment_error_param\n    \n as \n    \n    last_payment_error_param\n    \n, \n    \n    \n    last_payment_error_source_id\n    \n as \n    \n    last_payment_error_source_id\n    \n, \n    \n    \n    last_payment_error_type\n    \n as \n    \n    last_payment_error_type\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    metadata\n    \n , \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_intent_id,\n        amount,\n        amount_capturable,\n        amount_received,\n        application,\n        application_fee_amount,\n        canceled_at,\n        cancellation_reason,\n        capture_method,\n        confirmation_method,\n        created as created_at,\n        currency,\n        customer_id,\n        description,\n        metadata,\n        payment_method_id,\n        receipt_email,\n        statement_descriptor,\n        status\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_intent\""}, "model.stripe_source.stg_stripe__payment_method": {"raw_sql": "{{ config(enabled=var('using_payment_method', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__payment_method_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__payment_method_tmp')),\n                staging_columns=get_payment_method_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        created as created_at,\n        customer_id,\n        metadata,\n        type\n\n        {% if var('stripe__payment_method_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__payment_method_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_payment_method_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__payment_method_tmp", "model.stripe_source.stg_stripe__payment_method_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__payment_method"], "unique_id": "model.stripe_source.stg_stripe__payment_method", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__payment_method.sql", "original_file_path": "models/stg_stripe__payment_method.sql", "name": "stg_stripe__payment_method", "alias": "stg_stripe__payment_method", "checksum": {"name": "sha256", "checksum": "0f82026b01a94a317b2d256cb915f8d04e02f78d5bf2a7db268007716197f25a"}, "tags": [], "refs": [["stg_stripe__payment_method_tmp"], ["stg_stripe__payment_method_tmp"]], "sources": [], "description": "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__payment_method.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": true}, "created_at": 1652476920.19995, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_method_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    billing_detail_address_city\n    \n as \n    \n    billing_detail_address_city\n    \n, \n    \n    \n    billing_detail_address_country\n    \n as \n    \n    billing_detail_address_country\n    \n, \n    \n    \n    billing_detail_address_line_1\n    \n as \n    \n    billing_detail_address_line_1\n    \n, \n    \n    \n    billing_detail_address_line_2\n    \n as \n    \n    billing_detail_address_line_2\n    \n, \n    \n    \n    billing_detail_address_postal_code\n    \n as \n    \n    billing_detail_address_postal_code\n    \n, \n    \n    \n    billing_detail_address_state\n    \n as \n    \n    billing_detail_address_state\n    \n, \n    \n    \n    billing_detail_email\n    \n as \n    \n    billing_detail_email\n    \n, \n    \n    \n    billing_detail_name\n    \n as \n    \n    billing_detail_name\n    \n, \n    \n    \n    billing_detail_phone\n    \n as \n    \n    billing_detail_phone\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    metadata\n    \n , \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        created as created_at,\n        customer_id,\n        metadata,\n        type\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_method\""}, "model.stripe_source.stg_stripe__refund": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__refund_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__refund_tmp')),\n                staging_columns=get_refund_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        amount,\n        balance_transaction_id,\n        charge_id,\n        created as created_at,\n        currency,\n        description,\n        metadata,\n        reason,\n        receipt_number,\n        status\n\n        {% if var('stripe__refund_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__refund_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_refund_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__refund_tmp", "model.stripe_source.stg_stripe__refund_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__refund"], "unique_id": "model.stripe_source.stg_stripe__refund", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__refund.sql", "original_file_path": "models/stg_stripe__refund.sql", "name": "stg_stripe__refund", "alias": "stg_stripe__refund", "checksum": {"name": "sha256", "checksum": "a9cc45a05d4ac390a00e913f848477f57f29e9ec49e8c66180082a5117ddbb76"}, "tags": [], "refs": [["stg_stripe__refund_tmp"], ["stg_stripe__refund_tmp"]], "sources": [], "description": "Details of transactions that have been refunded", "columns": {"refund_id": {"name": "refund_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID for the balance transaction that describes the impact on your account balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the charge that was refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__refund.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1652476920.203514, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__refund_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_reason\n    \n as \n    \n    failure_reason\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    metadata\n    \n , \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        amount,\n        balance_transaction_id,\n        charge_id,\n        created as created_at,\n        currency,\n        description,\n        metadata,\n        reason,\n        receipt_number,\n        status\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__refund\""}, "model.stripe_source.stg_stripe__subscription": {"raw_sql": "{{ config(enabled=var('using_subscriptions', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__subscription_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__subscription_tmp')),\n                staging_columns=get_subscription_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_id,\n        status,\n        billing,\n        billing_cycle_anchor,\n        cancel_at,\n        cancel_at_period_end as is_cancel_at_period_end,\n        canceled_at,\n        created as created_at,\n        current_period_start,\n        current_period_end,\n        customer_id,\n        days_until_due,\n        metadata,\n        start_date,\n        ended_at\n\n        {% if var('stripe__subscription_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__subscription_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_subscription_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__subscription_tmp", "model.stripe_source.stg_stripe__subscription_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__subscription"], "unique_id": "model.stripe_source.stg_stripe__subscription", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__subscription.sql", "original_file_path": "models/stg_stripe__subscription.sql", "name": "stg_stripe__subscription", "alias": "stg_stripe__subscription", "checksum": {"name": "sha256", "checksum": "4b73e54027585529b75dc72c58bcbc933fb5cde75b72df729012582712e0e54c"}, "tags": [], "refs": [["stg_stripe__subscription_tmp"], ["stg_stripe__subscription_tmp"]], "sources": [], "description": "Subscriptions allow you to charge a customer on a recurring basis.", "columns": {"subscription_id": {"name": "subscription_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing": {"name": "billing", "description": "How the invoice is billed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_cancel_at_period_end": {"name": "is_cancel_at_period_end", "description": "Boolean indicating whether this subscription should cancel at the end of the current period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__subscription.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": true}, "created_at": 1652476920.210716, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__subscription_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as boolean) as \n    \n    _fivetran_active\n    \n , \n    \n    \n    application_fee_percent\n    \n as \n    \n    application_fee_percent\n    \n, \n    \n    \n    billing\n    \n as \n    \n    billing\n    \n, \n    \n    \n    billing_cycle_anchor\n    \n as \n    \n    billing_cycle_anchor\n    \n, \n    \n    \n    billing_threshold_amount_gte\n    \n as \n    \n    billing_threshold_amount_gte\n    \n, \n    \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n as \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n, \n    \n    \n    cancel_at\n    \n as \n    \n    cancel_at\n    \n, \n    \n    \n    cancel_at_period_end\n    \n as \n    \n    cancel_at_period_end\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    current_period_end\n    \n as \n    \n    current_period_end\n    \n, \n    \n    \n    current_period_start\n    \n as \n    \n    current_period_start\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    days_until_due\n    \n as \n    \n    days_until_due\n    \n, \n    \n    \n    default_source_id\n    \n as \n    \n    default_source_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tax_percent\n    \n as \n    \n    tax_percent\n    \n, \n    \n    \n    trial_end\n    \n as \n    \n    trial_end\n    \n, \n    \n    \n    trial_start\n    \n as \n    \n    trial_start\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_id,\n        status,\n        billing,\n        billing_cycle_anchor,\n        cancel_at,\n        cancel_at_period_end as is_cancel_at_period_end,\n        canceled_at,\n        created as created_at,\n        current_period_start,\n        current_period_end,\n        customer_id,\n        days_until_due,\n        metadata,\n        start_date,\n        ended_at\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__subscription\""}, "model.stripe_source.stg_stripe__card": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__card_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__card_tmp')),\n                staging_columns=get_card_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as card_id,\n        brand,\n        country,\n        created as created_at,\n        customer_id,\n        name,\n        recipient,\n        funding\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_card_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__card_tmp", "model.stripe_source.stg_stripe__card_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__card"], "unique_id": "model.stripe_source.stg_stripe__card", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__card.sql", "original_file_path": "models/stg_stripe__card.sql", "name": "stg_stripe__card", "alias": "stg_stripe__card", "checksum": {"name": "sha256", "checksum": "94a155f1a56d123dceb05546ede287bb838c29e8aa03ca51a5cdd6f3dab3f8e1"}, "tags": [], "refs": [["stg_stripe__card_tmp"], ["stg_stripe__card_tmp"]], "sources": [], "description": "Details of a credit card that has been saved to the system.", "columns": {"card_id": {"name": "card_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you\u2019ve collected.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the entry for the card was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The customer that this card belongs to.  NULL if belongs to an account or recipient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Cardholder name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funding": {"name": "funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__card.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1652476920.189562, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__card_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_1_check\n    \n as \n    \n    address_line_1_check\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    address_zip\n    \n as \n    \n    address_zip\n    \n, \n    \n    \n    address_zip_check\n    \n as \n    \n    address_zip_check\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    cvc_check\n    \n as \n    \n    cvc_check\n    \n, \n    \n    \n    dynamic_last_4\n    \n as \n    \n    dynamic_last_4\n    \n, \n    \n    \n    exp_month\n    \n as \n    \n    exp_month\n    \n, \n    \n    \n    exp_year\n    \n as \n    \n    exp_year\n    \n, \n    \n    \n    fingerprint\n    \n as \n    \n    fingerprint\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_4\n    \n as \n    \n    last_4\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    network\n    \n as \n    \n    network\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    tokenization_method\n    \n as \n    \n    tokenization_method\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as card_id,\n        brand,\n        country,\n        created as created_at,\n        customer_id,\n        name,\n        recipient,\n        funding\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__card\""}, "model.stripe_source.stg_stripe__invoice": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__invoice_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__invoice_tmp')),\n                staging_columns=get_invoice_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        amount_due,\n        amount_paid,\n        amount_remaining,\n        attempt_count,\n        auto_advance,\n        billing_reason,\n        charge_id,\n        created as created_at,\n        currency,\n        customer_id,\n        description,\n        due_date,\n        metadata,\n        number,\n        paid as is_paid,\n        receipt_number,\n        status,\n        subtotal,\n        tax,\n        tax_percent,\n        total\n\n        {% if var('stripe__invoice_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__invoice_metadata')) }}\n        {% endif %}\n\n    from fields\n    where not coalesce(is_deleted, false)\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_invoice_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__invoice_tmp", "model.stripe_source.stg_stripe__invoice_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__invoice"], "unique_id": "model.stripe_source.stg_stripe__invoice", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__invoice.sql", "original_file_path": "models/stg_stripe__invoice.sql", "name": "stg_stripe__invoice", "alias": "stg_stripe__invoice", "checksum": {"name": "sha256", "checksum": "7253d6867d42d53fff1665c8aef06d33fe572d85772e50b75c9c1acdd8af0153"}, "tags": [], "refs": [["stg_stripe__invoice_tmp"], ["stg_stripe__invoice_tmp"]], "sources": [], "description": "Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.", "columns": {"invoice_id": {"name": "invoice_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "Final amount due at this time for this invoice. If the invoice\u2019s total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, in cents, that was paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount remaining, in cents, that is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_advance": {"name": "auto_advance", "description": "Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice\u2019s state will not automatically advance without an explicit action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_reason": {"name": "billing_reason", "description": "Indicates the reason why the invoice was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the latest charge generated for this invoice, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the customer who will be billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. Referenced as \u2018memo\u2019 in the Dashboard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date on which payment for this invoice is due. This value will be null for invoices where collection_method=charge_automatically.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_paid": {"name": "is_paid", "description": "Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer\u2019s account balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Total of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_percent": {"name": "tax_percent", "description": "The percent used to calculate the tax amount.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total": {"name": "total", "description": "Total after discounts and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__invoice.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": true}, "created_at": 1652476920.2084448, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__invoice_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as \n    int\n) as \n    \n    amount_due\n    \n , \n    cast(null as \n    int\n) as \n    \n    amount_paid\n    \n , \n    cast(null as \n    int\n) as \n    \n    amount_remaining\n    \n , \n    cast(null as \n    int\n) as \n    \n    application_fee_amount\n    \n , \n    cast(null as \n    int\n) as \n    \n    attempt_count\n    \n , \n    cast(null as boolean) as \n    \n    attempted\n    \n , \n    cast(null as boolean) as \n    \n    auto_advance\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    billing\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    billing_reason\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    charge_id\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    created\n    \n , \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    default_source_id\n    \n , \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as \n    timestamp without time zone\n) as \n    \n    due_date\n    \n , \n    cast(null as \n    int\n) as \n    \n    ending_balance\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    finalized_at\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    footer\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    hosted_invoice_url\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    invoice_pdf\n    \n , \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    metadata\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    next_payment_attempt\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    number\n    \n , \n    cast(null as boolean) as \n    \n    paid\n    \n , \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    receipt_number\n    \n , \n    cast(null as \n    int\n) as \n    \n    starting_balance\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    statement_descriptor\n    \n , \n    cast(null as \n    varchar\n) as \n    \n    status\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    status_transitions_finalized_at\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    status_transitions_marked_uncollectible_at\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    status_transitions_paid_at\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    status_transitions_voided_at\n    \n , \n    cast(null as \n    int\n) as \n    \n    subscription_proration_date\n    \n , \n    cast(null as \n    int\n) as \n    \n    subtotal\n    \n , \n    cast(null as \n    int\n) as \n    \n    tax\n    \n , \n    cast(null as \n    numeric(28, 6)\n) as \n    \n    tax_percent\n    \n , \n    cast(null as \n    int\n) as \n    \n    threshold_reason_amount_gte\n    \n , \n    cast(null as \n    int\n) as \n    \n    total\n    \n , \n    cast(null as \n    timestamp without time zone\n) as \n    \n    webhooks_delivered_at\n    \n \n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        amount_due,\n        amount_paid,\n        amount_remaining,\n        attempt_count,\n        auto_advance,\n        billing_reason,\n        charge_id,\n        created as created_at,\n        currency,\n        customer_id,\n        description,\n        due_date,\n        metadata,\n        number,\n        paid as is_paid,\n        receipt_number,\n        status,\n        subtotal,\n        tax,\n        tax_percent,\n        total\n\n        \n\n    from fields\n    where not coalesce(is_deleted, false)\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__invoice\""}, "model.stripe_source.stg_stripe__payout": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__payout_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__payout_tmp')),\n                staging_columns=get_payout_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payout_id,\n        amount,\n        arrival_date,\n        automatic as is_automatic,\n        balance_transaction_id,\n        created as created_at,\n        currency,\n        description,\n        metadata,\n        method,\n        source_type,\n        status,\n        type\n\n        {% if var('stripe__payout_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__payout_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_payout_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__payout_tmp", "model.stripe_source.stg_stripe__payout_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__payout"], "unique_id": "model.stripe_source.stg_stripe__payout", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__payout.sql", "original_file_path": "models/stg_stripe__payout.sql", "name": "stg_stripe__payout", "alias": "stg_stripe__payout", "checksum": {"name": "sha256", "checksum": "0ee2d2f8232e31a971099c76c17d6542063dc2b395c0dd5e61e1846a35012981"}, "tags": [], "refs": [["stg_stripe__payout_tmp"], ["stg_stripe__payout_tmp"]], "sources": [], "description": "A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.", "columns": {"payout_id": {"name": "payout_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount (in cents) to be transferred to your bank account or debit card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "arrival_date": {"name": "arrival_date", "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_automatic": {"name": "is_automatic", "description": "true if the payout was created by an automated payout schedule, and false if it was requested manually.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this payout on your account balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "method": {"name": "method", "description": "The method used to send this payout, which can be standard or instant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The source balance this payout came from. One of card, fpx, or bank_account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Can be bank_account or card.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__payout.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1652476920.2018461, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payout_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    arrival_date\n    \n as \n    \n    arrival_date\n    \n, \n    \n    \n    automatic\n    \n as \n    \n    automatic\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination_bank_account_id\n    \n as \n    \n    destination_bank_account_id\n    \n, \n    \n    \n    destination_card_id\n    \n as \n    \n    destination_card_id\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    metadata\n    \n , \n    \n    \n    method\n    \n as \n    \n    method\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payout_id,\n        amount,\n        arrival_date,\n        automatic as is_automatic,\n        balance_transaction_id,\n        created as created_at,\n        currency,\n        description,\n        metadata,\n        method,\n        source_type,\n        status,\n        type\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payout\""}, "model.stripe_source.stg_stripe__charge": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__charge_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__charge_tmp')),\n                staging_columns=get_charge_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as charge_id, \n        amount,\n        amount_refunded,\n        application_fee_amount,\n        balance_transaction_id,\n        captured as is_captured,\n        card_id,\n        created as created_at,\n        customer_id,\n        currency,\n        description,\n        failure_code,\n        failure_message,\n        metadata,\n        paid as is_paid,\n        payment_intent_id,\n        receipt_email,\n        receipt_number,\n        refunded as is_refunded,\n        status,\n        invoice_id\n\n        {% if var('stripe__charge_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__charge_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_charge_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__charge_tmp", "model.stripe_source.stg_stripe__charge_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__charge"], "unique_id": "model.stripe_source.stg_stripe__charge", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__charge.sql", "original_file_path": "models/stg_stripe__charge.sql", "name": "stg_stripe__charge", "alias": "stg_stripe__charge", "checksum": {"name": "sha256", "checksum": "6a4fd28a989db89f62f0d124b71c930ea704a30da8870aec2a2a601d8a8e1af2"}, "tags": [], "refs": [["stg_stripe__charge_tmp"], ["stg_stripe__charge_tmp"]], "sources": [], "description": "To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.", "columns": {"charge_id": {"name": "charge_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_refunded": {"name": "amount_refunded", "description": "The amount of the charge, if any, that has been refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_captured": {"name": "is_captured", "description": "If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_id": {"name": "card_id", "description": "ID of the card that was charged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of the when the charge took place.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer this charge is for if one exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failure_code": {"name": "failure_code", "description": "Error code explaining reason for charge failure if available.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failure_message": {"name": "failure_message", "description": "Message to user further explaining reason for charge failure if available.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_paid": {"name": "is_paid", "description": "true if the charge succeeded, or was successfully authorized for later capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "ID of the PaymentIntent associated with this charge, if one exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "This is the email address that the receipt for this charge was sent to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_refunded": {"name": "is_refunded", "description": "Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the payment is either succeeded, pending, or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__charge.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1652476920.192461, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__charge_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_refunded\n    \n as \n    \n    amount_refunded\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    calculated_statement_descriptor\n    \n as \n    \n    calculated_statement_descriptor\n    \n, \n    \n    \n    captured\n    \n as \n    \n    captured\n    \n, \n    \n    \n    card_id\n    \n as \n    \n    card_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    fraud_details_stripe_report\n    \n as \n    \n    fraud_details_stripe_report\n    \n, \n    \n    \n    fraud_details_user_report\n    \n as \n    \n    fraud_details_user_report\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    metadata\n    \n , \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    outcome_network_status\n    \n as \n    \n    outcome_network_status\n    \n, \n    \n    \n    outcome_reason\n    \n as \n    \n    outcome_reason\n    \n, \n    \n    \n    outcome_risk_level\n    \n as \n    \n    outcome_risk_level\n    \n, \n    \n    \n    outcome_risk_score\n    \n as \n    \n    outcome_risk_score\n    \n, \n    \n    \n    outcome_seller_message\n    \n as \n    \n    outcome_seller_message\n    \n, \n    \n    \n    outcome_type\n    \n as \n    \n    outcome_type\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    payment_intent_id\n    \n as \n    \n    payment_intent_id\n    \n, \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    receipt_url\n    \n as \n    \n    receipt_url\n    \n, \n    \n    \n    refunded\n    \n as \n    \n    refunded\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    source_transfer\n    \n as \n    \n    source_transfer\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as charge_id, \n        amount,\n        amount_refunded,\n        application_fee_amount,\n        balance_transaction_id,\n        captured as is_captured,\n        card_id,\n        created as created_at,\n        customer_id,\n        currency,\n        description,\n        failure_code,\n        failure_message,\n        metadata,\n        paid as is_paid,\n        payment_intent_id,\n        receipt_email,\n        receipt_number,\n        refunded as is_refunded,\n        status,\n        invoice_id\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__charge\""}, "model.stripe_source.stg_stripe__balance_transaction": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__balance_transaction_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__balance_transaction_tmp')),\n                staging_columns=get_balance_transaction_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as balance_transaction_id,\n        amount,\n\n        -- ensure that these are timestamps without timezones on postgres + redshift\n        cast(available_on as {{ dbt_utils.type_timestamp() }}) as available_on,\n        cast(created as {{ dbt_utils.type_timestamp() }}) as created_at,\n\n        currency,\n        description,\n        exchange_rate,\n        fee,\n        net,\n        source,\n        status,\n        type\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_balance_transaction_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.stripe_source.stg_stripe__balance_transaction_tmp", "model.stripe_source.stg_stripe__balance_transaction_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__balance_transaction"], "unique_id": "model.stripe_source.stg_stripe__balance_transaction", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__balance_transaction.sql", "original_file_path": "models/stg_stripe__balance_transaction.sql", "name": "stg_stripe__balance_transaction", "alias": "stg_stripe__balance_transaction", "checksum": {"name": "sha256", "checksum": "f9edea92d5c3b70136948ccc8fbc40cbdf749033858afa6627647333f1ab6538"}, "tags": [], "refs": [["stg_stripe__balance_transaction_tmp"], ["stg_stripe__balance_transaction_tmp"]], "sources": [], "description": "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Gross amount of the transaction, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the transaction\u2019s net funds will become available in the Stripe balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the transaction was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the amount in currency A, times exchange_rate, would be the amount in currency B.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fee": {"name": "fee", "description": "fees (in cents) paid for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "If the transaction\u2019s net funds are available in the Stripe balance yet. Either 'available' or 'pending'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "the type of transaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__balance_transaction.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1652476920.188176, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__balance_transaction_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    available_on\n    \n as \n    \n    available_on\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    fee\n    \n as \n    \n    fee\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    net\n    \n as \n    \n    net\n    \n, \n    \n    \n    payout_id\n    \n as \n    \n    payout_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as balance_transaction_id,\n        amount,\n\n        -- ensure that these are timestamps without timezones on postgres + redshift\n        cast(available_on as \n    timestamp without time zone\n) as available_on,\n        cast(created as \n    timestamp without time zone\n) as created_at,\n\n        currency,\n        description,\n        exchange_rate,\n        fee,\n        net,\n        source,\n        status,\n        type\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__balance_transaction\""}, "model.stripe_source.stg_stripe__fee": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__fee_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__fee_tmp')),\n                staging_columns=get_fee_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        balance_transaction_id,\n        amount,\n        application,\n        currency,\n        description,\n        type\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_fee_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__fee_tmp", "model.stripe_source.stg_stripe__fee_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__fee"], "unique_id": "model.stripe_source.stg_stripe__fee", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__fee.sql", "original_file_path": "models/stg_stripe__fee.sql", "name": "stg_stripe__fee", "alias": "stg_stripe__fee", "checksum": {"name": "sha256", "checksum": "970f84ad0eb1ff04a03a02f8769faefaebf75dd191b619cb5336fd00e904e31b"}, "tags": [], "refs": [["stg_stripe__fee_tmp"], ["stg_stripe__fee_tmp"]], "sources": [], "description": "The details of a fee associated with a balance_transation", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction entry the fee applies to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount of the fee, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that earned the fee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of the fee, can be application_fee, stripe_fee or tax.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__fee.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1652476920.195903, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__fee_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        balance_transaction_id,\n        amount,\n        application,\n        currency,\n        description,\n        type\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__fee\""}, "model.stripe_source.stg_stripe__plan": {"raw_sql": "{{ config(enabled=var('using_subscriptions', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__plan_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__plan_tmp')),\n                staging_columns=get_plan_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as plan_id,\n        active as is_active,\n        amount,\n        currency,\n        {% if target.type == 'bigquery' %}\n            `interval` as plan_interval,\n        {% else %}\n            interval as plan_interval,\n        {% endif %}\n        interval_count,\n        metadata,\n        nickname,\n        product_id\n\n        {% if var('stripe__plan_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__plan_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_plan_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__plan_tmp", "model.stripe_source.stg_stripe__plan_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__plan"], "unique_id": "model.stripe_source.stg_stripe__plan", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__plan.sql", "original_file_path": "models/stg_stripe__plan.sql", "name": "stg_stripe__plan", "alias": "stg_stripe__plan", "checksum": {"name": "sha256", "checksum": "e95c2a6e541625fe831744377eb5cbcf80a19efb0582bfe7d5f1bd4ead3c4926"}, "tags": [], "refs": [["stg_stripe__plan_tmp"], ["stg_stripe__plan_tmp"]], "sources": [], "description": "Plans define the base price, currency, and billing cycle for recurring purchases of products.", "columns": {"plan_id": {"name": "plan_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Whether the plan can be used for new purchases.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The unit amount in cents to be charged, represented as a whole integer if possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_interval": {"name": "plan_interval", "description": "The frequency at which a subscription is billed. One of day, week, month or year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interval_count": {"name": "interval_count", "description": "The number of intervals between subscription billings. For example, interval_count=3 bills every 3 months.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nickname": {"name": "nickname", "description": "A brief description of the plan, hidden from customers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The id of the product whose pricing this plan determines.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__plan.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": true}, "created_at": 1652476920.212127, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__plan_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    aggregate_usage\n    \n as \n    \n    aggregate_usage\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    billing_scheme\n    \n as \n    \n    billing_scheme\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    interval_count\n    \n as \n    \n    interval_count\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    metadata\n    \n , \n    \n    \n    nickname\n    \n as \n    \n    nickname\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    tiers_mode\n    \n as \n    \n    tiers_mode\n    \n, \n    \n    \n    transform_usage_divide_by\n    \n as \n    \n    transform_usage_divide_by\n    \n, \n    \n    \n    transform_usage_round\n    \n as \n    \n    transform_usage_round\n    \n, \n    \n    \n    trial_period_days\n    \n as \n    \n    trial_period_days\n    \n, \n    \n    \n    usage_type\n    \n as \n    \n    usage_type\n    \n, \n    \n    \n    interval\n    \n as \n    \n    interval\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as plan_id,\n        active as is_active,\n        amount,\n        currency,\n        \n            interval as plan_interval,\n        \n        interval_count,\n        metadata,\n        nickname,\n        product_id\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__plan\""}, "model.stripe_source.stg_stripe__payment_method_card": {"raw_sql": "{{ config(enabled=var('using_payment_method', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__payment_method_card_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__payment_method_card_tmp')),\n                staging_columns=get_payment_method_card_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        payment_method_id,\n        brand,\n        funding\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_payment_method_card_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__payment_method_card_tmp", "model.stripe_source.stg_stripe__payment_method_card_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__payment_method_card"], "unique_id": "model.stripe_source.stg_stripe__payment_method_card", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__payment_method_card.sql", "original_file_path": "models/stg_stripe__payment_method_card.sql", "name": "stg_stripe__payment_method_card", "alias": "stg_stripe__payment_method_card", "checksum": {"name": "sha256", "checksum": "7dea66719bd5ed74178ad247d3813737eb795c16a6fa469e9ae12fe661ecbebb"}, "tags": [], "refs": [["stg_stripe__payment_method_card_tmp"], ["stg_stripe__payment_method_card_tmp"]], "sources": [], "description": "Table with the relationships between a payment methods and a card", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funding": {"name": "funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__payment_method_card.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": true}, "created_at": 1652476920.199117, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_method_card_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    fingerprint\n    \n as \n    \n    fingerprint\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    wallet_type\n    \n as \n    \n    wallet_type\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        payment_method_id,\n        brand,\n        funding\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_method_card\""}, "model.stripe_source.stg_stripe__customer": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_stripe__customer_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__customer_tmp')),\n                staging_columns=get_customer_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as customer_id,\n        account_balance,\n        created as created_at,\n        currency,\n        default_card_id,\n        delinquent as is_delinquent,\n        description,\n        email,\n        metadata,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_name,\n        shipping_phone\n        \n        {% if var('stripe__customer_metadata',[]) %}\n        , {{ fivetran_utils.pivot_json_extract(string = 'metadata', list_of_properties = var('stripe__customer_metadata')) }}\n        {% endif %}\n\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_customer_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.stripe_source.stg_stripe__customer_tmp", "model.stripe_source.stg_stripe__customer_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__customer"], "unique_id": "model.stripe_source.stg_stripe__customer", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__customer.sql", "original_file_path": "models/stg_stripe__customer.sql", "name": "stg_stripe__customer", "alias": "stg_stripe__customer", "checksum": {"name": "sha256", "checksum": "c5977be1ded0c266e28647ddb7365f3ae82871ae5c3177197dfe5c00924f3f73"}, "tags": [], "refs": [["stg_stripe__customer_tmp"], ["stg_stripe__customer_tmp"]], "sources": [], "description": "Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer.", "columns": {"customer_id": {"name": "customer_id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the customer entry was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_card_id": {"name": "default_card_id", "description": "ID for the default card used by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_delinquent": {"name": "is_delinquent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The customer\u2019s email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": "target/compiled/stripe_source/models/stg_stripe__customer.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe"}, "created_at": 1652476920.194887, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__customer_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_balance\n    \n as \n    \n    account_balance\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_postal_code\n    \n as \n    \n    address_postal_code\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    default_card_id\n    \n as \n    \n    default_card_id\n    \n, \n    \n    \n    delinquent\n    \n as \n    \n    delinquent\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_prefix\n    \n as \n    \n    invoice_prefix\n    \n, \n    \n    \n    invoice_settings_default_payment_method\n    \n as \n    \n    invoice_settings_default_payment_method\n    \n, \n    \n    \n    invoice_settings_footer\n    \n as \n    \n    invoice_settings_footer\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as \n    varchar\n) as \n    \n    metadata\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    tax_info_tax_id\n    \n as \n    \n    tax_info_tax_id\n    \n, \n    \n    \n    tax_info_type\n    \n as \n    \n    tax_info_type\n    \n, \n    \n    \n    tax_info_verification_status\n    \n as \n    \n    tax_info_verification_status\n    \n, \n    \n    \n    tax_info_verification_verified_name\n    \n as \n    \n    tax_info_verification_verified_name\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as customer_id,\n        account_balance,\n        created as created_at,\n        currency,\n        default_card_id,\n        delinquent as is_delinquent,\n        description,\n        email,\n        metadata,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_name,\n        shipping_phone\n        \n        \n\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__customer\""}, "model.stripe_source.stg_stripe__payment_method_card_tmp": {"raw_sql": "{{ config(enabled=var('using_payment_method', True)) }}\n\nselect * \nfrom {{ var('payment_method_card') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.payment_method_card"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__payment_method_card_tmp"], "unique_id": "model.stripe_source.stg_stripe__payment_method_card_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__payment_method_card_tmp.sql", "original_file_path": "models/tmp/stg_stripe__payment_method_card_tmp.sql", "name": "stg_stripe__payment_method_card_tmp", "alias": "stg_stripe__payment_method_card_tmp", "checksum": {"name": "sha256", "checksum": "12f64917b7daae52d448d1463edbb732482b8525fb22a4899b19923f62df167c"}, "tags": [], "refs": [], "sources": [["stripe", "payment_method_card"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__payment_method_card_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": true}, "created_at": 1652476920.0788789, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"stripe_integration_tests\".\"payment_method_card_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_method_card_tmp\""}, "model.stripe_source.stg_stripe__payment_method_tmp": {"raw_sql": "{{ config(enabled=var('using_payment_method', True)) }}\n\nselect * \nfrom {{ var('payment_method') }}\n\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.payment_method"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__payment_method_tmp"], "unique_id": "model.stripe_source.stg_stripe__payment_method_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__payment_method_tmp.sql", "original_file_path": "models/tmp/stg_stripe__payment_method_tmp.sql", "name": "stg_stripe__payment_method_tmp", "alias": "stg_stripe__payment_method_tmp", "checksum": {"name": "sha256", "checksum": "45b217ca6490f130b98fd82ea571349c8d71820ede6e020a166415b4a05920d5"}, "tags": [], "refs": [], "sources": [["stripe", "payment_method"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__payment_method_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": true}, "created_at": 1652476920.082429, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"stripe_integration_tests\".\"payment_method_data\"\n\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_method_tmp\""}, "model.stripe_source.stg_stripe__refund_tmp": {"raw_sql": "select * \nfrom {{ var('refund') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.refund"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__refund_tmp"], "unique_id": "model.stripe_source.stg_stripe__refund_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__refund_tmp.sql", "original_file_path": "models/tmp/stg_stripe__refund_tmp.sql", "name": "stg_stripe__refund_tmp", "alias": "stg_stripe__refund_tmp", "checksum": {"name": "sha256", "checksum": "e85ff297dae4151635a5580b83e1f11160fe1cd3d6d0eb51fc4bc6f39a432c1d"}, "tags": [], "refs": [], "sources": [["stripe", "refund"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__refund_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1652476920.085505, "compiled_sql": "select * \nfrom \"postgres\".\"stripe_integration_tests\".\"refund_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__refund_tmp\""}, "model.stripe_source.stg_stripe__payout_tmp": {"raw_sql": "select * \nfrom {{ var('payout') }}\n\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.payout"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__payout_tmp"], "unique_id": "model.stripe_source.stg_stripe__payout_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__payout_tmp.sql", "original_file_path": "models/tmp/stg_stripe__payout_tmp.sql", "name": "stg_stripe__payout_tmp", "alias": "stg_stripe__payout_tmp", "checksum": {"name": "sha256", "checksum": "657c211514f6bffe3da4360b24aaf1d6a470d00852392fb5a59bfd71e02dc801"}, "tags": [], "refs": [], "sources": [["stripe", "payout"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__payout_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1652476920.090981, "compiled_sql": "select * \nfrom \"postgres\".\"stripe_integration_tests\".\"payout_data\"\n\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payout_tmp\""}, "model.stripe_source.stg_stripe__invoice_tmp": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nselect * \nfrom {{ var('invoice') }}\n\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.invoice"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__invoice_tmp"], "unique_id": "model.stripe_source.stg_stripe__invoice_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__invoice_tmp.sql", "original_file_path": "models/tmp/stg_stripe__invoice_tmp.sql", "name": "stg_stripe__invoice_tmp", "alias": "stg_stripe__invoice_tmp", "checksum": {"name": "sha256", "checksum": "a46c6cde0f2646f1f5c8fb5a9b6c77cbfb5f0c38ccf74df3f9c19e95e98e2888"}, "tags": [], "refs": [], "sources": [["stripe", "invoice"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__invoice_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": true}, "created_at": 1652476920.093636, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"stripe_integration_tests\".\"invoice_data\"\n\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__invoice_tmp\""}, "model.stripe_source.stg_stripe__invoice_line_item_tmp": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nselect * \nfrom {{ var('invoice_line_item') }}\n\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.invoice_line_item"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__invoice_line_item_tmp"], "unique_id": "model.stripe_source.stg_stripe__invoice_line_item_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__invoice_line_item_tmp.sql", "original_file_path": "models/tmp/stg_stripe__invoice_line_item_tmp.sql", "name": "stg_stripe__invoice_line_item_tmp", "alias": "stg_stripe__invoice_line_item_tmp", "checksum": {"name": "sha256", "checksum": "4df9882fdf750fa75548df3fda3e5b53f90bf08ca430896b3723cef60eb818ac"}, "tags": [], "refs": [], "sources": [["stripe", "invoice_line_item"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__invoice_line_item_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": true}, "created_at": 1652476920.097374, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"stripe_integration_tests\".\"invoice_line_item_data\"\n\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__invoice_line_item_tmp\""}, "model.stripe_source.stg_stripe__charge_tmp": {"raw_sql": "select * \nfrom {{ var('charge') }}\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.charge"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__charge_tmp"], "unique_id": "model.stripe_source.stg_stripe__charge_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__charge_tmp.sql", "original_file_path": "models/tmp/stg_stripe__charge_tmp.sql", "name": "stg_stripe__charge_tmp", "alias": "stg_stripe__charge_tmp", "checksum": {"name": "sha256", "checksum": "99f6017697b1c4efd09e65c2917255c07521a4ca9c9cb111eed495504fdc314f"}, "tags": [], "refs": [], "sources": [["stripe", "charge"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__charge_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1652476920.10028, "compiled_sql": "select * \nfrom \"postgres\".\"stripe_integration_tests\".\"charge_data\"\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__charge_tmp\""}, "model.stripe_source.stg_stripe__fee_tmp": {"raw_sql": "select * \nfrom {{ var('fee') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.fee"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__fee_tmp"], "unique_id": "model.stripe_source.stg_stripe__fee_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__fee_tmp.sql", "original_file_path": "models/tmp/stg_stripe__fee_tmp.sql", "name": "stg_stripe__fee_tmp", "alias": "stg_stripe__fee_tmp", "checksum": {"name": "sha256", "checksum": "4b0836c1cdae8a9bb9a4f76e6269fb6c898c2b4ae6995605cf8486ebf71fe4f4"}, "tags": [], "refs": [], "sources": [["stripe", "fee"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__fee_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1652476920.102939, "compiled_sql": "select * \nfrom \"postgres\".\"stripe_integration_tests\".\"fee_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__fee_tmp\""}, "model.stripe_source.stg_stripe__payment_intent_tmp": {"raw_sql": "select * \nfrom {{ var('payment_intent') }}\n\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.payment_intent"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__payment_intent_tmp"], "unique_id": "model.stripe_source.stg_stripe__payment_intent_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__payment_intent_tmp.sql", "original_file_path": "models/tmp/stg_stripe__payment_intent_tmp.sql", "name": "stg_stripe__payment_intent_tmp", "alias": "stg_stripe__payment_intent_tmp", "checksum": {"name": "sha256", "checksum": "5a5295d664470e5fd86114eea3485e9543e784c785ef08339126e68af559f3a8"}, "tags": [], "refs": [], "sources": [["stripe", "payment_intent"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__payment_intent_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1652476920.105422, "compiled_sql": "select * \nfrom \"postgres\".\"stripe_integration_tests\".\"payment_intent_data\"\n\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_intent_tmp\""}, "model.stripe_source.stg_stripe__plan_tmp": {"raw_sql": "{{ config(enabled=var('using_subscriptions', True)) }}\n\nselect * \nfrom {{ var('plan') }}\n\n{{ livemode_predicate() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.plan"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__plan_tmp"], "unique_id": "model.stripe_source.stg_stripe__plan_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__plan_tmp.sql", "original_file_path": "models/tmp/stg_stripe__plan_tmp.sql", "name": "stg_stripe__plan_tmp", "alias": "stg_stripe__plan_tmp", "checksum": {"name": "sha256", "checksum": "733ec84639db817419efdf3b72dc1a205538bd10856555ec733e5362eaf873df"}, "tags": [], "refs": [], "sources": [["stripe", "plan"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__plan_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": true}, "created_at": 1652476920.1080241, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"stripe_integration_tests\".\"plan_data\"\n\n\n\n    where livemode = True\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__plan_tmp\""}, "model.stripe_source.stg_stripe__card_tmp": {"raw_sql": "select * \nfrom {{ var('card') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.card"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__card_tmp"], "unique_id": "model.stripe_source.stg_stripe__card_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__card_tmp.sql", "original_file_path": "models/tmp/stg_stripe__card_tmp.sql", "name": "stg_stripe__card_tmp", "alias": "stg_stripe__card_tmp", "checksum": {"name": "sha256", "checksum": "4b22bf217122d18f63100e7b26de32aaabac179648282bbe3340269dd2feadcd"}, "tags": [], "refs": [], "sources": [["stripe", "card"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__card_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1652476920.110847, "compiled_sql": "select * \nfrom \"postgres\".\"stripe_integration_tests\".\"card_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__card_tmp\""}, "model.stripe_source.stg_stripe__balance_transaction_tmp": {"raw_sql": "select * \nfrom {{ var('balance_transaction') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.stripe_source.stripe.balance_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__balance_transaction_tmp"], "unique_id": "model.stripe_source.stg_stripe__balance_transaction_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__balance_transaction_tmp.sql", "original_file_path": "models/tmp/stg_stripe__balance_transaction_tmp.sql", "name": "stg_stripe__balance_transaction_tmp", "alias": "stg_stripe__balance_transaction_tmp", "checksum": {"name": "sha256", "checksum": "6abd3ec2f30221f2bb24cc9a45d911c904e196b9df477c6f8007c6626c91af9e"}, "tags": [], "refs": [], "sources": [["stripe", "balance_transaction"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__balance_transaction_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1652476920.113808, "compiled_sql": "select * \nfrom \"postgres\".\"stripe_integration_tests\".\"balance_transaction_data\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__balance_transaction_tmp\""}, "model.stripe_source.stg_stripe__customer_tmp": {"raw_sql": "select * \nfrom {{ var('customer') }}\n\n    {{ livemode_predicate() }}\n    and \n    not coalesce(is_deleted, false)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.customer"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__customer_tmp"], "unique_id": "model.stripe_source.stg_stripe__customer_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__customer_tmp.sql", "original_file_path": "models/tmp/stg_stripe__customer_tmp.sql", "name": "stg_stripe__customer_tmp", "alias": "stg_stripe__customer_tmp", "checksum": {"name": "sha256", "checksum": "d49ddcbbe4eac1bc78c0fa3b65c7e1db6151734ba7f7796a87ea2ccc0d99af18"}, "tags": [], "refs": [], "sources": [["stripe", "customer"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__customer_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe"}, "created_at": 1652476920.11627, "compiled_sql": "select * \nfrom \"postgres\".\"stripe_integration_tests\".\"customer_data\"\n\n    \n\n    where livemode = True\n\n\n    and \n    not coalesce(is_deleted, false)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__customer_tmp\""}, "model.stripe_source.stg_stripe__subscription_tmp": {"raw_sql": "{{ config(enabled=var('using_subscriptions', True)) }}\n\nselect * \nfrom {% if var('stripe__subscription_history', false) %}\n{{ var('subscription_history') }}\n{% else %}\n{{ var('subscription') }}\n{% endif %}\n\n{{ livemode_predicate() }}\n{% if var('stripe__subscription_history', false) %}\n    and coalesce(_fivetran_active, true)\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": ["source.stripe_source.stripe.subscription"]}, "config": {"enabled": true, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__subscription_tmp"], "unique_id": "model.stripe_source.stg_stripe__subscription_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__subscription_tmp.sql", "original_file_path": "models/tmp/stg_stripe__subscription_tmp.sql", "name": "stg_stripe__subscription_tmp", "alias": "stg_stripe__subscription_tmp", "checksum": {"name": "sha256", "checksum": "9603d4e3bfbccb66745354de7a9c76737e115987c94a516c9a82e058cecc9fac"}, "tags": [], "refs": [], "sources": [["stripe", "subscription"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/tmp/stg_stripe__subscription_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": true}, "created_at": 1652476920.118877, "compiled_sql": "\n\nselect * \nfrom \n\"postgres\".\"stripe_integration_tests\".\"subscription_data\"\n\n\n\n\n    where livemode = True\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__subscription_tmp\""}, "model.stripe.stripe__customer_overview": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe__balance_transactions') }}  \n\n), incomplete_charges as (\n\n    select *\n    from {{ ref('int_stripe__incomplete_charges') }}  \n\n), customer as (\n\n    select *\n    from {{ var('customer') }}  \n\n), transactions_grouped as (\n \n    select\n      customer_id,\n      sum(case when type in ('charge', 'payment') \n        then amount\n        else 0 \n            end) as total_sales,\n      sum(case when type in ('payment_refund', 'refund') \n        then amount\n        else 0 \n            end) as total_refunds,    \n      sum(amount) as total_gross_transaction_amount,\n      sum(fee) as total_fees,\n      sum(net) as total_net_transaction_amount,\n      sum(case when type in ('charge', 'payment') \n        then 1\n        else 0 \n            end) as total_sales_count, \n      sum(case when type in ('payment_refund', 'refund') \n        then 1\n        else 0 \n            end) as total_refund_count,   \n      sum(case when type in ('charge', 'payment') and {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then amount \n        else 0 \n            end) as sales_this_month,\n      sum(case when type in ('payment_refund', 'refund') and {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then amount \n        else 0 \n            end) as refunds_this_month,\n      sum(case when {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then amount \n        else 0 \n            end) as gross_transaction_amount_this_month,\n      sum(case when {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then fee \n        else 0 \n            end) as fees_this_month,\n      sum(case when {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then net \n        else 0 \n            end) as net_transaction_amount_this_month,\n      sum(case when type in ('charge', 'payment') and {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then 1 \n        else 0 \n            end) as sales_count_this_month,\n      sum(case when type in ('payment_refund', 'refund') and {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then 1 \n        else 0 \n            end) as refund_count_this_month,\n      min(case when type in ('charge', 'payment') \n        then {{ date_timezone('created_at') }}\n        else null \n            end) as first_sale_date,\n      max(case when type in ('charge', 'payment') \n        then {{ date_timezone('created_at') }}\n        else null \n            end) as most_recent_sale_date\n    from balance_transaction_joined\n    where type in ('payment', 'charge', 'payment_refund', 'refund')\n    group by 1\n\n), failed_charges_by_customer as (\n\n    select\n      customer_id,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount,\n      sum(case when {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then 1\n        else 0 \n            end) as failed_charge_count_this_month,\n      sum(case when {{ dbt_utils.date_trunc('month', date_timezone('created_at')) }} = {{ dbt_utils.date_trunc('month', date_timezone(dbt_utils.current_timestamp())) }}\n        then amount\n        else 0 \n            end) as failed_charge_amount_this_month\n    from incomplete_charges\n    group by 1\n\n), transactions_not_associated_with_customer as (\n\n    select\n      'No Associated Customer' as customer_description,\n      customer.email,\n      customer.created_at as customer_created_at,\n      customer.is_delinquent,\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      0 as total_failed_charge_count,\n      0 as total_failed_charge_amount,\n      0 as failed_charge_count_this_month,\n      0 as failed_charge_amount_this_month,\n      customer.currency as customer_currency,\n      customer.default_card_id,\n      customer.shipping_name,\n      customer.shipping_address_line_1,\n      customer.shipping_address_line_2,\n      customer.shipping_address_city,\n      customer.shipping_address_state,\n      customer.shipping_address_country,\n      customer.shipping_address_postal_code,\n      customer.shipping_phone\n\n      {% if var('stripe__customer_metadata',[]) %}\n        {% for metadata in var('stripe__customer_metadata') %}\n            ,customer.{{ metadata }}\n        {% endfor %}\n      {% endif %}\n      \n    from transactions_grouped\n    left join customer \n        on transactions_grouped.customer_id = customer.customer_id\n    where customer.customer_id is null and customer.description is null\n\n\n), customer_transactions_overview as (\n\n    select\n      coalesce(customer.description, customer.customer_id) as customer_description,\n      customer.email,\n      customer.created_at as customer_created_at,\n      customer.is_delinquent,\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      coalesce(failed_charges_by_customer.total_failed_charge_count, 0) as total_failed_charge_count,\n      coalesce(failed_charges_by_customer.total_failed_charge_amount/100, 0) as total_failed_charge_amount,\n      coalesce(failed_charges_by_customer.failed_charge_count_this_month, 0) as failed_charge_count_this_month,\n      coalesce(failed_charges_by_customer.failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,\n      customer.currency as customer_currency,\n      customer.default_card_id,\n      customer.shipping_name,\n      customer.shipping_address_line_1,\n      customer.shipping_address_line_2,\n      customer.shipping_address_city,\n      customer.shipping_address_state,\n      customer.shipping_address_country,\n      customer.shipping_address_postal_code,\n      customer.shipping_phone\n\n      {% if var('stripe__customer_metadata',[]) %}\n        {% for metadata in var('stripe__customer_metadata') %}\n            ,customer.{{ metadata }}\n        {% endfor %}\n      {% endif %}\n      \n    from customer\n    left join transactions_grouped\n        on customer.customer_id = transactions_grouped.customer_id\n    left join failed_charges_by_customer \n        on customer.customer_id = failed_charges_by_customer.customer_id\n)\n\nselect *\nfrom transactions_not_associated_with_customer\nunion all \nselect * \nfrom customer_transactions_overview", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe.date_timezone", "macro.dbt_utils.date_trunc", "macro.dbt_utils.current_timestamp"], "nodes": ["model.stripe.stripe__balance_transactions", "model.stripe.int_stripe__incomplete_charges", "model.stripe_source.stg_stripe__customer"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stripe", "fqn": ["stripe", "stripe__customer_overview"], "unique_id": "model.stripe.stripe__customer_overview", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "stripe__customer_overview.sql", "original_file_path": "models/stripe__customer_overview.sql", "name": "stripe__customer_overview", "alias": "stripe__customer_overview", "checksum": {"name": "sha256", "checksum": "bfad8428ea3b4ce15f617e02fb5aa53946478ae7378491d1b8719c9c037c8048"}, "tags": [], "refs": [["stripe__balance_transactions"], ["int_stripe__incomplete_charges"], ["stg_stripe__customer"]], "sources": [], "description": "Each record represents a customer, enriched with metrics about their associated transactions.", "columns": {"customer_description": {"name": "customer_description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email address associated with the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_created_at": {"name": "customer_created_at", "description": "Timestamp of when the customer entry was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_delinquent": {"name": "is_delinquent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "Sum of all charges made to this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "Sum of all refunds made to this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions made with this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_fees": {"name": "total_fees", "description": "Total fees charged on all transactions made with this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_net_transaction_amount": {"name": "total_net_transaction_amount", "description": "Net amount of all transactions made with this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "The total number of sales made to this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refund_count": {"name": "total_refund_count", "description": "The total number of refunds made to this customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_this_month": {"name": "sales_this_month", "description": "Sum of charges made to this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refunds_this_month": {"name": "refunds_this_month", "description": "Sum of refunds made to this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gross_transaction_amount_this_month": {"name": "gross_transaction_amount_this_month", "description": "Gross amount of transactions made with this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fees_this_month": {"name": "fees_this_month", "description": "Total fees charged on transactions made with this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net_transaction_amount_this_month": {"name": "net_transaction_amount_this_month", "description": "Net amount of transactions made with this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_count_this_month": {"name": "sales_count_this_month", "description": "The number of sales made to this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_count_this_month": {"name": "refund_count_this_month", "description": "The number of refunds made to this customer this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_sale_date": {"name": "first_sale_date", "description": "Date of the first time this customer was charged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_sale_date": {"name": "most_recent_sale_date", "description": "Date of the most recent time this customer was charged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "The total number of incomplete charges this customer has had.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "The total amount from incomplete charges this customer has had.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failed_charge_count_this_month": {"name": "failed_charge_count_this_month", "description": "The number of incomplete charges this customer has had this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failed_charge_amount_this_month": {"name": "failed_charge_amount_this_month", "description": "The amount from incomplete charges this customer has had this month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_currency": {"name": "customer_currency", "description": "Currency used by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_card_id": {"name": "default_card_id", "description": "ID of the default card used by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__customer_overview.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1652476920.2955499, "compiled_sql": "with  __dbt__cte__int_stripe__incomplete_charges as (\nwith charge as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__charge\"\n\n)\n\nselect \n  created_at,\n  customer_id,\n  amount\nfrom charge\nwhere not is_captured\n),balance_transaction_joined as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__balance_transactions\"  \n\n), incomplete_charges as (\n\n    select *\n    from __dbt__cte__int_stripe__incomplete_charges  \n\n), customer as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__customer\"  \n\n), transactions_grouped as (\n \n    select\n      customer_id,\n      sum(case when type in ('charge', 'payment') \n        then amount\n        else 0 \n            end) as total_sales,\n      sum(case when type in ('payment_refund', 'refund') \n        then amount\n        else 0 \n            end) as total_refunds,    \n      sum(amount) as total_gross_transaction_amount,\n      sum(fee) as total_fees,\n      sum(net) as total_net_transaction_amount,\n      sum(case when type in ('charge', 'payment') \n        then 1\n        else 0 \n            end) as total_sales_count, \n      sum(case when type in ('payment_refund', 'refund') \n        then 1\n        else 0 \n            end) as total_refund_count,   \n      sum(case when type in ('charge', 'payment') and date_trunc('month', \n\ndate_trunc('day', \n\n\n    created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::\n    timestamp without time zone\n\n\n\n\n))\n        then amount \n        else 0 \n            end) as sales_this_month,\n      sum(case when type in ('payment_refund', 'refund') and date_trunc('month', \n\ndate_trunc('day', \n\n\n    created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::\n    timestamp without time zone\n\n\n\n\n))\n        then amount \n        else 0 \n            end) as refunds_this_month,\n      sum(case when date_trunc('month', \n\ndate_trunc('day', \n\n\n    created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::\n    timestamp without time zone\n\n\n\n\n))\n        then amount \n        else 0 \n            end) as gross_transaction_amount_this_month,\n      sum(case when date_trunc('month', \n\ndate_trunc('day', \n\n\n    created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::\n    timestamp without time zone\n\n\n\n\n))\n        then fee \n        else 0 \n            end) as fees_this_month,\n      sum(case when date_trunc('month', \n\ndate_trunc('day', \n\n\n    created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::\n    timestamp without time zone\n\n\n\n\n))\n        then net \n        else 0 \n            end) as net_transaction_amount_this_month,\n      sum(case when type in ('charge', 'payment') and date_trunc('month', \n\ndate_trunc('day', \n\n\n    created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::\n    timestamp without time zone\n\n\n\n\n))\n        then 1 \n        else 0 \n            end) as sales_count_this_month,\n      sum(case when type in ('payment_refund', 'refund') and date_trunc('month', \n\ndate_trunc('day', \n\n\n    created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::\n    timestamp without time zone\n\n\n\n\n))\n        then 1 \n        else 0 \n            end) as refund_count_this_month,\n      min(case when type in ('charge', 'payment') \n        then \n\ndate_trunc('day', \n\n\n    created_at\n\n\n)\n        else null \n            end) as first_sale_date,\n      max(case when type in ('charge', 'payment') \n        then \n\ndate_trunc('day', \n\n\n    created_at\n\n\n)\n        else null \n            end) as most_recent_sale_date\n    from balance_transaction_joined\n    where type in ('payment', 'charge', 'payment_refund', 'refund')\n    group by 1\n\n), failed_charges_by_customer as (\n\n    select\n      customer_id,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount,\n      sum(case when date_trunc('month', \n\ndate_trunc('day', \n\n\n    created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::\n    timestamp without time zone\n\n\n\n\n))\n        then 1\n        else 0 \n            end) as failed_charge_count_this_month,\n      sum(case when date_trunc('month', \n\ndate_trunc('day', \n\n\n    created_at\n\n\n)) = date_trunc('month', \n\ndate_trunc('day', \n\n\n    \n    current_timestamp::\n    timestamp without time zone\n\n\n\n\n))\n        then amount\n        else 0 \n            end) as failed_charge_amount_this_month\n    from incomplete_charges\n    group by 1\n\n), transactions_not_associated_with_customer as (\n\n    select\n      'No Associated Customer' as customer_description,\n      customer.email,\n      customer.created_at as customer_created_at,\n      customer.is_delinquent,\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      0 as total_failed_charge_count,\n      0 as total_failed_charge_amount,\n      0 as failed_charge_count_this_month,\n      0 as failed_charge_amount_this_month,\n      customer.currency as customer_currency,\n      customer.default_card_id,\n      customer.shipping_name,\n      customer.shipping_address_line_1,\n      customer.shipping_address_line_2,\n      customer.shipping_address_city,\n      customer.shipping_address_state,\n      customer.shipping_address_country,\n      customer.shipping_address_postal_code,\n      customer.shipping_phone\n\n      \n      \n    from transactions_grouped\n    left join customer \n        on transactions_grouped.customer_id = customer.customer_id\n    where customer.customer_id is null and customer.description is null\n\n\n), customer_transactions_overview as (\n\n    select\n      coalesce(customer.description, customer.customer_id) as customer_description,\n      customer.email,\n      customer.created_at as customer_created_at,\n      customer.is_delinquent,\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      coalesce(failed_charges_by_customer.total_failed_charge_count, 0) as total_failed_charge_count,\n      coalesce(failed_charges_by_customer.total_failed_charge_amount/100, 0) as total_failed_charge_amount,\n      coalesce(failed_charges_by_customer.failed_charge_count_this_month, 0) as failed_charge_count_this_month,\n      coalesce(failed_charges_by_customer.failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,\n      customer.currency as customer_currency,\n      customer.default_card_id,\n      customer.shipping_name,\n      customer.shipping_address_line_1,\n      customer.shipping_address_line_2,\n      customer.shipping_address_city,\n      customer.shipping_address_state,\n      customer.shipping_address_country,\n      customer.shipping_address_postal_code,\n      customer.shipping_phone\n\n      \n      \n    from customer\n    left join transactions_grouped\n        on customer.customer_id = transactions_grouped.customer_id\n    left join failed_charges_by_customer \n        on customer.customer_id = failed_charges_by_customer.customer_id\n)\n\nselect *\nfrom transactions_not_associated_with_customer\nunion all \nselect * \nfrom customer_transactions_overview", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.stripe.int_stripe__incomplete_charges", "sql": " __dbt__cte__int_stripe__incomplete_charges as (\nwith charge as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__charge\"\n\n)\n\nselect \n  created_at,\n  customer_id,\n  amount\nfrom charge\nwhere not is_captured\n)"}], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__customer_overview\""}, "model.stripe.stripe__balance_transactions": {"raw_sql": "with balance_transaction as (\n\n    select *\n    from {{ var('balance_transaction') }}\n\n), charge as (\n\n    select *\n    from {{ var('charge')}}\n\n), payment_intent as (\n\n    select *\n    from {{ var('payment_intent')}}\n\n), cards as (\n\n    select *\n    from {{ var('card')}}\n\n), payout as (\n\n    select *\n    from {{ var('payout')}}\n\n\n), customer as (\n\n    select *\n    from {{ var('customer')}}\n\n{% if var('using_payment_method', True) %}\n\n), payment_method as (\n\n    select *\n    from {{ var('payment_method')}}\n\n), payment_method_card as (\n\n    select *\n    from {{ var('payment_method_card')}}\n\n{% endif %}\n\n), refund as (\n\n    select *\n    from {{ var('refund')}}\n\n)\n\nselect \n    balance_transaction.balance_transaction_id,\n    balance_transaction.created_at,\n    balance_transaction.available_on,\n    balance_transaction.currency,\n    balance_transaction.amount,\n    balance_transaction.fee,\n    balance_transaction.net,\n    balance_transaction.type,\n    case\n        when balance_transaction.type in ('charge', 'payment') then 'charge'\n        when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n        when balance_transaction.type in ('payout_cancel', 'payout_failure') then 'payout_reversal'\n        when balance_transaction.type in ('transfer', 'recipient_transfer') then 'transfer'\n        when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n        else balance_transaction.type\n    end as reporting_category,\n    balance_transaction.source,\n    balance_transaction.description,\n    case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, \n    case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n    {{ dbt_utils.dateadd('day', 1, 'balance_transaction.available_on') }} as effective_at,\n    coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n    charge.receipt_email,\n    customer.description as customer_description, \n\n    {% if var('using_payment_method', True) %}\n    payment_method.type as payment_method_type,\n    payment_method_card.brand as payment_method_brand,\n    payment_method_card.funding as payment_method_funding,\n    {% endif %}\n\n    charge.charge_id,\n    charge.payment_intent_id,\n    charge.created_at as charge_created_at,\n    cards.brand as card_brand,\n    cards.funding as card_funding,\n    cards.country as card_country,\n    payout.payout_id,\n    payout.arrival_date as payout_expected_arrival_date,\n    payout.status as payout_status,\n    payout.type as payout_type,\n    payout.description as payout_description,\n    refund.reason as refund_reason\nfrom balance_transaction\n\nleft join charge \n    on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer \n    on charge.customer_id = customer.customer_id\nleft join payment_intent \n    on charge.payment_intent_id = payment_intent.payment_intent_id\n\n{% if var('using_payment_method', True) %}\nleft join payment_method \n    on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join payment_method_card \n    on payment_method_card.payment_method_id = payment_method.payment_method_id\n{% endif %}\n\nleft join cards \n    on charge.card_id = cards.card_id\nleft join payout \n    on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund \n    on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge \n    on refund.charge_id = refund_charge.charge_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.dateadd"], "nodes": ["model.stripe_source.stg_stripe__balance_transaction", "model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__payment_intent", "model.stripe_source.stg_stripe__card", "model.stripe_source.stg_stripe__payout", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__payment_method", "model.stripe_source.stg_stripe__payment_method_card", "model.stripe_source.stg_stripe__refund"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stripe", "fqn": ["stripe", "stripe__balance_transactions"], "unique_id": "model.stripe.stripe__balance_transactions", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "stripe__balance_transactions.sql", "original_file_path": "models/stripe__balance_transactions.sql", "name": "stripe__balance_transactions", "alias": "stripe__balance_transactions", "checksum": {"name": "sha256", "checksum": "f83fc8596d10f937f3f25b5cb9ff302ad5841e380ea74b31f17e49ef7b00f49f"}, "tags": [], "refs": [["stg_stripe__balance_transaction"], ["stg_stripe__charge"], ["stg_stripe__payment_intent"], ["stg_stripe__card"], ["stg_stripe__payout"], ["stg_stripe__customer"], ["stg_stripe__payment_method"], ["stg_stripe__payment_method_card"], ["stg_stripe__refund"]], "sources": [], "description": "Each record represents a change to your account balance, enriched with data about the transaction.", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "Unique identifier for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "When the transaction took place", "meta": {}, "data_type": null, "quote": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the transaction\u2019s net funds will become available in the Stripe balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Gross amount of the transaction, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fee": {"name": "fee", "description": "Fees (in cents) paid for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of transaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporting_category": {"name": "reporting_category", "description": "Groupings of transactions types based on how they show in Stripe's reporting", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_facing_amount": {"name": "customer_facing_amount", "description": "The transaction amount that the customer sees.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_facing_currency": {"name": "customer_facing_currency", "description": "Three-letter ISO currency code that the customer sees.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_at": {"name": "effective_at", "description": "calendar day after available_at", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The customer associated with the balance transaction (based on charge or refund details)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "The email the receipt was emailed to for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "The description field associated with the customer", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "The id of the charge associated with the balance transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "The id of the payment intent associated with the balance transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_created_at": {"name": "charge_created_at", "description": "Timestamp of the charge object associated with the balance transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_type": {"name": "payment_method_type", "description": "The id of the payment method type associated with the balance transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_brand": {"name": "payment_method_brand", "description": "Card brand used for the payment method. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_funding": {"name": "payment_method_funding", "description": "Card funding type for the payment method. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_brand": {"name": "card_brand", "description": "The brand of the card associated with the balance transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_funding": {"name": "card_funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_country": {"name": "card_country", "description": "The country the card was issued in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payout_id": {"name": "payout_id", "description": "ID for the payout associated with this balance transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payout_expected_arrival_date": {"name": "payout_expected_arrival_date", "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payout_status": {"name": "payout_status", "description": "Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payout_type": {"name": "payout_type", "description": "Whether the payout was to a bank_account or card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payout_description": {"name": "payout_description", "description": "An arbitrary string attached to the payout. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_reason": {"name": "refund_reason", "description": "Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__balance_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1652476920.290816, "compiled_sql": "with balance_transaction as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__balance_transaction\"\n\n), charge as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__charge\"\n\n), payment_intent as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_intent\"\n\n), cards as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__card\"\n\n), payout as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payout\"\n\n\n), customer as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__customer\"\n\n\n\n), payment_method as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_method\"\n\n), payment_method_card as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_method_card\"\n\n\n\n), refund as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__refund\"\n\n)\n\nselect \n    balance_transaction.balance_transaction_id,\n    balance_transaction.created_at,\n    balance_transaction.available_on,\n    balance_transaction.currency,\n    balance_transaction.amount,\n    balance_transaction.fee,\n    balance_transaction.net,\n    balance_transaction.type,\n    case\n        when balance_transaction.type in ('charge', 'payment') then 'charge'\n        when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n        when balance_transaction.type in ('payout_cancel', 'payout_failure') then 'payout_reversal'\n        when balance_transaction.type in ('transfer', 'recipient_transfer') then 'transfer'\n        when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n        else balance_transaction.type\n    end as reporting_category,\n    balance_transaction.source,\n    balance_transaction.description,\n    case when balance_transaction.type = 'charge' then charge.amount end as customer_facing_amount, \n    case when balance_transaction.type = 'charge' then charge.currency end as customer_facing_currency,\n    \n\n    balance_transaction.available_on + ((interval '1 day') * (1))\n\n as effective_at,\n    coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n    charge.receipt_email,\n    customer.description as customer_description, \n\n    \n    payment_method.type as payment_method_type,\n    payment_method_card.brand as payment_method_brand,\n    payment_method_card.funding as payment_method_funding,\n    \n\n    charge.charge_id,\n    charge.payment_intent_id,\n    charge.created_at as charge_created_at,\n    cards.brand as card_brand,\n    cards.funding as card_funding,\n    cards.country as card_country,\n    payout.payout_id,\n    payout.arrival_date as payout_expected_arrival_date,\n    payout.status as payout_status,\n    payout.type as payout_type,\n    payout.description as payout_description,\n    refund.reason as refund_reason\nfrom balance_transaction\n\nleft join charge \n    on charge.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join customer \n    on charge.customer_id = customer.customer_id\nleft join payment_intent \n    on charge.payment_intent_id = payment_intent.payment_intent_id\n\n\nleft join payment_method \n    on payment_intent.payment_method_id = payment_method.payment_method_id\nleft join payment_method_card \n    on payment_method_card.payment_method_id = payment_method.payment_method_id\n\n\nleft join cards \n    on charge.card_id = cards.card_id\nleft join payout \n    on payout.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join refund \n    on refund.balance_transaction_id = balance_transaction.balance_transaction_id\nleft join charge as refund_charge \n    on refund.charge_id = refund_charge.charge_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__balance_transactions\""}, "model.stripe.stripe__invoice_line_items": {"raw_sql": "{{ config(enabled=var('using_invoices', True)) }}\n\nwith invoice as (\n\n    select *\n    from {{ var('invoice') }}  \n\n), charge as (\n\n    select *\n    from {{ var('charge') }}  \n\n), invoice_line_item as (\n\n    select *\n    from {{ var('invoice_line_item') }}  \n\n), customer as (\n\n    select *\n    from {{ var('customer') }}  \n\n{% if var('using_subscriptions', True) %}\n\n), subscription as (\n\n    select *\n    from {{ var('subscription') }}  \n\n), plan as (\n\n    select *\n    from {{ var('plan') }}  \n\n{% endif %}\n)\n\nselect \n    invoice.invoice_id,\n    invoice.number,\n    invoice.created_at as invoice_created_at,\n    invoice.status,\n    invoice.due_date,\n    invoice.amount_due,\n    invoice.subtotal,\n    invoice.tax,\n    invoice.total,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.attempt_count,\n    invoice.description as invoice_memo,\n    invoice_line_item.unique_id  as invoice_line_item_id,\n    invoice_line_item.description as line_item_desc,\n    invoice_line_item.amount as line_item_amount,\n    invoice_line_item.quantity,\n    invoice_line_item.period_start,\n    invoice_line_item.period_end,\n    charge.balance_transaction_id,\n    charge.amount as charge_amount, \n    charge.status as charge_status,\n    charge.created_at as charge_created_at,\n    customer.description as customer_description,\n    customer.email as customer_email,\n    customer.customer_id\n\n    {% if var('using_subscriptions', True) %}\n    ,subscription.subscription_id,\n    subscription.billing as subscription_billing,\n    subscription.start_date as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n    plan.plan_id,\n    plan.is_active as plan_is_active,\n    plan.amount as plan_amount,\n    plan.plan_interval as plan_interval,\n    plan.interval_count as plan_interval_count,\n    plan.nickname as plan_nickname,\n    plan.product_id as plan_product_id\n    {% endif %}\n    \nfrom invoice\n\nleft join charge \n    on charge.charge_id = invoice.charge_id\nleft join invoice_line_item \n    on invoice.invoice_id = invoice_line_item.invoice_id\n\n{% if var('using_subscriptions', True) %}\nleft join subscription \n    on invoice_line_item.subscription_id = subscription.subscription_id\nleft join plan \n    on invoice_line_item.plan_id = plan.plan_id\n{% endif %}\n\nleft join customer \n    on invoice.customer_id = customer.customer_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__subscription", "model.stripe_source.stg_stripe__plan"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stripe", "fqn": ["stripe", "stripe__invoice_line_items"], "unique_id": "model.stripe.stripe__invoice_line_items", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "stripe__invoice_line_items.sql", "original_file_path": "models/stripe__invoice_line_items.sql", "name": "stripe__invoice_line_items", "alias": "stripe__invoice_line_items", "checksum": {"name": "sha256", "checksum": "5cbe6790dce78f8c60a9bd4408d9bbef3d3d4e65bcdbdfedd2e941d2c222aee2"}, "tags": [], "refs": [["stg_stripe__invoice"], ["stg_stripe__charge"], ["stg_stripe__invoice_line_item"], ["stg_stripe__customer"], ["stg_stripe__subscription"], ["stg_stripe__plan"]], "sources": [], "description": "Each record represents an invoice line item, enriched with details about the associated charge, customer, subscription, and plan.", "columns": {"invoice_id": {"name": "invoice_id", "description": "The unique Identifier of the invoice object. Note invoices can have many line items, so this value can appear multiple times.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_created_at": {"name": "invoice_created_at", "description": "Timestamp of when the invoice was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date when payment for the invoice is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "The amount that the invoice is for. Because this query includes line item details, this amount may be repeated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "The amount of the invoice before discounts and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax being charged in the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total": {"name": "total", "description": "The Total after discounts and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, if any, that the customer has paid on the invoice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount of the invoice remaining to be paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_memo": {"name": "invoice_memo", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_line_item_id": {"name": "invoice_line_item_id", "description": "The unique Identifier of the invoice line object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_desc": {"name": "line_item_desc", "description": "The description of the invoice line item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_amount": {"name": "line_item_amount", "description": "The amount for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "The ID of the balance transaction object representing payment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "The amount charged to the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_status": {"name": "charge_status", "description": "The status of the charge for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_created_at": {"name": "charge_created_at", "description": "When the charge for the invoice was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "Description of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "ID of the subscription this invoice relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_billing": {"name": "subscription_billing", "description": "How the subscription is billed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_start_date": {"name": "subscription_start_date", "description": "The start date of the subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_ended_at": {"name": "subscription_ended_at", "description": "The end date of the subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_start": {"name": "period_start", "description": "Timestamp of the start of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_end": {"name": "period_end", "description": "Timestamp of the end of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The associated customer reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The ID of the plan of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_is_active": {"name": "plan_is_active", "description": "Boolean indicating if the plan is active (true) or in-active (false).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_amount": {"name": "plan_amount", "description": "The unit amount in cents to be charged, represented as a whole integer if possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_interval": {"name": "plan_interval", "description": "The frequency at which a subscription is billed. One of day, week, month or year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_interval_count": {"name": "plan_interval_count", "description": "The number of intervals between subscription billings. For example, interval_count=3 bills every 3 months.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_nickname": {"name": "plan_nickname", "description": "A brief description of the plan, hidden from customers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_product_id": {"name": "plan_product_id", "description": "Reference to the product whose pricing this plan determines.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__invoice_line_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table", "enabled": true}, "created_at": 1652476920.308944, "compiled_sql": "\n\nwith invoice as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__invoice\"  \n\n), charge as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__charge\"  \n\n), invoice_line_item as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__invoice_line_item\"  \n\n), customer as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__customer\"  \n\n\n\n), subscription as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__subscription\"  \n\n), plan as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__plan\"  \n\n\n)\n\nselect \n    invoice.invoice_id,\n    invoice.number,\n    invoice.created_at as invoice_created_at,\n    invoice.status,\n    invoice.due_date,\n    invoice.amount_due,\n    invoice.subtotal,\n    invoice.tax,\n    invoice.total,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.attempt_count,\n    invoice.description as invoice_memo,\n    invoice_line_item.unique_id  as invoice_line_item_id,\n    invoice_line_item.description as line_item_desc,\n    invoice_line_item.amount as line_item_amount,\n    invoice_line_item.quantity,\n    invoice_line_item.period_start,\n    invoice_line_item.period_end,\n    charge.balance_transaction_id,\n    charge.amount as charge_amount, \n    charge.status as charge_status,\n    charge.created_at as charge_created_at,\n    customer.description as customer_description,\n    customer.email as customer_email,\n    customer.customer_id\n\n    \n    ,subscription.subscription_id,\n    subscription.billing as subscription_billing,\n    subscription.start_date as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n    plan.plan_id,\n    plan.is_active as plan_is_active,\n    plan.amount as plan_amount,\n    plan.plan_interval as plan_interval,\n    plan.interval_count as plan_interval_count,\n    plan.nickname as plan_nickname,\n    plan.product_id as plan_product_id\n    \n    \nfrom invoice\n\nleft join charge \n    on charge.charge_id = invoice.charge_id\nleft join invoice_line_item \n    on invoice.invoice_id = invoice_line_item.invoice_id\n\n\nleft join subscription \n    on invoice_line_item.subscription_id = subscription.subscription_id\nleft join plan \n    on invoice_line_item.plan_id = plan.plan_id\n\n\nleft join customer \n    on invoice.customer_id = customer.customer_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__invoice_line_items\""}, "model.stripe.stripe__subscription_details": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['using_invoices','using_subscriptions'])) }}\n\nwith invoice as (\n\n    select *\n    from {{ var('invoice') }}  \n\n), charge as (\n\n    select *\n    from {{ var('charge') }}  \n\n), invoice_line_item as (\n\n    select *\n    from {{ var('invoice_line_item') }}  \n\n), subscription as (\n\n    select *\n    from {{ var('subscription') }}  \n\n), customer as (\n\n    select *\n    from {{ var('customer') }}  \n\n), line_items_groups as (\n\n  select\n    invoice.invoice_id,\n    invoice.amount_due,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.created_at,\n    max(invoice_line_item.subscription_id) as subscription_id,\n    sum(invoice_line_item.amount) as total_item_amount,\n    count(distinct invoice_line_item.unique_id) as number_line_items\n  from invoice_line_item\n  join invoice \n    on invoice.invoice_id = invoice_line_item.invoice_id\n  group by 1, 2, 3, 4, 5\n\n), grouped_by_subscription as (\n\n  select\n    subscription_id,\n    count(distinct invoice_id) as number_invoices_generated,\n    sum(amount_due) as total_amount_billed,\n    sum(amount_paid) as total_amount_paid,\n    sum(amount_remaining) total_amount_remaining,\n    max(created_at) as most_recent_invoice_created_at,\n    avg(amount_due) as average_invoice_amount,\n    avg(total_item_amount) as average_line_item_amount,\n    avg(number_line_items) as avg_num_invoice_items\n  from line_items_groups\n  group by 1\n\n)\n\n\nselect\n  subscription.subscription_id,\n  subscription.customer_id,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.status,\n  subscription.start_date,\n  subscription.ended_at,\n  subscription.billing,\n  subscription.billing_cycle_anchor,\n  subscription.canceled_at,\n  subscription.created_at,\n  subscription.current_period_start,\n  subscription.current_period_end,\n  subscription.days_until_due,\n  subscription.is_cancel_at_period_end,\n  subscription.cancel_at,\n  number_invoices_generated,\n  total_amount_billed,\n  total_amount_paid,\n  total_amount_remaining,\n  most_recent_invoice_created_at,\n  average_invoice_amount,\n  average_line_item_amount,\n  avg_num_invoice_items\nfrom subscription\nleft join grouped_by_subscription \n  on subscription.subscription_id = grouped_by_subscription.subscription_id\nleft join customer \n  on subscription.customer_id = customer.customer_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__subscription", "model.stripe_source.stg_stripe__customer"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stripe", "fqn": ["stripe", "stripe__subscription_details"], "unique_id": "model.stripe.stripe__subscription_details", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "stripe__subscription_details.sql", "original_file_path": "models/stripe__subscription_details.sql", "name": "stripe__subscription_details", "alias": "stripe__subscription_details", "checksum": {"name": "sha256", "checksum": "beab656911688a52896404b821af9effcfc7338e7cc0ac67b020633ef6bba3d7"}, "tags": [], "refs": [["stg_stripe__invoice"], ["stg_stripe__charge"], ["stg_stripe__invoice_line_item"], ["stg_stripe__subscription"], ["stg_stripe__customer"]], "sources": [], "description": "Each record represents a subscription, enriched with customer details and payment aggregations.", "columns": {"subscription_id": {"name": "subscription_id", "description": "Unique identifier for the subscription object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "Description of the customer who owns the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email of the customer who owns the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing": {"name": "billing", "description": "How the description is billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with cancel_at_period_end, canceled_at will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time at which the subscription object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_cancel_at_period_end": {"name": "is_cancel_at_period_end", "description": "If the subscription has been canceled with the at_period_end flag set to true, cancel_at_period_end on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_invoices_generated": {"name": "number_invoices_generated", "description": "Number of invoices that have been generated for this subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount_billed": {"name": "total_amount_billed", "description": "The total amount that has been billed to the customer for this subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount_paid": {"name": "total_amount_paid", "description": "The total amount paid by the customer for this subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_amount_remaining": {"name": "total_amount_remaining", "description": "Any outstanding balance for invoices related to this subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "most_recent_invoice_created_at": {"name": "most_recent_invoice_created_at", "description": "The timestamp of the most recent invoice for this subscription created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_invoice_amount": {"name": "average_invoice_amount", "description": "The average amount of invoices generated for this subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "average_line_item_amount": {"name": "average_line_item_amount", "description": "The average sum of the line items for invoices generated for this subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_num_invoice_items": {"name": "avg_num_invoice_items", "description": "The average number of line items for invoices generated for this subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__subscription_details.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table", "enabled": true}, "created_at": 1652476920.3170571, "compiled_sql": "\n\nwith invoice as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__invoice\"  \n\n), charge as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__charge\"  \n\n), invoice_line_item as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__invoice_line_item\"  \n\n), subscription as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__subscription\"  \n\n), customer as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__customer\"  \n\n), line_items_groups as (\n\n  select\n    invoice.invoice_id,\n    invoice.amount_due,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.created_at,\n    max(invoice_line_item.subscription_id) as subscription_id,\n    sum(invoice_line_item.amount) as total_item_amount,\n    count(distinct invoice_line_item.unique_id) as number_line_items\n  from invoice_line_item\n  join invoice \n    on invoice.invoice_id = invoice_line_item.invoice_id\n  group by 1, 2, 3, 4, 5\n\n), grouped_by_subscription as (\n\n  select\n    subscription_id,\n    count(distinct invoice_id) as number_invoices_generated,\n    sum(amount_due) as total_amount_billed,\n    sum(amount_paid) as total_amount_paid,\n    sum(amount_remaining) total_amount_remaining,\n    max(created_at) as most_recent_invoice_created_at,\n    avg(amount_due) as average_invoice_amount,\n    avg(total_item_amount) as average_line_item_amount,\n    avg(number_line_items) as avg_num_invoice_items\n  from line_items_groups\n  group by 1\n\n)\n\n\nselect\n  subscription.subscription_id,\n  subscription.customer_id,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.status,\n  subscription.start_date,\n  subscription.ended_at,\n  subscription.billing,\n  subscription.billing_cycle_anchor,\n  subscription.canceled_at,\n  subscription.created_at,\n  subscription.current_period_start,\n  subscription.current_period_end,\n  subscription.days_until_due,\n  subscription.is_cancel_at_period_end,\n  subscription.cancel_at,\n  number_invoices_generated,\n  total_amount_billed,\n  total_amount_paid,\n  total_amount_remaining,\n  most_recent_invoice_created_at,\n  average_invoice_amount,\n  average_line_item_amount,\n  avg_num_invoice_items\nfrom subscription\nleft join grouped_by_subscription \n  on subscription.subscription_id = grouped_by_subscription.subscription_id\nleft join customer \n  on subscription.customer_id = customer.customer_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__subscription_details\""}, "model.stripe.stripe__subscription_line_items": {"raw_sql": "{{ config(enabled=fivetran_utils.enabled_vars(['using_invoices','using_subscriptions'])) }}\n\n\nwith line_items as (\n\n  select *\n  from {{ ref('stripe__invoice_line_items') }}  \n  where subscription_id is not null\n\n)\n\nselect *\nfrom line_items", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.enabled_vars"], "nodes": ["model.stripe.stripe__invoice_line_items"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stripe", "fqn": ["stripe", "stripe__subscription_line_items"], "unique_id": "model.stripe.stripe__subscription_line_items", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "stripe__subscription_line_items.sql", "original_file_path": "models/stripe__subscription_line_items.sql", "name": "stripe__subscription_line_items", "alias": "stripe__subscription_line_items", "checksum": {"name": "sha256", "checksum": "36aa60d6867759f83f3883c00c5d3019145646e1b7cff6ae44bde1351e0a4b80"}, "tags": [], "refs": [["stripe__invoice_line_items"]], "sources": [], "description": "Each record represents a subscription invoice line item, enriched with details about the associated charge, customer, subscription, and plan. Use this table as the starting point for your company-specific churn and MRR calculations.", "columns": {"invoice_id": {"name": "invoice_id", "description": "The unique Identifier of the invoice object. Note invoices can have many line items, so this value can appear multiple times.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_created_at": {"name": "invoice_created_at", "description": "Timestamp of when the invoice was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Date when payment for the invoice is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "The amount that the invoice is for. Because this query includes line item details, this amount may be repeated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "The amount of the invoice before discounts and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax being charged in the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total": {"name": "total", "description": "The Total after discounts and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, if any, that the customer has paid on the invoice", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount of the invoice remaining to be paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_memo": {"name": "invoice_memo", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_line_item_id": {"name": "invoice_line_item_id", "description": "The unique Identifier of the invoice line object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_desc": {"name": "line_item_desc", "description": "The description of the invoice line item", "meta": {}, "data_type": null, "quote": null, "tags": []}, "line_item_amount": {"name": "line_item_amount", "description": "The amount for the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "The ID of the balance transaction object representing payment", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "The amount charged to the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_status": {"name": "charge_status", "description": "The status of the charge for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_created_at": {"name": "charge_created_at", "description": "When the charge for the invoice was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_description": {"name": "customer_description", "description": "Description of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_email": {"name": "customer_email", "description": "Email of the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "ID of the subscription this invoice relates to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_billing": {"name": "subscription_billing", "description": "How the subscription is billed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_start_date": {"name": "subscription_start_date", "description": "The start date of the subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_ended_at": {"name": "subscription_ended_at", "description": "The end date of the subscription", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_start": {"name": "period_start", "description": "Timestamp of the start of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_end": {"name": "period_end", "description": "Timestamp of the end of the period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The associated customer reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The ID of the plan of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_is_active": {"name": "plan_is_active", "description": "Boolean indicating if the plan is active (true) or in-active (false).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_amount": {"name": "plan_amount", "description": "The unit amount in cents to be charged, represented as a whole integer if possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_interval": {"name": "plan_interval", "description": "The frequency at which a subscription is billed. One of day, week, month or year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_interval_count": {"name": "plan_interval_count", "description": "The number of intervals between subscription billings. For example, interval_count=3 bills every 3 months.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_nickname": {"name": "plan_nickname", "description": "A brief description of the plan, hidden from customers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_product_id": {"name": "plan_product_id", "description": "Reference to the product whose pricing this plan determines.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__subscription_line_items.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table", "enabled": true}, "created_at": 1652476920.31382, "compiled_sql": "\n\n\nwith line_items as (\n\n  select *\n  from \"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__invoice_line_items\"  \n  where subscription_id is not null\n\n)\n\nselect *\nfrom line_items", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__subscription_line_items\""}, "model.stripe.stripe__monthly_overview": {"raw_sql": "with daily_overview as (\n\n    select *\n    from {{ ref('stripe__daily_overview') }}  \n\n)\n\nselect\n    {{ dbt_utils.date_trunc('month', 'date')}} as month,\n    sum(total_sales) as total_sales,\n    sum(total_refunds) as total_refunds,\n    sum(total_adjustments) as total_adjustments,\n    sum(total_other_transactions) as total_other_transactions,\n    sum(total_gross_transaction_amount) as total_gross_transaction_amount,\n    sum(total_net_transactions) as total_net_transactions,\n    sum(total_payout_fees) as total_payout_fees,\n    sum(total_gross_payout_amount) as total_gross_payout_amount,\n    sum(daily_net_activity) as monthly_net_activity,\n    sum(total_sales_count) as total_sales_count,\n    sum(total_payouts_count) as total_payouts_count,\n    sum(total_adjustments_count) as total_adjustments_count,\n    sum(total_failed_charge_count) as total_failed_charge_count,\n    sum(total_failed_charge_amount) as total_failed_charge_amount\nfrom daily_overview\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_trunc"], "nodes": ["model.stripe.stripe__daily_overview"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stripe", "fqn": ["stripe", "stripe__monthly_overview"], "unique_id": "model.stripe.stripe__monthly_overview", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "stripe__monthly_overview.sql", "original_file_path": "models/stripe__monthly_overview.sql", "name": "stripe__monthly_overview", "alias": "stripe__monthly_overview", "checksum": {"name": "sha256", "checksum": "c378ea72d596b76196ce441c98fc0d5f7f905a31717e6159f12a182bfd452d74"}, "tags": [], "refs": [["stripe__daily_overview"]], "sources": [], "description": "Each record represents a single month, enriched with metrics about balances, payments, refunds, payouts, and other transactions.", "columns": {"month": {"name": "month", "description": "The first day of the week associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments": {"name": "total_adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_other_transactions": {"name": "total_other_transactions", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_net_transactions": {"name": "total_net_transactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payout_fees": {"name": "total_payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_payout_amount": {"name": "total_gross_payout_amount", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "monthly_net_activity": {"name": "monthly_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payouts_count": {"name": "total_payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments_count": {"name": "total_adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "Number of incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "Total amount from incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__monthly_overview.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1652476920.3019772, "compiled_sql": "with daily_overview as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__daily_overview\"  \n\n)\n\nselect\n    date_trunc('month', date) as month,\n    sum(total_sales) as total_sales,\n    sum(total_refunds) as total_refunds,\n    sum(total_adjustments) as total_adjustments,\n    sum(total_other_transactions) as total_other_transactions,\n    sum(total_gross_transaction_amount) as total_gross_transaction_amount,\n    sum(total_net_transactions) as total_net_transactions,\n    sum(total_payout_fees) as total_payout_fees,\n    sum(total_gross_payout_amount) as total_gross_payout_amount,\n    sum(daily_net_activity) as monthly_net_activity,\n    sum(total_sales_count) as total_sales_count,\n    sum(total_payouts_count) as total_payouts_count,\n    sum(total_adjustments_count) as total_adjustments_count,\n    sum(total_failed_charge_count) as total_failed_charge_count,\n    sum(total_failed_charge_amount) as total_failed_charge_amount\nfrom daily_overview\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__monthly_overview\""}, "model.stripe.stripe__weekly_overview": {"raw_sql": "with daily_overview as (\n\n    select *\n    from {{ ref('stripe__daily_overview') }}  \n\n)\n\nselect\n    {{ dbt_utils.date_trunc('week', 'date')}} as week,\n    sum(total_sales) as total_sales,\n    sum(total_refunds) as total_refunds,\n    sum(total_adjustments) as total_adjustments,\n    sum(total_other_transactions) as total_other_transactions,\n    sum(total_gross_transaction_amount) as total_gross_transaction_amount,\n    sum(total_net_transactions) as total_net_transactions,\n    sum(total_payout_fees) as total_payout_fees,\n    sum(total_gross_payout_amount) as total_gross_payout_amount,\n    sum(daily_net_activity) as weekly_net_activity,\n    sum(total_sales_count) as total_sales_count,\n    sum(total_payouts_count) as total_payouts_count,\n    sum(total_adjustments_count) as total_adjustments_count,\n    sum(total_failed_charge_count) as total_failed_charge_count,\n    sum(total_failed_charge_amount) as total_failed_charge_amount\nfrom daily_overview\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_trunc"], "nodes": ["model.stripe.stripe__daily_overview"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stripe", "fqn": ["stripe", "stripe__weekly_overview"], "unique_id": "model.stripe.stripe__weekly_overview", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "stripe__weekly_overview.sql", "original_file_path": "models/stripe__weekly_overview.sql", "name": "stripe__weekly_overview", "alias": "stripe__weekly_overview", "checksum": {"name": "sha256", "checksum": "5c79cceb23b716ec1c395f9d2283632a6bf7b11a335abf7dd22cbc437e02bf1a"}, "tags": [], "refs": [["stripe__daily_overview"]], "sources": [], "description": "Each record represents a single week, enriched with metrics about balances, payments, refunds, payouts, and other transactions.", "columns": {"week": {"name": "week", "description": "The first day of the week associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments": {"name": "total_adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_other_transactions": {"name": "total_other_transactions", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_net_transactions": {"name": "total_net_transactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payout_fees": {"name": "total_payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_payout_amount": {"name": "total_gross_payout_amount", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_net_activity": {"name": "weekly_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payouts_count": {"name": "total_payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments_count": {"name": "total_adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "Number of incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "Total amount from incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__weekly_overview.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1652476920.299867, "compiled_sql": "with daily_overview as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__daily_overview\"  \n\n)\n\nselect\n    date_trunc('week', date) as week,\n    sum(total_sales) as total_sales,\n    sum(total_refunds) as total_refunds,\n    sum(total_adjustments) as total_adjustments,\n    sum(total_other_transactions) as total_other_transactions,\n    sum(total_gross_transaction_amount) as total_gross_transaction_amount,\n    sum(total_net_transactions) as total_net_transactions,\n    sum(total_payout_fees) as total_payout_fees,\n    sum(total_gross_payout_amount) as total_gross_payout_amount,\n    sum(daily_net_activity) as weekly_net_activity,\n    sum(total_sales_count) as total_sales_count,\n    sum(total_payouts_count) as total_payouts_count,\n    sum(total_adjustments_count) as total_adjustments_count,\n    sum(total_failed_charge_count) as total_failed_charge_count,\n    sum(total_failed_charge_amount) as total_failed_charge_amount\nfrom daily_overview\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__weekly_overview\""}, "model.stripe.stripe__quarterly_overview": {"raw_sql": "with daily_overview as (\n\n    select *\n    from {{ ref('stripe__daily_overview') }}  \n\n)\n\nselect\n    {{ dbt_utils.date_trunc('quarter', 'date')}} as quarter,\n    sum(total_sales) as total_sales,\n    sum(total_refunds) as total_refunds,\n    sum(total_adjustments) as total_adjustments,\n    sum(total_other_transactions) as total_other_transactions,\n    sum(total_gross_transaction_amount) as total_gross_transaction_amount,\n    sum(total_net_transactions) as total_net_transactions,\n    sum(total_payout_fees) as total_payout_fees,\n    sum(total_gross_payout_amount) as total_gross_payout_amount,\n    sum(daily_net_activity) as quarterly_net_activity,\n    sum(total_sales_count) as total_sales_count,\n    sum(total_payouts_count) as total_payouts_count,\n    sum(total_adjustments_count) as total_adjustments_count,\n    sum(total_failed_charge_count) as total_failed_charge_count,\n    sum(total_failed_charge_amount) as total_failed_charge_amount\nfrom daily_overview\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_trunc"], "nodes": ["model.stripe.stripe__daily_overview"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stripe", "fqn": ["stripe", "stripe__quarterly_overview"], "unique_id": "model.stripe.stripe__quarterly_overview", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "stripe__quarterly_overview.sql", "original_file_path": "models/stripe__quarterly_overview.sql", "name": "stripe__quarterly_overview", "alias": "stripe__quarterly_overview", "checksum": {"name": "sha256", "checksum": "63fa38b1ffd8509c100e79e0ecdcab5a1842fa8bdc2e30cd23fb233279f4200f"}, "tags": [], "refs": [["stripe__daily_overview"]], "sources": [], "description": "Each record represents a single quarter, enriched with metrics about balances, payments, refunds, payouts, and other transactions.", "columns": {"quarter": {"name": "quarter", "description": "The calendar quarter associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments": {"name": "total_adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_other_transactions": {"name": "total_other_transactions", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_net_transactions": {"name": "total_net_transactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payout_fees": {"name": "total_payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_payout_amount": {"name": "total_gross_payout_amount", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quarterly_net_activity": {"name": "quarterly_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payouts_count": {"name": "total_payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments_count": {"name": "total_adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "Number of incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "Total amount from incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__quarterly_overview.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1652476920.304088, "compiled_sql": "with daily_overview as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__daily_overview\"  \n\n)\n\nselect\n    date_trunc('quarter', date) as quarter,\n    sum(total_sales) as total_sales,\n    sum(total_refunds) as total_refunds,\n    sum(total_adjustments) as total_adjustments,\n    sum(total_other_transactions) as total_other_transactions,\n    sum(total_gross_transaction_amount) as total_gross_transaction_amount,\n    sum(total_net_transactions) as total_net_transactions,\n    sum(total_payout_fees) as total_payout_fees,\n    sum(total_gross_payout_amount) as total_gross_payout_amount,\n    sum(daily_net_activity) as quarterly_net_activity,\n    sum(total_sales_count) as total_sales_count,\n    sum(total_payouts_count) as total_payouts_count,\n    sum(total_adjustments_count) as total_adjustments_count,\n    sum(total_failed_charge_count) as total_failed_charge_count,\n    sum(total_failed_charge_amount) as total_failed_charge_amount\nfrom daily_overview\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__quarterly_overview\""}, "model.stripe.stripe__daily_overview": {"raw_sql": "with balance_transaction_joined as (\n\n    select *\n    from {{ ref('stripe__balance_transactions') }}  \n\n), incomplete_charges as (\n\n    select *\n    from {{ ref('int_stripe__incomplete_charges') }}  \n\n), daily_balance_transactions as (\n\n  select\n      case \n            when type = 'payout' \n            then {{ date_timezone('available_on') }}  \n            else {{ date_timezone('created_at') }} \n      end as date,\n    sum(case when type in ('charge', 'payment') \n          then amount \n          else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') \n          then amount \n          else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' \n          then amount \n          else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' \n          then amount \n          else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' \n          then amount \n          else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' \n          then net \n          else 0 end) as total_net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' \n          then fee * -1.0\n          else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' \n          then amount \n          else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' \n          then fee * -1.0 \n          else net end) as daily_net_activity,\n    sum(case when type in ('payment', 'charge') \n          then 1 \n          else 0 end) as total_sales_count,\n    sum(case when type = 'payout' \n          then 1 \n          else 0 end) as total_payouts_count,\n    count(distinct case when type = 'adjustment' \n            then coalesce(source, payout_id) \n            else null end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), daily_failed_charges as (\n\n    select\n      {{ date_timezone('created_at') }} as date,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n      daily_balance_transactions.date,\n      daily_balance_transactions.total_sales/100.0 as total_sales,\n      daily_balance_transactions.total_refunds/100.0 as total_refunds,\n      daily_balance_transactions.total_adjustments/100.0 as total_adjustments,\n      daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n      daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n      daily_balance_transactions.total_net_transactions/100.0 as total_net_transactions,\n      daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n      daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n      daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,\n      (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,\n      daily_balance_transactions.total_sales_count,\n      daily_balance_transactions.total_payouts_count,\n      daily_balance_transactions.total_adjustments_count,\n      coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n      coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom daily_balance_transactions\n\nleft join daily_failed_charges \n      on daily_balance_transactions.date = daily_failed_charges.date", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.stripe.date_timezone"], "nodes": ["model.stripe.stripe__balance_transactions", "model.stripe.int_stripe__incomplete_charges"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stripe", "fqn": ["stripe", "stripe__daily_overview"], "unique_id": "model.stripe.stripe__daily_overview", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "stripe__daily_overview.sql", "original_file_path": "models/stripe__daily_overview.sql", "name": "stripe__daily_overview", "alias": "stripe__daily_overview", "checksum": {"name": "sha256", "checksum": "18d8183e5391f72657ac52ea1dca925b7fb80c798e6697e85ef438f99a9451b2"}, "tags": [], "refs": [["stripe__balance_transactions"], ["int_stripe__incomplete_charges"]], "sources": [], "description": "Each record represents a single day, enriched with metrics about balances, payments, refunds, payouts, and other transactions.", "columns": {"date": {"name": "date", "description": "The date associated with the transactions.  The available_at field is used for payouts, and the transaction created_at is used for all others.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales": {"name": "total_sales", "description": "The sum of all sales during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_refunds": {"name": "total_refunds", "description": "The sum of all refunds during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments": {"name": "total_adjustments", "description": "The sum of all adjustments during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_other_transactions": {"name": "total_other_transactions", "description": "The sum of all other transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_transaction_amount": {"name": "total_gross_transaction_amount", "description": "Gross amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_net_transactions": {"name": "total_net_transactions", "description": "Net amount of all transactions (excluding payouts and transfers)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payout_fees": {"name": "total_payout_fees", "description": "Fees associated with all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_gross_payout_amount": {"name": "total_gross_payout_amount", "description": "Total amount of all payouts and transfers during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_net_activity": {"name": "daily_net_activity", "description": "Total balance transaction activity during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "daily_end_balance": {"name": "daily_end_balance", "description": "Account balance at the end of the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_sales_count": {"name": "total_sales_count", "description": "Number of sales transactions during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_payouts_count": {"name": "total_payouts_count", "description": "Number of payouts made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_adjustments_count": {"name": "total_adjustments_count", "description": "Number of adjustments made during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_count": {"name": "total_failed_charge_count", "description": "Number of incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_failed_charge_amount": {"name": "total_failed_charge_amount", "description": "Total amount from incomplete charges during the reporting period.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe://models/stripe.yml", "compiled_path": "target/compiled/stripe/models/stripe__daily_overview.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "table"}, "created_at": 1652476920.297766, "compiled_sql": "with  __dbt__cte__int_stripe__incomplete_charges as (\nwith charge as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__charge\"\n\n)\n\nselect \n  created_at,\n  customer_id,\n  amount\nfrom charge\nwhere not is_captured\n),balance_transaction_joined as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__balance_transactions\"  \n\n), incomplete_charges as (\n\n    select *\n    from __dbt__cte__int_stripe__incomplete_charges  \n\n), daily_balance_transactions as (\n\n  select\n      case \n            when type = 'payout' \n            then \n\ndate_trunc('day', \n\n\n    available_on\n\n\n)  \n            else \n\ndate_trunc('day', \n\n\n    created_at\n\n\n) \n      end as date,\n    sum(case when type in ('charge', 'payment') \n          then amount \n          else 0 end) as total_sales,\n    sum(case when type in ('payment_refund', 'refund') \n          then amount \n          else 0 end) as total_refunds,\n    sum(case when type = 'adjustment' \n          then amount \n          else 0 end) as total_adjustments,\n    sum(case when type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and type not like '%transfer%' \n          then amount \n          else 0 end) as total_other_transactions,\n    sum(case when type <> 'payout' and type not like '%transfer%' \n          then amount \n          else 0 end) as total_gross_transaction_amount,\n    sum(case when type <> 'payout' and type not like '%transfer%' \n          then net \n          else 0 end) as total_net_transactions,\n    sum(case when type = 'payout' or type like '%transfer%' \n          then fee * -1.0\n          else 0 end) as total_payout_fees,\n    sum(case when type = 'payout' or type like '%transfer%' \n          then amount \n          else 0 end) as total_gross_payout_amount,\n    sum(case when type = 'payout' or type like '%transfer%' \n          then fee * -1.0 \n          else net end) as daily_net_activity,\n    sum(case when type in ('payment', 'charge') \n          then 1 \n          else 0 end) as total_sales_count,\n    sum(case when type = 'payout' \n          then 1 \n          else 0 end) as total_payouts_count,\n    count(distinct case when type = 'adjustment' \n            then coalesce(source, payout_id) \n            else null end) as total_adjustments_count\n  from balance_transaction_joined\n  group by 1\n\n), daily_failed_charges as (\n\n    select\n      \n\ndate_trunc('day', \n\n\n    created_at\n\n\n) as date,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount\n    from incomplete_charges\n    group by 1\n\n)\n\nselect\n      daily_balance_transactions.date,\n      daily_balance_transactions.total_sales/100.0 as total_sales,\n      daily_balance_transactions.total_refunds/100.0 as total_refunds,\n      daily_balance_transactions.total_adjustments/100.0 as total_adjustments,\n      daily_balance_transactions.total_other_transactions/100.0 as total_other_transactions,\n      daily_balance_transactions.total_gross_transaction_amount/100.0 as total_gross_transaction_amount,\n      daily_balance_transactions.total_net_transactions/100.0 as total_net_transactions,\n      daily_balance_transactions.total_payout_fees/100.0 as total_payout_fees,\n      daily_balance_transactions.total_gross_payout_amount/100.0 as total_gross_payout_amount,\n      daily_balance_transactions.daily_net_activity/100.0 as daily_net_activity,\n      (daily_balance_transactions.daily_net_activity + daily_balance_transactions.total_gross_payout_amount)/100.0 as daily_end_balance,\n      daily_balance_transactions.total_sales_count,\n      daily_balance_transactions.total_payouts_count,\n      daily_balance_transactions.total_adjustments_count,\n      coalesce(daily_failed_charges.total_failed_charge_count, 0) as total_failed_charge_count,\n      coalesce(daily_failed_charges.total_failed_charge_amount/100, 0) as total_failed_charge_amount\nfrom daily_balance_transactions\n\nleft join daily_failed_charges \n      on daily_balance_transactions.date = daily_failed_charges.date", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.stripe.int_stripe__incomplete_charges", "sql": " __dbt__cte__int_stripe__incomplete_charges as (\nwith charge as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__charge\"\n\n)\n\nselect \n  created_at,\n  customer_id,\n  amount\nfrom charge\nwhere not is_captured\n)"}], "relation_name": "\"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__daily_overview\""}, "model.stripe.int_stripe__incomplete_charges": {"raw_sql": "with charge as (\n\n    select *\n    from {{ var('charge')}}\n\n)\n\nselect \n  created_at,\n  customer_id,\n  amount\nfrom charge\nwhere not is_captured", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.stripe_source.stg_stripe__charge"]}, "config": {"enabled": true, "alias": null, "schema": "stripe", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stripe", "fqn": ["stripe", "intermediate", "int_stripe__incomplete_charges"], "unique_id": "model.stripe.int_stripe__incomplete_charges", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "intermediate/int_stripe__incomplete_charges.sql", "original_file_path": "models/intermediate/int_stripe__incomplete_charges.sql", "name": "int_stripe__incomplete_charges", "alias": "int_stripe__incomplete_charges", "checksum": {"name": "sha256", "checksum": "1509eb2b4f4506ce3dc992428763a440b9144e4ea95d82f7f7cc530df9f2d469"}, "tags": [], "refs": [["stg_stripe__charge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe/models/intermediate/int_stripe__incomplete_charges.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "stripe", "materialized": "ephemeral"}, "created_at": 1652476920.177529, "compiled_sql": "with charge as (\n\n    select *\n    from \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__charge\"\n\n)\n\nselect \n  created_at,\n  customer_id,\n  amount\nfrom charge\nwhere not is_captured", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "test.stripe_source.unique_stg_stripe__balance_transaction_balance_transaction_id.2f29c783d0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "balance_transaction_id", "model": "{{ get_where_subquery(ref('stg_stripe__balance_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__balance_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__balance_transaction_balance_transaction_id"], "unique_id": "test.stripe_source.unique_stg_stripe__balance_transaction_balance_transaction_id.2f29c783d0", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "unique_stg_stripe__balance_transaction_balance_transaction_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__balance_transaction_balance_transaction_id", "alias": "unique_stg_stripe__balance_transaction_balance_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__balance_transaction"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__balance_transaction_balance_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.220059, "compiled_sql": "\n    \n    \n\nselect\n    balance_transaction_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__balance_transaction\"\nwhere balance_transaction_id is not null\ngroup by balance_transaction_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "balance_transaction_id", "file_key_name": "models.stg_stripe__balance_transaction"}, "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "balance_transaction_id", "model": "{{ get_where_subquery(ref('stg_stripe__balance_transaction')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__balance_transaction"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__balance_transaction_balance_transaction_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "not_null_stg_stripe__balance_transaction_balance_transaction_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__balance_transaction_balance_transaction_id", "alias": "not_null_stg_stripe__balance_transaction_balance_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__balance_transaction"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__balance_transaction_balance_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.2211142, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__balance_transaction\"\nwhere balance_transaction_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "balance_transaction_id", "file_key_name": "models.stg_stripe__balance_transaction"}, "test.stripe_source.unique_stg_stripe__card_card_id.000d85b677": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "card_id", "model": "{{ get_where_subquery(ref('stg_stripe__card')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__card"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__card_card_id"], "unique_id": "test.stripe_source.unique_stg_stripe__card_card_id.000d85b677", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "unique_stg_stripe__card_card_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__card_card_id", "alias": "unique_stg_stripe__card_card_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__card"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__card_card_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.222025, "compiled_sql": "\n    \n    \n\nselect\n    card_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__card\"\nwhere card_id is not null\ngroup by card_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "card_id", "file_key_name": "models.stg_stripe__card"}, "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "card_id", "model": "{{ get_where_subquery(ref('stg_stripe__card')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__card"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__card_card_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "not_null_stg_stripe__card_card_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__card_card_id", "alias": "not_null_stg_stripe__card_card_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__card"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__card_card_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.2229178, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__card\"\nwhere card_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "card_id", "file_key_name": "models.stg_stripe__card"}, "test.stripe_source.unique_stg_stripe__charge_charge_id.04b21ec6e0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "charge_id", "model": "{{ get_where_subquery(ref('stg_stripe__charge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__charge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__charge_charge_id"], "unique_id": "test.stripe_source.unique_stg_stripe__charge_charge_id.04b21ec6e0", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "unique_stg_stripe__charge_charge_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__charge_charge_id", "alias": "unique_stg_stripe__charge_charge_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__charge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__charge_charge_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.2239091, "compiled_sql": "\n    \n    \n\nselect\n    charge_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__charge\"\nwhere charge_id is not null\ngroup by charge_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "charge_id", "file_key_name": "models.stg_stripe__charge"}, "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "charge_id", "model": "{{ get_where_subquery(ref('stg_stripe__charge')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__charge"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__charge_charge_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "not_null_stg_stripe__charge_charge_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__charge_charge_id", "alias": "not_null_stg_stripe__charge_charge_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__charge"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__charge_charge_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.2247849, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__charge\"\nwhere charge_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "charge_id", "file_key_name": "models.stg_stripe__charge"}, "test.stripe_source.unique_stg_stripe__customer_customer_id.a06a928db2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_stripe__customer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__customer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__customer_customer_id"], "unique_id": "test.stripe_source.unique_stg_stripe__customer_customer_id.a06a928db2", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "unique_stg_stripe__customer_customer_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__customer_customer_id", "alias": "unique_stg_stripe__customer_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__customer"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__customer_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.2256708, "compiled_sql": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__customer\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.stg_stripe__customer"}, "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer_id", "model": "{{ get_where_subquery(ref('stg_stripe__customer')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__customer"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__customer_customer_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "not_null_stg_stripe__customer_customer_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__customer_customer_id", "alias": "not_null_stg_stripe__customer_customer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__customer"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__customer_customer_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.2266781, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__customer\"\nwhere customer_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer_id", "file_key_name": "models.stg_stripe__customer"}, "test.stripe_source.unique_stg_stripe__payment_intent_payment_intent_id.02430feefd": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_intent_id", "model": "{{ get_where_subquery(ref('stg_stripe__payment_intent')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_intent"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__payment_intent_payment_intent_id"], "unique_id": "test.stripe_source.unique_stg_stripe__payment_intent_payment_intent_id.02430feefd", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "unique_stg_stripe__payment_intent_payment_intent_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__payment_intent_payment_intent_id", "alias": "unique_stg_stripe__payment_intent_payment_intent_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__payment_intent"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__payment_intent_payment_intent_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.2275689, "compiled_sql": "\n    \n    \n\nselect\n    payment_intent_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_intent\"\nwhere payment_intent_id is not null\ngroup by payment_intent_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payment_intent_id", "file_key_name": "models.stg_stripe__payment_intent"}, "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_intent_id", "model": "{{ get_where_subquery(ref('stg_stripe__payment_intent')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_intent"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__payment_intent_payment_intent_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "not_null_stg_stripe__payment_intent_payment_intent_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__payment_intent_payment_intent_id", "alias": "not_null_stg_stripe__payment_intent_payment_intent_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__payment_intent"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__payment_intent_payment_intent_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.228429, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_intent\"\nwhere payment_intent_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payment_intent_id", "file_key_name": "models.stg_stripe__payment_intent"}, "test.stripe_source.unique_stg_stripe__payment_method_payment_method_id.b12d5fcf1b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_method_id", "model": "{{ get_where_subquery(ref('stg_stripe__payment_method')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_method"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__payment_method_payment_method_id"], "unique_id": "test.stripe_source.unique_stg_stripe__payment_method_payment_method_id.b12d5fcf1b", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "unique_stg_stripe__payment_method_payment_method_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__payment_method_payment_method_id", "alias": "unique_stg_stripe__payment_method_payment_method_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__payment_method"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__payment_method_payment_method_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.229407, "compiled_sql": "\n    \n    \n\nselect\n    payment_method_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_method\"\nwhere payment_method_id is not null\ngroup by payment_method_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payment_method_id", "file_key_name": "models.stg_stripe__payment_method"}, "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_method_id", "model": "{{ get_where_subquery(ref('stg_stripe__payment_method')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payment_method"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__payment_method_payment_method_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "not_null_stg_stripe__payment_method_payment_method_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__payment_method_payment_method_id", "alias": "not_null_stg_stripe__payment_method_payment_method_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__payment_method"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__payment_method_payment_method_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.230277, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payment_method\"\nwhere payment_method_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payment_method_id", "file_key_name": "models.stg_stripe__payment_method"}, "test.stripe_source.unique_stg_stripe__payout_payout_id.9d9065d2c5": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "payout_id", "model": "{{ get_where_subquery(ref('stg_stripe__payout')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payout"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__payout_payout_id"], "unique_id": "test.stripe_source.unique_stg_stripe__payout_payout_id.9d9065d2c5", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "unique_stg_stripe__payout_payout_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__payout_payout_id", "alias": "unique_stg_stripe__payout_payout_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__payout"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__payout_payout_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.231144, "compiled_sql": "\n    \n    \n\nselect\n    payout_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payout\"\nwhere payout_id is not null\ngroup by payout_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payout_id", "file_key_name": "models.stg_stripe__payout"}, "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "payout_id", "model": "{{ get_where_subquery(ref('stg_stripe__payout')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__payout"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__payout_payout_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "not_null_stg_stripe__payout_payout_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__payout_payout_id", "alias": "not_null_stg_stripe__payout_payout_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__payout"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__payout_payout_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.232024, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__payout\"\nwhere payout_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "payout_id", "file_key_name": "models.stg_stripe__payout"}, "test.stripe_source.unique_stg_stripe__refund_refund_id.0b7c337204": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "refund_id", "model": "{{ get_where_subquery(ref('stg_stripe__refund')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__refund"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__refund_refund_id"], "unique_id": "test.stripe_source.unique_stg_stripe__refund_refund_id.0b7c337204", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "unique_stg_stripe__refund_refund_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__refund_refund_id", "alias": "unique_stg_stripe__refund_refund_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__refund"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__refund_refund_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.233016, "compiled_sql": "\n    \n    \n\nselect\n    refund_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__refund\"\nwhere refund_id is not null\ngroup by refund_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "refund_id", "file_key_name": "models.stg_stripe__refund"}, "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "refund_id", "model": "{{ get_where_subquery(ref('stg_stripe__refund')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__refund"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__refund_refund_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "not_null_stg_stripe__refund_refund_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__refund_refund_id", "alias": "not_null_stg_stripe__refund_refund_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__refund"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__refund_refund_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.233883, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__refund\"\nwhere refund_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "refund_id", "file_key_name": "models.stg_stripe__refund"}, "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_id.e8805346de": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_id", "model": "{{ get_where_subquery(ref('stg_stripe__invoice_line_item')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__invoice_line_item"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__invoice_line_item_unique_id"], "unique_id": "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_id.e8805346de", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "unique_stg_stripe__invoice_line_item_unique_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__invoice_line_item_unique_id", "alias": "unique_stg_stripe__invoice_line_item_unique_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__invoice_line_item"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__invoice_line_item_unique_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.234751, "compiled_sql": "\n    \n    \n\nselect\n    unique_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__invoice_line_item\"\nwhere unique_id is not null\ngroup by unique_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "unique_id", "file_key_name": "models.stg_stripe__invoice_line_item"}, "test.stripe_source.unique_stg_stripe__invoice_invoice_id.63b5714c58": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_stripe__invoice')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__invoice"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__invoice_invoice_id"], "unique_id": "test.stripe_source.unique_stg_stripe__invoice_invoice_id.63b5714c58", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "unique_stg_stripe__invoice_invoice_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__invoice_invoice_id", "alias": "unique_stg_stripe__invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__invoice"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__invoice_invoice_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.235735, "compiled_sql": "\n    \n    \n\nselect\n    invoice_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__invoice\"\nwhere invoice_id is not null\ngroup by invoice_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "invoice_id", "file_key_name": "models.stg_stripe__invoice"}, "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_stripe__invoice')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__invoice"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__invoice_invoice_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "not_null_stg_stripe__invoice_invoice_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__invoice_invoice_id", "alias": "not_null_stg_stripe__invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__invoice"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__invoice_invoice_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.236598, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__invoice\"\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "invoice_id", "file_key_name": "models.stg_stripe__invoice"}, "test.stripe_source.not_null_stg_stripe__plan_plan_id.f59445523e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "plan_id", "model": "{{ get_where_subquery(ref('stg_stripe__plan')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__plan"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__plan_plan_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__plan_plan_id.f59445523e", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "not_null_stg_stripe__plan_plan_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__plan_plan_id", "alias": "not_null_stg_stripe__plan_plan_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__plan"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/not_null_stg_stripe__plan_plan_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.23746, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__plan\"\nwhere plan_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "plan_id", "file_key_name": "models.stg_stripe__plan"}, "test.stripe_source.unique_stg_stripe__plan_plan_id.b21f08031c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "plan_id", "model": "{{ get_where_subquery(ref('stg_stripe__plan')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe_source.stg_stripe__plan"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__plan_plan_id"], "unique_id": "test.stripe_source.unique_stg_stripe__plan_plan_id.b21f08031c", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "unique_stg_stripe__plan_plan_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__plan_plan_id", "alias": "unique_stg_stripe__plan_plan_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__plan"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe_source/models/stg_stripe.yml/unique_stg_stripe__plan_plan_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.2383292, "compiled_sql": "\n    \n    \n\nselect\n    plan_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stg_stripe\".\"stg_stripe__plan\"\nwhere plan_id is not null\ngroup by plan_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "plan_id", "file_key_name": "models.stg_stripe__plan"}, "test.stripe_source.unique_stg_stripe__credit_note_credit_note_id.135c7cd4a0": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "credit_note_id", "model": "{{ get_where_subquery(ref('stg_stripe__credit_note')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__credit_note_credit_note_id"], "unique_id": "test.stripe_source.unique_stg_stripe__credit_note_credit_note_id.135c7cd4a0", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "unique_stg_stripe__credit_note_credit_note_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__credit_note_credit_note_id", "alias": "unique_stg_stripe__credit_note_credit_note_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__credit_note"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.239307, "column_name": "credit_note_id", "file_key_name": "models.stg_stripe__credit_note"}, "test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_note_id", "model": "{{ get_where_subquery(ref('stg_stripe__credit_note')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__credit_note_credit_note_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "not_null_stg_stripe__credit_note_credit_note_id.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__credit_note_credit_note_id", "alias": "not_null_stg_stripe__credit_note_credit_note_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__credit_note"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.2401721, "column_name": "credit_note_id", "file_key_name": "models.stg_stripe__credit_note"}, "test.stripe_source.unique_stg_stripe__credit_note_line_item_credit_note_line_item_id.3972a0829e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_stripe__credit_note_bca3c96841994776de40078a094584d4\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "credit_note_line_item_id", "model": "{{ get_where_subquery(ref('stg_stripe__credit_note_line_item')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": "unique_stg_stripe__credit_note_bca3c96841994776de40078a094584d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "unique_stg_stripe__credit_note_line_item_credit_note_line_item_id"], "unique_id": "test.stripe_source.unique_stg_stripe__credit_note_line_item_credit_note_line_item_id.3972a0829e", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "unique_stg_stripe__credit_note_bca3c96841994776de40078a094584d4.sql", "original_file_path": "models/stg_stripe.yml", "name": "unique_stg_stripe__credit_note_line_item_credit_note_line_item_id", "alias": "unique_stg_stripe__credit_note_bca3c96841994776de40078a094584d4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__credit_note_line_item"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_stripe__credit_note_bca3c96841994776de40078a094584d4"}, "created_at": 1652476920.241036, "column_name": "credit_note_line_item_id", "file_key_name": "models.stg_stripe__credit_note_line_item"}, "test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_note_line_item_id", "model": "{{ get_where_subquery(ref('stg_stripe__credit_note_line_item')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": "not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe_source", "not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id"], "unique_id": "test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d.sql", "original_file_path": "models/stg_stripe.yml", "name": "not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id", "alias": "not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_stripe__credit_note_line_item"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_stripe__credit_no_3566f51b8444d66080a7df347c87b48d"}, "created_at": 1652476920.242101, "column_name": "credit_note_line_item_id", "file_key_name": "models.stg_stripe__credit_note_line_item"}, "test.stripe.unique_stripe__balance_transactions_balance_transaction_id.313ec591b5": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "balance_transaction_id", "model": "{{ get_where_subquery(ref('stripe__balance_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__balance_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe", "unique_stripe__balance_transactions_balance_transaction_id"], "unique_id": "test.stripe.unique_stripe__balance_transactions_balance_transaction_id.313ec591b5", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "unique_stripe__balance_transactions_balance_transaction_id.sql", "original_file_path": "models/stripe.yml", "name": "unique_stripe__balance_transactions_balance_transaction_id", "alias": "unique_stripe__balance_transactions_balance_transaction_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stripe__balance_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe/models/stripe.yml/unique_stripe__balance_transactions_balance_transaction_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.317486, "compiled_sql": "\n    \n    \n\nselect\n    balance_transaction_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__balance_transactions\"\nwhere balance_transaction_id is not null\ngroup by balance_transaction_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "balance_transaction_id", "file_key_name": "models.stripe__balance_transactions"}, "test.stripe.unique_stripe__invoice_line_items_invoice_line_item_id.6d4544857c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_line_item_id", "model": "{{ get_where_subquery(ref('stripe__invoice_line_items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__invoice_line_items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe", "unique_stripe__invoice_line_items_invoice_line_item_id"], "unique_id": "test.stripe.unique_stripe__invoice_line_items_invoice_line_item_id.6d4544857c", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "unique_stripe__invoice_line_items_invoice_line_item_id.sql", "original_file_path": "models/stripe.yml", "name": "unique_stripe__invoice_line_items_invoice_line_item_id", "alias": "unique_stripe__invoice_line_items_invoice_line_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stripe__invoice_line_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe/models/stripe.yml/unique_stripe__invoice_line_items_invoice_line_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.318597, "compiled_sql": "\n    \n    \n\nselect\n    invoice_line_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__invoice_line_items\"\nwhere invoice_line_item_id is not null\ngroup by invoice_line_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "invoice_line_item_id", "file_key_name": "models.stripe__invoice_line_items"}, "test.stripe.unique_stripe__subscription_line_items_invoice_line_item_id.a4a7f94547": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_line_item_id", "model": "{{ get_where_subquery(ref('stripe__subscription_line_items')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__subscription_line_items"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe", "unique_stripe__subscription_line_items_invoice_line_item_id"], "unique_id": "test.stripe.unique_stripe__subscription_line_items_invoice_line_item_id.a4a7f94547", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "unique_stripe__subscription_line_items_invoice_line_item_id.sql", "original_file_path": "models/stripe.yml", "name": "unique_stripe__subscription_line_items_invoice_line_item_id", "alias": "unique_stripe__subscription_line_items_invoice_line_item_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stripe__subscription_line_items"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe/models/stripe.yml/unique_stripe__subscription_line_items_invoice_line_item_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.3194938, "compiled_sql": "\n    \n    \n\nselect\n    invoice_line_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__subscription_line_items\"\nwhere invoice_line_item_id is not null\ngroup by invoice_line_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "invoice_line_item_id", "file_key_name": "models.stripe__subscription_line_items"}, "test.stripe.unique_stripe__subscription_details_subscription_id.8c3bcf1f61": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('stripe__subscription_details')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.stripe.stripe__subscription_details"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "stripe_source_integration_tests_dbt_test__audit", "fqn": ["stripe", "unique_stripe__subscription_details_subscription_id"], "unique_id": "test.stripe.unique_stripe__subscription_details_subscription_id.8c3bcf1f61", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "unique_stripe__subscription_details_subscription_id.sql", "original_file_path": "models/stripe.yml", "name": "unique_stripe__subscription_details_subscription_id", "alias": "unique_stripe__subscription_details_subscription_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stripe__subscription_details"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/stripe/models/stripe.yml/unique_stripe__subscription_details_subscription_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1652476920.320384, "compiled_sql": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"stripe_source_integration_tests_stripe\".\"stripe__subscription_details\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "subscription_id", "file_key_name": "models.stripe__subscription_details"}}, "sources": {"source.stripe_source.stripe.balance_transaction": {"fqn": ["stripe_source", "stripe", "balance_transaction"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.balance_transaction", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "balance_transaction", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "balance_transaction_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Balance transactions represent funds moving through your Stripe account. They're created for every type of transaction that comes into or flows out of your Stripe account balance.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Gross amount of the transaction, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "available_on": {"name": "available_on", "description": "The date the transaction\u2019s net funds will become available in the Stripe balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of when the transaction was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the amount in currency A, times exchange_rate, would be the amount in currency B.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fee": {"name": "fee", "description": "fees (in cents) paid for this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "net": {"name": "net", "description": "Net amount of the transaction, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The Stripe object to which this transaction is related.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "If the transaction\u2019s net funds are available in the Stripe balance yet. Either 'available' or 'pending'.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "the type of transaction.  Possible values are adjustment, advance, advance_funding, application_fee, application_fee_refund, charge, connect_collection_transfer, issuing_authorization_hold, issuing_authorization_release, issuing_dispute, issuing_transaction, payment, payment_failure_refund, payment_refund, payout, payout_cancel, payout_failure, refund, refund_failure, reserve_transaction, reserved_funds, stripe_fee, stripe_fx_fee, tax_fee, topup, topup_reversal, transfer, transfer_cancel, transfer_failure, or transfer_refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"balance_transaction_data\"", "created_at": 1652476920.3210208}, "source.stripe_source.stripe.card": {"fqn": ["stripe_source", "stripe", "card"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.card", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "card", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "card_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "details of a credit card that has been saved to the system.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you\u2019ve collected.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of when the entry for the card was created", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The customer that this card belongs to.  NULL if belongs to an account or recipient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Cardholder name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recipient": {"name": "recipient", "description": "The recipient that this card belongs to. NULL if the card belongs to a customer or account instead.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funding": {"name": "funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"card_data\"", "created_at": 1652476920.321113}, "source.stripe_source.stripe.charge": {"fqn": ["stripe_source", "stripe", "charge"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.charge", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "charge", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "charge_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "To charge a credit or a debit card, you create a Charge object. You can retrieve and refund individual charges as well as list all charges. Charges are identified by a unique, random ID.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this payment. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_refunded": {"name": "amount_refunded", "description": "The amount of the charge, if any, that has been refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "captured": {"name": "captured", "description": "If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "card_id": {"name": "card_id", "description": "ID of the card that was charged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of the date the charge was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer this charge is for if one exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failure_code": {"name": "failure_code", "description": "Error code explaining reason for charge failure if available.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "failure_message": {"name": "failure_message", "description": "Message to user further explaining reason for charge failure if available.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid": {"name": "paid", "description": "true if the charge succeeded, or was successfully authorized for later capture.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_intent_id": {"name": "payment_intent_id", "description": "ID of the PaymentIntent associated with this charge, if one exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "This is the email address that the receipt for this charge was sent to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refunded": {"name": "refunded", "description": "Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the payment is either succeeded, pending, or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"charge_data\"", "created_at": 1652476920.321196}, "source.stripe_source.stripe.customer": {"fqn": ["stripe_source", "stripe", "customer"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.customer", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "customer", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "customer_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Customer objects allow you to perform recurring charges, and to track multiple charges, that are associated with the same customer.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_balance": {"name": "account_balance", "description": "Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of when the customer entry was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO code for the currency the customer can be charged in for recurring billing purposes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_card_id": {"name": "default_card_id", "description": "ID for the default card used by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "delinquent": {"name": "delinquent", "description": "When the customer\u2019s latest invoice is billed by charging automatically, delinquent is true if the invoice\u2019s latest charge is failed. When the customer\u2019s latest invoice is billed by sending an invoice, delinquent is true if the invoice is not paid by its due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "The customer\u2019s email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_city": {"name": "shipping_address_city", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_country": {"name": "shipping_address_country", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_line_1": {"name": "shipping_address_line_1", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_line_2": {"name": "shipping_address_line_2", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_postal_code": {"name": "shipping_address_postal_code", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_address_state": {"name": "shipping_address_state", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_name": {"name": "shipping_name", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "shipping_phone": {"name": "shipping_phone", "description": "Attribute of the customer's shipping address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"customer_data\"", "created_at": 1652476920.321266}, "source.stripe_source.stripe.fee": {"fqn": ["stripe_source", "stripe", "fee"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.fee", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "fee", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "fee_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "The details of a fee associated with a balance_transaction", "columns": {"balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction entry the fee applies to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount of the fee, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that earned the fee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of the fee, can be application_fee, stripe_fee or tax.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"fee_data\"", "created_at": 1652476920.3213282}, "source.stripe_source.stripe.payment_intent": {"fqn": ["stripe_source", "stripe", "payment_intent"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.payment_intent", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "payment_intent", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "payment_intent_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "A Payment Intent guides you through the process of collecting a payment from your customer.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge \u00a5100, a zero-decimal currency)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_capturable": {"name": "amount_capturable", "description": "Amount that can be captured from this PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_received": {"name": "amount_received", "description": "Amount that was collected by this PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application": {"name": "application", "description": "ID of the Connect application that created the PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "application_fee_amount": {"name": "application_fee_amount", "description": "The amount of the application fee (if any) for the resulting payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "Populated when status is canceled, this is the time at which the PaymentIntent was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancellation_reason": {"name": "cancellation_reason", "description": "Reason for cancellation of this PaymentIntent, either user-provided (duplicate, fraudulent, requested_by_customer, or abandoned) or generated by Stripe internally (failed_invoice, void_invoice, or automatic).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "capture_method": {"name": "capture_method", "description": "Controls when the funds will be captured from the customer\u2019s account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "confirmation_method": {"name": "confirmation_method", "description": "Whether confirmed automatically or manually", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the Customer this PaymentIntent belongs to, if one exists.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method used in this PaymentIntent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_email": {"name": "receipt_email", "description": "Email address that the receipt for the resulting payment will be sent to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "statement_descriptor": {"name": "statement_descriptor", "description": "For non-card charges, you can use this value as the complete description that appears on your customers\u2019 statements.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test payment intent.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"payment_intent_data\"", "created_at": 1652476920.3213959}, "source.stripe_source.stripe.payment_method_card": {"fqn": ["stripe_source", "stripe", "payment_method_card"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.payment_method_card", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "payment_method_card", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "payment_method_card_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Table with the relationships between a payment methods and a card", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "ID of the payment method", "meta": {}, "data_type": null, "quote": null, "tags": []}, "brand": {"name": "brand", "description": "Card brand. Can be American Express, Diners Club, Discover, JCB, MasterCard, UnionPay, Visa, or Unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "funding": {"name": "funding", "description": "Card funding type. Can be credit, debit, prepaid, or unknown.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"payment_method_card_data\"", "created_at": 1652476920.321453}, "source.stripe_source.stripe.payment_method": {"fqn": ["stripe_source", "stripe", "payment_method"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.payment_method", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "payment_method", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "payment_method_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "PaymentMethod objects represent your customer's payment instruments. They can be used with PaymentIntents to collect payments or saved to Customer objects to store instrument details for future payments.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"payment_method_data\"", "created_at": 1652476920.3215091}, "source.stripe_source.stripe.payout": {"fqn": ["stripe_source", "stripe", "payout"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.payout", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "payout", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "payout_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "A Payout object is created when you receive funds from Stripe, or when you initiate a payout to either a bank account or debit card of a connected Stripe account.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount (in cents) to be transferred to your bank account or debit card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "arrival_date": {"name": "arrival_date", "description": "Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "automatic": {"name": "automatic", "description": "true if the payout was created by an automated payout schedule, and false if it was requested manually.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID of the balance transaction that describes the impact of this payout on your account balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "method": {"name": "method", "description": "The method used to send this payout, which can be standard or instant.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The source balance this payout came from. One of card, fpx, or bank_account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Current status of the payout.  Can be paid, pending, in_transit, canceled or failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Can be bank_account or card.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test payout.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"payout_data\"", "created_at": 1652476920.3215759}, "source.stripe_source.stripe.refund": {"fqn": ["stripe_source", "stripe", "refund"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.refund", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "refund", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "refund_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Details of transactions that have been refunded", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "Amount, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance_transaction_id": {"name": "balance_transaction_id", "description": "ID for the balance transaction that describes the impact on your account balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the charge that was refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "Reason for the refund, either user-provided (duplicate, fraudulent, or requested_by_customer) or generated by Stripe internally (expired_uncaptured_charge).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the refund. For credit card refunds, this can be pending, succeeded, or failed. For other types of refunds, it can be pending, succeeded, failed, or canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"refund_data\"", "created_at": 1652476920.3216372}, "source.stripe_source.stripe.invoice_line_item": {"fqn": ["stripe_source", "stripe", "invoice_line_item"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.invoice_line_item", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "invoice_line_item", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "invoice_line_item_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "The different items that an invoice contains", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The ID of the invoice this item is a part of", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount, in cents.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discountable": {"name": "discountable", "description": "If true, discounts will apply to this line item. Always false for prorations.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "plan_id": {"name": "plan_id", "description": "The ID of the plan of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "proration": {"name": "proration", "description": "Whether this is a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of the subscription, if the line item is a subscription or a proration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The ID of the subscription that the invoice item pertains to, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_item_id": {"name": "subscription_item_id", "description": "The subscription item that generated this invoice item. Left empty if the line item is not an explicit result of a subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "A string identifying the type of the source of this line item, either an invoice item or a subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_id": {"name": "unique_id", "description": "A unique id generated for old invoice ID's from a past version of the API", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test invoice line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"invoice_line_item_data\"", "created_at": 1652476920.3217}, "source.stripe_source.stripe.invoice": {"fqn": ["stripe_source", "stripe", "invoice"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.invoice", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "invoice", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "invoice_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Invoices are statements of amounts owed by a customer, and are either generated one-off, or generated periodically from a subscription.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_due": {"name": "amount_due", "description": "Final amount due at this time for this invoice. If the invoice\u2019s total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_paid": {"name": "amount_paid", "description": "The amount, in cents, that was paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_remaining": {"name": "amount_remaining", "description": "The amount remaining, in cents, that is due.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "attempt_count": {"name": "attempt_count", "description": "Number of payment attempts made for this invoice, from the perspective of the payment retry schedule.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_advance": {"name": "auto_advance", "description": "Controls whether Stripe will perform automatic collection of the invoice. When false, the invoice\u2019s state will not automatically advance without an explicit action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_reason": {"name": "billing_reason", "description": "Indicates the reason why the invoice was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_id": {"name": "charge_id", "description": "ID of the latest charge generated for this invoice, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "The ID of the customer who will be billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "An arbitrary string attached to the object. Often useful for displaying to users. Referenced as \u2018memo\u2019 in the Dashboard.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The date on which payment for this invoice is due. This value will be null for invoices where collection_method=charge_automatically.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer\u2019s unique invoice_prefix if it is specified.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid": {"name": "paid", "description": "Whether payment was successfully collected for this invoice. An invoice can be paid (most commonly) with a charge or with credit from the customer\u2019s account balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "receipt_number": {"name": "receipt_number", "description": "This is the transaction number that appears on email receipts sent for this invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "Total of all subscriptions, invoice items, and prorations on the invoice before any discount or tax is applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax": {"name": "tax", "description": "The amount of tax on this invoice. This is the sum of all the tax amounts on this invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_percent": {"name": "tax_percent", "description": "The percent used to calculate the tax amount.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total": {"name": "total", "description": "Total after discounts and taxes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"invoice_data\"", "created_at": 1652476920.321772}, "source.stripe_source.stripe.subscription_history": {"fqn": ["stripe_source", "stripe", "subscription_history"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.subscription_history", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "subscription_history", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "subscription_history_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Subscriptions allow you to charge a customer on a recurring basis. Please note this source table is used only on connectors setup **after** February 09, 2022.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing": {"name": "billing", "description": "How the invoice is billed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_at_period_end": {"name": "cancel_at_period_end", "description": "Boolean indicating whether this subscription should cancel at the end of the current period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_active": {"name": "_fivetran_active", "description": "Boolean indicating if the record is the latest.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"subscription_history_data\"", "created_at": 1652476920.321839}, "source.stripe_source.stripe.subscription": {"fqn": ["stripe_source", "stripe", "subscription"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.subscription", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "subscription", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "subscription_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Subscriptions allow you to charge a customer on a recurring basis. Please note this source table is only present in connectors setup **before** February 09, 2022.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Possible values are incomplete, incomplete_expired, trialing, active, past_due, canceled, or unpaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing": {"name": "billing", "description": "How the invoice is billed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_cycle_anchor": {"name": "billing_cycle_anchor", "description": "Determines the date of the first full invoice, and, for plans with month or year intervals, the day of the month for subsequent invoices.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_at": {"name": "cancel_at", "description": "A date in the future at which the subscription will automatically get canceled", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_at_period_end": {"name": "cancel_at_period_end", "description": "Boolean indicating whether this subscription should cancel at the end of the current period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "canceled_at": {"name": "canceled_at", "description": "If the subscription has been canceled, the date of that cancellation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Time at which the object was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_start": {"name": "current_period_start", "description": "Start of the current period that the subscription has been invoiced for.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_period_end": {"name": "current_period_end", "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_id": {"name": "customer_id", "description": "ID of the customer who owns the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_until_due": {"name": "days_until_due", "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be null for subscriptions where collection_method=charge_automatically.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Date when the subscription was first created. The date might differ from the created date due to backdating.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "If the subscription has ended, the date the subscription ended.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"subscription_data\"", "created_at": 1652476920.321902}, "source.stripe_source.stripe.plan": {"fqn": ["stripe_source", "stripe", "plan"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.plan", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "plan", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "plan_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Plans define the base price, currency, and billing cycle for recurring purchases of products.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "Whether the plan can be used for new purchases.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The unit amount in cents to be charged, represented as a whole integer if possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interval": {"name": "interval", "description": "The frequency at which a subscription is billed. One of day, week, month or year.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "interval_count": {"name": "interval_count", "description": "The number of intervals between subscription billings. For example, interval_count=3 bills every 3 months.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Custom metadata added to the record, in JSON string format", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nickname": {"name": "nickname", "description": "A brief description of the plan, hidden from customers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product": {"name": "product", "description": "The product whose pricing this plan determines.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Indicates if this is a test plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"plan_data\"", "created_at": 1652476920.322191}, "source.stripe_source.stripe.credit_note": {"fqn": ["stripe_source", "stripe", "credit_note"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.credit_note", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "credit_note", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "credit_note_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Credit notes are documents that decrease the amount owed on an invoice. They\u2019re the only way to adjust the amount of a finalized invoice other than voiding and recreating the invoice.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The integer amount in cents representing the total amount of the credit note, including tax.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of the when the credit_note was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the charge. Three-letter ISO currency code, in lowercase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_amount": {"name": "discount_amount", "description": "The integer amount in cents representing the total amount of discount that was credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtotal": {"name": "subtotal", "description": "The integer amount in cents representing the amount of the credit note, excluding tax and invoice level discounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total": {"name": "total", "description": "The integer amount in cents representing the total amount of the credit note, including tax and all discount.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Has the value true if the object exists in live mode or the value false if the object exists in test mode.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "Customer-facing text that appears on the credit note PDF.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "metadata": {"name": "metadata", "description": "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pdf": {"name": "pdf", "description": "The link to download the PDF of the credit note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason": {"name": "reason", "description": "Reason for issuing this credit note, one of duplicate, fraudulent, order_change, or product_unsatisfactory", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of this credit note, one of issued or void. Learn more about voiding credit notes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Type of this credit note, one of pre_payment or post_payment. A pre_payment credit note means it was issued when the invoice was open. A post_payment credit note means it was issued when the invoice was paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voided_at": {"name": "voided_at", "description": "The time that the credit note was voided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_balance_transaction": {"name": "customer_balance_transaction", "description": "Customer balance transaction related to this credit note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with this credit note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_id": {"name": "refund_id", "description": "The id of the refund associated with this credit note.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"credit_note_data\"", "created_at": 1652476920.3222651}, "source.stripe_source.stripe.credit_note_line_item": {"fqn": ["stripe_source", "stripe", "credit_note_line_item"], "database": "postgres", "schema": "stripe_integration_tests", "unique_id": "source.stripe_source.stripe.credit_note_line_item", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "models/src_stripe.yml", "original_file_path": "models/src_stripe.yml", "name": "credit_note_line_item", "source_name": "stripe", "source_description": "", "loader": "fivetran", "identifier": "credit_note_line_item_data", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "The different items that a credit note contains.", "columns": {"id": {"name": "id", "description": "Unique identifier for the object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_note_id": {"name": "credit_note_id", "description": "The ID of the credit note this item is a part of.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The integer amount in cents representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_amount": {"name": "discount_amount", "description": "The integer amount in cents representing the discount being credited for this line item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the item being credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "livemode": {"name": "livemode", "description": "Has the value true if the object exists in live mode or the value false if the object exists in test mode.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The number of units of product being credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the credit note line item, one of invoice_line_item or custom_line_item. When the type is invoice_line_item there is an additional invoice_line_item property on the resource the value of which is the id of the credited line item on the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_amount": {"name": "unit_amount", "description": "The cost of each unit of product being credited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_amount_decimal": {"name": "unit_amount_decimal", "description": "Same as unit_amount, but contains a decimal value with at most 12 decimal places.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"stripe_integration_tests\".\"credit_note_line_item_data\"", "created_at": 1652476920.322326}}, "macros": {"macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.299989}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.300672}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3058739}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3063731}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.306684}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.306997}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.307468}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3078349}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.308007}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.308352}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.308737}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.308811}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3089888}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3090901}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.309997}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.31042}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.310643}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3112361}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.311996}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3131}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.313292}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3134289}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.313565}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.313708}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.314125}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.314419}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.314718}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.315192}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.315456}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.318646}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.318816}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.319031}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.319166}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.319256}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3200488}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.320211}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.320374}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.321335}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.323159}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.326216}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.326496}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3266711}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.326754}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.326952}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.327797}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.327981}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.328224}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.328649}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.334452}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.336499}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.336996}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.337313}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.337734}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.338113}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.338944}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.339488}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3400981}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.343022}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.344202}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.344459}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.344898}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3451679}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.345818}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3466282}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.351635}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.356439}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.357684}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.358918}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3596559}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.363463}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.363986}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.364175}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.364383}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3647969}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.36841}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.368814}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.369047}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.370322}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3707578}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.370924}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.371281}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.371596}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3746078}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.378491}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.379392}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3796291}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.380109}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.380252}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.380369}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3805299}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.38064}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3812668}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.381623}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.382962}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3835158}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.383756}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3843331}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.384597}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.384882}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3853362}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3856041}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.386018}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.386253}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.386559}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3871832}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.388319}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3888981}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.389189}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3908942}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.392143}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.392896}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.393128}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.393558}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.393737}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.393897}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.394071}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.394559}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3946931}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.394846}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.395234}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.396781}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.39709}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.39727}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3974788}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.397658}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.397813}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3980072}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3982809}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3985238}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.3991349}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.399363}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.399551}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.400042}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.400183}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.400407}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.400817}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4014988}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4016619}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4018629}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.402035}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.402297}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4027689}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.404149}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.404396}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4045708}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.404722}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4048991}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4051359}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4053388}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.405704}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.405886}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.406037}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.407705}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.40786}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.408164}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.408347}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4086778}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.408903}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.409492}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.409746}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.410508}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.411073}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.411304}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.411582}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.411849}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.412153}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4122229}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.412294}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.41267}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.412831}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4131289}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4133198}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.414017}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4140868}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4141598}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4142258}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.414291}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4144452}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4145129}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4145799}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.414644}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.414797}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4148638}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.414931}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.415085}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.415154}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4152188}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.415379}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.415445}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.41551}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.41572}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4157891}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.415853}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.416349}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.416699}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4168031}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.416899}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.417481}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.417643}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4178}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4179509}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.41814}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.418436}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.418506}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.418575}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4189482}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.419085}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.41922}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.419355}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.419914}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4200478}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.420198}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4204118}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.422566}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.422959}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4232378}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.423614}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.424545}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.427009}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.427167}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.427318}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.429047}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.429245}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.429651}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4297888}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.429909}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.430027}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.430367}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4305}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.430621}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4309828}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.431125}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.431245}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.431751}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.431851}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.431943}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4322739}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.432373}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4324732}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.432875}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.433011}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4331431}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4336839}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4337978}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.43444}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.434558}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4346292}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.434703}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.434863}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.434988}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4351392}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.435251}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4353862}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.436906}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4373848}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.43787}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.438059}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.438464}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.438563}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.438657}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.438755}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.439349}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.439685}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.439832}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4402199}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.440392}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4408572}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4410272}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.441212}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.441602}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.441726}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.441849}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4427168}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.448204}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.448715}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.449028}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4495082}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.454591}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.455071}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4555662}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4561212}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.456762}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4571269}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.457438}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.458}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.458224}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4586549}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.458949}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.459625}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.459957}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4604049}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.460738}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.461112}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.461278}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4619}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.462423}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.463}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4633741}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.463826}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.46399}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4643588}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.464538}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.46517}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.465801}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.466392}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.466729}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.467233}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.467519}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4679759}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4684842}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.469183}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.469839}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.470289}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.470454}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.471207}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.47207}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.475012}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.476458}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.476786}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.476949}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4772758}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.47747}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.477777}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.477947}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4784598}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.479164}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4797409}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.479966}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4803252}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.480682}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.481089}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.481775}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.48261}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.483432}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.483847}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.484034}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.484545}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.485238}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.486068}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4865248}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4868019}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4874308}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {%- for col in dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.488256}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4899242}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4919848}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.494175}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4968991}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4972491}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.497489}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, group_by, order_by=none, relation_alias=none) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, group_by, order_by=order_by, relation_alias=relation_alias)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.498202}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, group_by, order_by=none, relation_alias=none) -%}\n\n    select\n        {{ dbt_utils.star(relation, relation_alias='deduped') | indent }}\n    from (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ group_by }}\n                {% if order_by is not none -%}\n                order by {{ order_by }}\n                {%- endif %}\n            ) as rn\n        from {{ relation if relation_alias is none else relation_alias }} as _inner\n    ) as deduped\n    where deduped.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4985878}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, group_by, order_by=none, relation_alias=none) -%}\n\n    select\n        {{ dbt_utils.star(relation, relation_alias='deduped') | indent }}\n    from (\n        select\n            array_agg (\n                original\n                {% if order_by is not none -%}\n                order by {{ order_by }}\n                {%- endif %}\n                limit 1\n            )[offset(0)] as deduped\n        from {{ relation if relation_alias is none else relation_alias }} as original\n        group by {{ group_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4989738}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.4995809}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5005162}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.500941}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5012212}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.501596}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5019279}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5033898}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.503655}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.504357}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5049138}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.505897}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.507294}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.508364}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5091882}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.509682}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.510408}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.510835}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5114229}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.511913}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5119948}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.512074}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.51215}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.513162}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.513437}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.515135}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.515997}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.516456}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__percentile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.517361}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.517525}, "macro.fivetran_utils.redshift__percentile": {"unique_id": "macro.fivetran_utils.redshift__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5176792}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.517843}, "macro.fivetran_utils.postgres__percentile": {"unique_id": "macro.fivetran_utils.postgres__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.517983}, "macro.fivetran_utils.spark__percentile": {"unique_id": "macro.fivetran_utils.spark__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.518136}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5186062}, "macro.fivetran_utils.persist_pass_through_columns": {"unique_id": "macro.fivetran_utils.persist_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "name": "persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.519042}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5200808}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.520323}, "macro.fivetran_utils.redshift__json_parse": {"unique_id": "macro.fivetran_utils.redshift__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.520563}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5207958}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5210292}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5212932}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5215518}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.52192}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.522018}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.522112}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.52227}, "macro.fivetran_utils.calculated_fields": {"unique_id": "macro.fivetran_utils.calculated_fields", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "name": "calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.522683}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5233002}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field.transform_sql %}\n            , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n        {% else %}\n            , {{ field.alias if field.alias else field.name }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.523953}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5244539}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.524584}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.524711}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.524839}, "macro.fivetran_utils.spark__string_agg": {"unique_id": "macro.fivetran_utils.spark__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.524966}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5276291}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.527786}, "macro.fivetran_utils.redshift__timestamp_diff": {"unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5279381}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.528091}, "macro.fivetran_utils.postgres__timestamp_diff": {"unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.529929}, "macro.fivetran_utils.try_cast": {"unique_id": "macro.fivetran_utils.try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.530751}, "macro.fivetran_utils.default__safe_cast": {"unique_id": "macro.fivetran_utils.default__safe_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5308852}, "macro.fivetran_utils.redshift__try_cast": {"unique_id": "macro.fivetran_utils.redshift__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5311549}, "macro.fivetran_utils.postgres__try_cast": {"unique_id": "macro.fivetran_utils.postgres__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.531429}, "macro.fivetran_utils.snowflake__try_cast": {"unique_id": "macro.fivetran_utils.snowflake__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.531557}, "macro.fivetran_utils.bigquery__try_cast": {"unique_id": "macro.fivetran_utils.bigquery__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5316749}, "macro.fivetran_utils.spark__try_cast": {"unique_id": "macro.fivetran_utils.spark__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5317938}, "macro.fivetran_utils.generate_docs": {"unique_id": "macro.fivetran_utils.generate_docs", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/generate_docs.sql", "original_file_path": "macros/generate_docs.sql", "name": "generate_docs", "macro_sql": "{% macro generate_docs(package) %}\n\n{% set package = \"\"~ package ~\"\" %}\n\n{% set zsh_command = \"source dbt_packages/fivetran_utils/generate_docs.sh '../dbt_\"\"\"~ package ~\"\"\"\"+\"'\" %}\n\n{{ log (zsh_command, info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5321999}, "macro.fivetran_utils.generate_columns_macro": {"unique_id": "macro.fivetran_utils.generate_columns_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/generate_columns_macro.sql", "original_file_path": "macros/generate_columns_macro.sql", "name": "generate_columns_macro", "macro_sql": "{% macro generate_columns_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set columns = get_columns_for_macro(table_name, schema_name, database_name) %}\n\n{% set jinja_macro=[] %}\n\n{% do jinja_macro.append('{% macro get_' ~ table_name ~ '_columns() %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% set columns = [') %}\n\n{% for col in columns %}\n{% do jinja_macro.append('    ' ~ col ~ (',' if not loop.last)) %}\n{% endfor %}\n\n{% do jinja_macro.append('] %}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{{ return(columns) }}') %}\n{% do jinja_macro.append('') %}\n{% do jinja_macro.append('{% endmacro %}') %}\n\n{% if execute %}\n\n    {% set joined = jinja_macro | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.get_columns_for_macro"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.533605}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.534137}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt_utils.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5347042}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5352309}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.535438}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.535659}, "macro.fivetran_utils.add_dbt_source_relation": {"unique_id": "macro.fivetran_utils.add_dbt_source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "name": "add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.535972}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n      {% if column.alias %}\n\n      {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n\n      {% else %}\n\n      {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n        \n      {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.536891}, "macro.fivetran_utils.staging_models_automation": {"unique_id": "macro.fivetran_utils.staging_models_automation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/staging_models_automation.sql", "original_file_path": "macros/staging_models_automation.sql", "name": "staging_models_automation", "macro_sql": "{% macro staging_models_automation(package, source_schema, source_database, tables) %}\n\n{% set package = \"\"~ package ~\"\" %}\n{% set source_schema = \"\"~ source_schema ~\"\" %}\n{% set source_database = \"\"~ source_database ~\"\" %}\n\n{% set zsh_command_columns = \"source dbt_packages/fivetran_utils/generate_columns.sh '../dbt_\"\"\"~ package ~\"\"\"_source' stg_\"\"\"~ package ~\"\"\" \"\"\"~ source_database ~\"\"\" \"\"\"~ source_schema ~\"\"\" \" %}\n{% set zsh_command_models = \"source dbt_packages/fivetran_utils/generate_models.sh '../dbt_\"\"\"~ package ~\"\"\"_source' stg_\"\"\"~ package ~\"\"\" \"\"\"~ source_database ~\"\"\" \"\"\"~ source_schema ~\"\"\" \" %}\n\n{%- set columns_array = [] -%}\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n    {% set help_command = zsh_command_columns + t %}\n    {{ columns_array.append(help_command) }}\n\n    {% set help_command = zsh_command_models + t %}\n    {{ models_array.append(help_command) }}\n\n{% endfor %}\n\n{{ log(columns_array|join(' && \\n') + ' && \\n' + models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.538267}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.542071}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5424268}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.542856}, "macro.fivetran_utils.default__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.default__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "default__get_columns_for_macro", "macro_sql": "{% macro default__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'text' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'boolean' then '\"boolean\"'\n        when lower(data_type) like '%num%' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'date' then '\"date\"'\n      end,\n      '}')\nfrom {{ database_name }}.information_schema.columns\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.543937}, "macro.fivetran_utils.bigquery__get_columns_for_macro": {"unique_id": "macro.fivetran_utils.bigquery__get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "bigquery__get_columns_for_macro", "macro_sql": "{% macro bigquery__get_columns_for_macro(table_name, schema_name, database_name=target.database) %}\n\n{% set query %}\n\nselect\n    concat(\n      '{\"name\": \"', \n      lower(column_name), \n      '\", \"datatype\": ',\n      case\n        when lower(data_type) like '%timestamp%' then 'dbt_utils.type_timestamp()' \n        when lower(data_type) = 'string' then 'dbt_utils.type_string()' \n        when lower(data_type) = 'bool' then '\"boolean\"'\n        when lower(data_type) like '%num%' then 'dbt_utils.type_numeric()' \n        when lower(data_type) = 'float64' then 'dbt_utils.type_float()' \n        when lower(data_type) = 'int64' then 'dbt_utils.type_int()' \n        when lower(data_type) = 'date' then '\"date\"' \n        when lower(data_type) = 'datetime' then '\"datetime\"' \n      end,\n      '}')\nfrom `{{ database_name }}`.{{ schema_name }}.INFORMATION_SCHEMA.COLUMNS\nwhere lower(table_name) = '{{ table_name }}'\nand lower(table_schema) = '{{ schema_name }}'\norder by 1\n\n{% endset %}\n\n{% set results = run_query(query) %}\n{% set results_list = results.columns[0].values() %}}\n\n{{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.544398}, "macro.fivetran_utils.get_columns_for_macro": {"unique_id": "macro.fivetran_utils.get_columns_for_macro", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/get_columns_for_macro.sql", "original_file_path": "macros/get_columns_for_macro.sql", "name": "get_columns_for_macro", "macro_sql": "{% macro get_columns_for_macro(table_name, schema_name, database_name) -%}\n  {{ return(adapter.dispatch('get_columns_for_macro')(table_name, schema_name, database_name)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__get_columns_for_macro"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.544608}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.546135}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.546679}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.547269}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.547424}, "macro.fivetran_utils.snowflake__json_extract": {"unique_id": "macro.fivetran_utils.snowflake__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.547572}, "macro.fivetran_utils.redshift__json_extract": {"unique_id": "macro.fivetran_utils.redshift__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5477371}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.547885}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.548029}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.548744}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.54978}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.550487}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5506492}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5508008}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.550953}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.551109}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt_utils.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.55128}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.551579}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5516758}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.551771}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.552453}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.553662}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=var(database_variable, default_database),\n        schema=schema,\n        identifier=table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=database,\n        schema=var(schema_variable, default_schema),\n        identifier=table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.555558}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5570402}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5573912}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.557499}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.557601}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.558053}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.558497}, "macro.stripe_source.get_credit_note_columns": {"unique_id": "macro.stripe_source.get_credit_note_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_credit_note_columns.sql", "original_file_path": "macros/get_credit_note_columns.sql", "name": "get_credit_note_columns", "macro_sql": "{% macro get_credit_note_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discount_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"subtotal\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"total\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"memo\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"pdf\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"voided_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"customer_balance_transaction\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"refund_id\", \"datatype\": dbt_utils.type_string()},\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.560744}, "macro.stripe_source.get_plan_columns": {"unique_id": "macro.stripe_source.get_plan_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_plan_columns.sql", "original_file_path": "macros/get_plan_columns.sql", "name": "get_plan_columns", "macro_sql": "{% macro get_plan_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"aggregate_usage\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"billing_scheme\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"interval_count\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"nickname\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"product_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tiers_mode\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transform_usage_divide_by\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"transform_usage_round\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"trial_period_days\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"usage_type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{% if target.type == 'bigquery' %}\n    {{ columns.append( {\"name\": 'interval', \"datatype\": dbt_utils.type_string(), \"quote\": True } ) }}\n\n{% else %}\n    {{ columns.append( {\"name\": \"interval\", \"datatype\": dbt_utils.type_string()} ) }}\n\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5633101}, "macro.stripe_source.get_refund_columns": {"unique_id": "macro.stripe_source.get_refund_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_refund_columns.sql", "original_file_path": "macros/get_refund_columns.sql", "name": "get_refund_columns", "macro_sql": "{% macro get_refund_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"balance_transaction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"charge_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_balance_transaction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receipt_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.564946}, "macro.stripe_source.get_payment_method_columns": {"unique_id": "macro.stripe_source.get_payment_method_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_payment_method_columns.sql", "original_file_path": "macros/get_payment_method_columns.sql", "name": "get_payment_method_columns", "macro_sql": "{% macro get_payment_method_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"billing_detail_address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_address_line_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_address_line_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_address_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_address_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_detail_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.566763}, "macro.stripe_source.get_credit_note_line_item_columns": {"unique_id": "macro.stripe_source.get_credit_note_line_item_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_credit_note_line_item_columns.sql", "original_file_path": "macros/get_credit_note_line_item_columns.sql", "name": "get_credit_note_line_item_columns", "macro_sql": "{% macro get_credit_note_line_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"credit_note_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"discount_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unit_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"unit_amount_decimal\", \"datatype\": dbt_utils.type_int()},\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.568071}, "macro.stripe_source.livemode_predicate": {"unique_id": "macro.stripe_source.livemode_predicate", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/livemode_predicate.sql", "original_file_path": "macros/livemode_predicate.sql", "name": "livemode_predicate", "macro_sql": "{% macro livemode_predicate() %}\n\n    where livemode = {{ var('using_livemode', true) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.568298}, "macro.stripe_source.get_card_columns": {"unique_id": "macro.stripe_source.get_card_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_card_columns.sql", "original_file_path": "macros/get_card_columns.sql", "name": "get_card_columns", "macro_sql": "{% macro get_card_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_line_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_line_1_check\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_line_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_zip\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_zip_check\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"brand\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"cvc_check\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"dynamic_last_4\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exp_month\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"exp_year\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"fingerprint\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"funding\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"last_4\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"network\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"recipient\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tokenization_method\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.571525}, "macro.stripe_source.get_customer_columns": {"unique_id": "macro.stripe_source.get_customer_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_customer_columns.sql", "original_file_path": "macros/get_customer_columns.sql", "name": "get_customer_columns", "macro_sql": "{% macro get_customer_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"account_balance\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_line_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_line_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"address_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"bank_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"default_card_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"delinquent\", \"datatype\": \"boolean\"},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_prefix\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_settings_default_payment_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_settings_footer\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_line_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_line_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_carrier\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_tracking_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_exempt\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_info_tax_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_info_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_info_verification_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_info_verification_verified_name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.576226}, "macro.stripe_source.get_invoice_columns": {"unique_id": "macro.stripe_source.get_invoice_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_invoice_columns.sql", "original_file_path": "macros/get_invoice_columns.sql", "name": "get_invoice_columns", "macro_sql": "{% macro get_invoice_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount_due\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount_paid\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount_remaining\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"application_fee_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"attempt_count\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"attempted\", \"datatype\": \"boolean\"},\n    {\"name\": \"auto_advance\", \"datatype\": \"boolean\"},\n    {\"name\": \"billing\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"charge_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"default_source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"due_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"ending_balance\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"finalized_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"footer\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"hosted_invoice_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_pdf\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"next_payment_attempt\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"paid\", \"datatype\": \"boolean\"},\n    {\"name\": \"period_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"period_start\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"receipt_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"starting_balance\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"statement_descriptor\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status_transitions_finalized_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status_transitions_marked_uncollectible_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status_transitions_paid_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status_transitions_voided_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"subscription_proration_date\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"subtotal\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"tax\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"tax_percent\", \"datatype\": dbt_utils.type_numeric()},\n    {\"name\": \"threshold_reason_amount_gte\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"total\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"webhooks_delivered_at\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5816262}, "macro.stripe_source.get_subscription_columns": {"unique_id": "macro.stripe_source.get_subscription_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_subscription_columns.sql", "original_file_path": "macros/get_subscription_columns.sql", "name": "get_subscription_columns", "macro_sql": "{% macro get_subscription_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"_fivetran_active\", \"datatype\": \"boolean\"},\n    {\"name\": \"application_fee_percent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"billing\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"billing_cycle_anchor\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"billing_threshold_amount_gte\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"billing_threshold_reset_billing_cycle_anchor\", \"datatype\": \"boolean\"},\n    {\"name\": \"cancel_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"cancel_at_period_end\", \"datatype\": \"boolean\"},\n    {\"name\": \"canceled_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"current_period_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"current_period_start\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"days_until_due\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"default_source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"ended_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"start_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"tax_percent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"trial_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"trial_start\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_float", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.584479}, "macro.stripe_source.get_payment_method_card_columns": {"unique_id": "macro.stripe_source.get_payment_method_card_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_payment_method_card_columns.sql", "original_file_path": "macros/get_payment_method_card_columns.sql", "name": "get_payment_method_card_columns", "macro_sql": "{% macro get_payment_method_card_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"brand\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"charge_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fingerprint\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"funding\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"wallet_type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.585599}, "macro.stripe_source.get_charge_columns": {"unique_id": "macro.stripe_source.get_charge_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_charge_columns.sql", "original_file_path": "macros/get_charge_columns.sql", "name": "get_charge_columns", "macro_sql": "{% macro get_charge_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount_refunded\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"application\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"application_fee_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"balance_transaction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"bank_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"calculated_statement_descriptor\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"captured\", \"datatype\": \"boolean\"},\n    {\"name\": \"card_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"destination\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fraud_details_stripe_report\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"fraud_details_user_report\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"on_behalf_of\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"outcome_network_status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"outcome_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"outcome_risk_level\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"outcome_risk_score\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"outcome_seller_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"outcome_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"paid\", \"datatype\": \"boolean\"},\n    {\"name\": \"payment_intent_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receipt_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receipt_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receipt_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"refunded\", \"datatype\": \"boolean\"},\n    {\"name\": \"shipping_address_city\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_country\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_line_1\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_line_2\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_postal_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_address_state\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_carrier\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_phone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"shipping_tracking_number\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_transfer\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"statement_descriptor\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transfer_data_destination\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transfer_group\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transfer_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.59191}, "macro.stripe_source.get_invoice_line_item_columns": {"unique_id": "macro.stripe_source.get_invoice_line_item_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_invoice_line_item_columns.sql", "original_file_path": "macros/get_invoice_line_item_columns.sql", "name": "get_invoice_line_item_columns", "macro_sql": "{% macro get_invoice_line_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"discountable\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"period_end\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"period_start\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"plan_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"proration\", \"datatype\": \"boolean\"},\n    {\"name\": \"quantity\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subscription_item_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"unique_id\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.5937989}, "macro.stripe_source.get_payment_intent_columns": {"unique_id": "macro.stripe_source.get_payment_intent_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_payment_intent_columns.sql", "original_file_path": "macros/get_payment_intent_columns.sql", "name": "get_payment_intent_columns", "macro_sql": "{% macro get_payment_intent_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount_capturable\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"amount_received\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"application\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"application_fee_amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"canceled_at\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"cancellation_reason\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"capture_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"confirmation_method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"customer_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_charge_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_decline_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_doc_url\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_param\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"last_payment_error_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"on_behalf_of\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"receipt_email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"statement_descriptor\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transfer_data_destination\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"transfer_group\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.597507}, "macro.stripe_source.get_fee_columns": {"unique_id": "macro.stripe_source.get_fee_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_fee_columns.sql", "original_file_path": "macros/get_fee_columns.sql", "name": "get_fee_columns", "macro_sql": "{% macro get_fee_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"application\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"balance_transaction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"index\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.598633}, "macro.stripe_source.get_balance_transaction_columns": {"unique_id": "macro.stripe_source.get_balance_transaction_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_balance_transaction_columns.sql", "original_file_path": "macros/get_balance_transaction_columns.sql", "name": "get_balance_transaction_columns", "macro_sql": "{% macro get_balance_transaction_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"available_on\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"fee\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"net\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"payout_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string", "macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.6003258}, "macro.stripe_source.get_payout_columns": {"unique_id": "macro.stripe_source.get_payout_columns", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "macros/get_payout_columns.sql", "original_file_path": "macros/get_payout_columns.sql", "name": "get_payout_columns", "macro_sql": "{% macro get_payout_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"amount\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"arrival_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"automatic\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance_transaction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"connected_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"destination_bank_account_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"destination_card_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_balance_transaction_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_code\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"failure_message\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"livemode\", \"datatype\": \"boolean\"},\n    {\"name\": \"metadata\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"method\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"source_type\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"statement_descriptor\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.602742}, "macro.stripe.date_timezone": {"unique_id": "macro.stripe.date_timezone", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "name": "date_timezone", "macro_sql": "{% macro date_timezone(column) -%}\n\n{{ adapter.dispatch('date_timezone', 'stripe')(column)  }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.stripe.postgres__date_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.603606}, "macro.stripe.bigquery__date_timezone": {"unique_id": "macro.stripe.bigquery__date_timezone", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "name": "bigquery__date_timezone", "macro_sql": "{% macro bigquery__date_timezone(column) -%}\n\ndate(\n    {{ column }}\n    {% if var('stripe_timezone', none) %} , \"{{ var('stripe_timezone') }}\" {% endif %}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.603827}, "macro.stripe.postgres__date_timezone": {"unique_id": "macro.stripe.postgres__date_timezone", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "name": "postgres__date_timezone", "macro_sql": "{% macro postgres__date_timezone(column) -%}\n\n{% set converted_date %}\n\n{% if var('stripe_timezone', none) %}\n    {{ column }} at time zone '{{ var('stripe_timezone') }}'\n{% else %}\n    {{ column }}\n{% endif %}\n\n{% endset %}\n\n{{ dbt_utils.date_trunc('day',converted_date) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.604181}, "macro.stripe.redshift__date_timezone": {"unique_id": "macro.stripe.redshift__date_timezone", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "name": "redshift__date_timezone", "macro_sql": "{% macro redshift__date_timezone(column) -%}\n\n{% set converted_date %}\n\n{% if var('stripe_timezone', none) %}\n    convert_timezone('{{ var(\"stripe_timezone\") }}', {{ column }})\n{% else %}\n    {{ column }}\n{% endif %}\n\n{% endset %}\n\n{{ dbt_utils.date_trunc('day',converted_date) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.6045492}, "macro.stripe.default__date_timezone": {"unique_id": "macro.stripe.default__date_timezone", "package_name": "stripe", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe", "path": "macros/date_timezone.sql", "original_file_path": "macros/date_timezone.sql", "name": "default__date_timezone", "macro_sql": "{% macro default__date_timezone(column) -%}\n\n{% set converted_date %}\n\n{% if var('stripe_timezone', none) %}\n    convert_timezone('{{ var(\"stripe_timezone\") }}', {{ column }})\n{% else %}\n    {{ column }}\n{% endif %}\n\n{% endset %}\n\n{{ dbt_utils.date_trunc('day',converted_date) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1652476919.6048949}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"model.stripe_source.stg_stripe__credit_note": [{"raw_sql": "{{ config(enabled=var('using_credit_notes', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__credit_note_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__credit_note_tmp')),\n                staging_columns=get_credit_note_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_note_id,\n        amount,\n        created as created_at,\n        currency,\n        discount_amount,\n        subtotal,\n        total,\n        memo,\n        metadata,\n        number,\n        pdf,\n        reason,\n        status,\n        type,\n        voided_at,\n        customer_balance_transaction,\n        invoice_id,\n        refund_id\n    from fields\n)\n\nselect * \nfrom final", "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_credit_note_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__credit_note"], "unique_id": "model.stripe_source.stg_stripe__credit_note", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__credit_note.sql", "original_file_path": "models/stg_stripe__credit_note.sql", "name": "stg_stripe__credit_note", "alias": "stg_stripe__credit_note", "checksum": {"name": "sha256", "checksum": "c1d62cc3a13515443fb02f12bdda23fcab741c1f8a65f39010558f271c066a45"}, "tags": [], "refs": [["stg_stripe__credit_note_tmp"], ["stg_stripe__credit_note_tmp"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": false}, "created_at": 1652476919.981345}], "model.stripe_source.stg_stripe__credit_note_line_item": [{"raw_sql": "{{ config(enabled=var('using_credit_notes', False)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_stripe__credit_note_line_item_tmp') }}\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_stripe_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_stripe_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_stripe__credit_note_line_item_tmp')),\n                staging_columns=get_credit_note_line_item_columns()\n            )\n        }}\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_note_line_item_id,\n        credit_note_id,\n        amount,\n        discount_amount,\n        description,\n        quantity,\n        type,\n        unit_amount,\n        unit_amount_decimal\n    from fields\n)\n\nselect * \nfrom final", "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.get_credit_note_line_item_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "stg_stripe__credit_note_line_item"], "unique_id": "model.stripe_source.stg_stripe__credit_note_line_item", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "stg_stripe__credit_note_line_item.sql", "original_file_path": "models/stg_stripe__credit_note_line_item.sql", "name": "stg_stripe__credit_note_line_item", "alias": "stg_stripe__credit_note_line_item", "checksum": {"name": "sha256", "checksum": "e8f68e1d72840fe80ba22587ac89c6f9ed345d143e70bdcc19d443fca7f80c69"}, "tags": [], "refs": [["stg_stripe__credit_note_line_item_tmp"], ["stg_stripe__credit_note_line_item_tmp"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "stripe_source://models/stg_stripe.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "stg_stripe", "enabled": false}, "created_at": 1652476920.047759}], "model.stripe_source.stg_stripe__credit_note_line_item_tmp": [{"raw_sql": "{{ config(enabled=var('using_credit_notes', False)) }}\n\nselect * \nfrom {{ var('credit_note_line_item') }}\n{{ livemode_predicate() }}", "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__credit_note_line_item_tmp"], "unique_id": "model.stripe_source.stg_stripe__credit_note_line_item_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__credit_note_line_item_tmp.sql", "original_file_path": "models/tmp/stg_stripe__credit_note_line_item_tmp.sql", "name": "stg_stripe__credit_note_line_item_tmp", "alias": "stg_stripe__credit_note_line_item_tmp", "checksum": {"name": "sha256", "checksum": "834f959295d3c447429080e659cce2c951d77b4a874f7751b4fa00c3d9ed50a2"}, "tags": [], "refs": [], "sources": [["stripe", "credit_note_line_item"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": false}, "created_at": 1652476920.071813}], "model.stripe_source.stg_stripe__credit_note_tmp": [{"raw_sql": "{{ config(enabled=var('using_credit_notes', False)) }}\n\nselect * \nfrom {{ var('credit_note') }}\n{{ livemode_predicate() }}", "resource_type": "model", "depends_on": {"macros": ["macro.stripe_source.livemode_predicate"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "stg_stripe", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "stripe_source_integration_tests_stg_stripe", "fqn": ["stripe_source", "tmp", "stg_stripe__credit_note_tmp"], "unique_id": "model.stripe_source.stg_stripe__credit_note_tmp", "package_name": "stripe_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/stripe/dbt_stripe/integration_tests/dbt_packages/stripe_source", "path": "tmp/stg_stripe__credit_note_tmp.sql", "original_file_path": "models/tmp/stg_stripe__credit_note_tmp.sql", "name": "stg_stripe__credit_note_tmp", "alias": "stg_stripe__credit_note_tmp", "checksum": {"name": "sha256", "checksum": "6b65dc1a06fe207413f044dba2d9ae92d1eb68993697e9258d22faf22e5f9e7b"}, "tags": [], "refs": [], "sources": [["stripe", "credit_note"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "stg_stripe", "enabled": false}, "created_at": 1652476920.088088}]}, "parent_map": {"seed.stripe_integration_tests.fee_data": [], "seed.stripe_integration_tests.refund_data": [], "seed.stripe_integration_tests.invoice_data": [], "seed.stripe_integration_tests.invoice_line_item_data": [], "seed.stripe_integration_tests.subscription_history_data": [], "seed.stripe_integration_tests.charge_data": [], "seed.stripe_integration_tests.balance_transaction_data": [], "seed.stripe_integration_tests.payment_method_data": [], "seed.stripe_integration_tests.plan_data": [], "seed.stripe_integration_tests.customer_data": [], "seed.stripe_integration_tests.card_data": [], "seed.stripe_integration_tests.payment_intent_data": [], "seed.stripe_integration_tests.payout_data": [], "seed.stripe_integration_tests.payment_method_card_data": [], "seed.stripe_integration_tests.subscription_data": [], "model.stripe_source.stg_stripe__invoice_line_item": ["model.stripe_source.stg_stripe__invoice_line_item_tmp", "model.stripe_source.stg_stripe__invoice_line_item_tmp"], "model.stripe_source.stg_stripe__payment_intent": ["model.stripe_source.stg_stripe__payment_intent_tmp", "model.stripe_source.stg_stripe__payment_intent_tmp"], "model.stripe_source.stg_stripe__payment_method": ["model.stripe_source.stg_stripe__payment_method_tmp", "model.stripe_source.stg_stripe__payment_method_tmp"], "model.stripe_source.stg_stripe__refund": ["model.stripe_source.stg_stripe__refund_tmp", "model.stripe_source.stg_stripe__refund_tmp"], "model.stripe_source.stg_stripe__subscription": ["model.stripe_source.stg_stripe__subscription_tmp", "model.stripe_source.stg_stripe__subscription_tmp"], "model.stripe_source.stg_stripe__card": ["model.stripe_source.stg_stripe__card_tmp", "model.stripe_source.stg_stripe__card_tmp"], "model.stripe_source.stg_stripe__invoice": ["model.stripe_source.stg_stripe__invoice_tmp", "model.stripe_source.stg_stripe__invoice_tmp"], "model.stripe_source.stg_stripe__payout": ["model.stripe_source.stg_stripe__payout_tmp", "model.stripe_source.stg_stripe__payout_tmp"], "model.stripe_source.stg_stripe__charge": ["model.stripe_source.stg_stripe__charge_tmp", "model.stripe_source.stg_stripe__charge_tmp"], "model.stripe_source.stg_stripe__balance_transaction": ["model.stripe_source.stg_stripe__balance_transaction_tmp", "model.stripe_source.stg_stripe__balance_transaction_tmp"], "model.stripe_source.stg_stripe__fee": ["model.stripe_source.stg_stripe__fee_tmp", "model.stripe_source.stg_stripe__fee_tmp"], "model.stripe_source.stg_stripe__plan": ["model.stripe_source.stg_stripe__plan_tmp", "model.stripe_source.stg_stripe__plan_tmp"], "model.stripe_source.stg_stripe__payment_method_card": ["model.stripe_source.stg_stripe__payment_method_card_tmp", "model.stripe_source.stg_stripe__payment_method_card_tmp"], "model.stripe_source.stg_stripe__customer": ["model.stripe_source.stg_stripe__customer_tmp", "model.stripe_source.stg_stripe__customer_tmp"], "model.stripe_source.stg_stripe__payment_method_card_tmp": ["source.stripe_source.stripe.payment_method_card"], "model.stripe_source.stg_stripe__payment_method_tmp": ["source.stripe_source.stripe.payment_method"], "model.stripe_source.stg_stripe__refund_tmp": ["source.stripe_source.stripe.refund"], "model.stripe_source.stg_stripe__payout_tmp": ["source.stripe_source.stripe.payout"], "model.stripe_source.stg_stripe__invoice_tmp": ["source.stripe_source.stripe.invoice"], "model.stripe_source.stg_stripe__invoice_line_item_tmp": ["source.stripe_source.stripe.invoice_line_item"], "model.stripe_source.stg_stripe__charge_tmp": ["source.stripe_source.stripe.charge"], "model.stripe_source.stg_stripe__fee_tmp": ["source.stripe_source.stripe.fee"], "model.stripe_source.stg_stripe__payment_intent_tmp": ["source.stripe_source.stripe.payment_intent"], "model.stripe_source.stg_stripe__plan_tmp": ["source.stripe_source.stripe.plan"], "model.stripe_source.stg_stripe__card_tmp": ["source.stripe_source.stripe.card"], "model.stripe_source.stg_stripe__balance_transaction_tmp": ["source.stripe_source.stripe.balance_transaction"], "model.stripe_source.stg_stripe__customer_tmp": ["source.stripe_source.stripe.customer"], "model.stripe_source.stg_stripe__subscription_tmp": ["source.stripe_source.stripe.subscription"], "model.stripe.stripe__customer_overview": ["model.stripe.int_stripe__incomplete_charges", "model.stripe.stripe__balance_transactions", "model.stripe_source.stg_stripe__customer"], "model.stripe.stripe__balance_transactions": ["model.stripe_source.stg_stripe__balance_transaction", "model.stripe_source.stg_stripe__card", "model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__payment_intent", "model.stripe_source.stg_stripe__payment_method", "model.stripe_source.stg_stripe__payment_method_card", "model.stripe_source.stg_stripe__payout", "model.stripe_source.stg_stripe__refund"], "model.stripe.stripe__invoice_line_items": ["model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__plan", "model.stripe_source.stg_stripe__subscription"], "model.stripe.stripe__subscription_details": ["model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__subscription"], "model.stripe.stripe__subscription_line_items": ["model.stripe.stripe__invoice_line_items"], "model.stripe.stripe__monthly_overview": ["model.stripe.stripe__daily_overview"], "model.stripe.stripe__weekly_overview": ["model.stripe.stripe__daily_overview"], "model.stripe.stripe__quarterly_overview": ["model.stripe.stripe__daily_overview"], "model.stripe.stripe__daily_overview": ["model.stripe.int_stripe__incomplete_charges", "model.stripe.stripe__balance_transactions"], "model.stripe.int_stripe__incomplete_charges": ["model.stripe_source.stg_stripe__charge"], "test.stripe_source.unique_stg_stripe__balance_transaction_balance_transaction_id.2f29c783d0": ["model.stripe_source.stg_stripe__balance_transaction"], "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f": ["model.stripe_source.stg_stripe__balance_transaction"], "test.stripe_source.unique_stg_stripe__card_card_id.000d85b677": ["model.stripe_source.stg_stripe__card"], "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a": ["model.stripe_source.stg_stripe__card"], "test.stripe_source.unique_stg_stripe__charge_charge_id.04b21ec6e0": ["model.stripe_source.stg_stripe__charge"], "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a": ["model.stripe_source.stg_stripe__charge"], "test.stripe_source.unique_stg_stripe__customer_customer_id.a06a928db2": ["model.stripe_source.stg_stripe__customer"], "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0": ["model.stripe_source.stg_stripe__customer"], "test.stripe_source.unique_stg_stripe__payment_intent_payment_intent_id.02430feefd": ["model.stripe_source.stg_stripe__payment_intent"], "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb": ["model.stripe_source.stg_stripe__payment_intent"], "test.stripe_source.unique_stg_stripe__payment_method_payment_method_id.b12d5fcf1b": ["model.stripe_source.stg_stripe__payment_method"], "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471": ["model.stripe_source.stg_stripe__payment_method"], "test.stripe_source.unique_stg_stripe__payout_payout_id.9d9065d2c5": ["model.stripe_source.stg_stripe__payout"], "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc": ["model.stripe_source.stg_stripe__payout"], "test.stripe_source.unique_stg_stripe__refund_refund_id.0b7c337204": ["model.stripe_source.stg_stripe__refund"], "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0": ["model.stripe_source.stg_stripe__refund"], "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_id.e8805346de": ["model.stripe_source.stg_stripe__invoice_line_item"], "test.stripe_source.unique_stg_stripe__invoice_invoice_id.63b5714c58": ["model.stripe_source.stg_stripe__invoice"], "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095": ["model.stripe_source.stg_stripe__invoice"], "test.stripe_source.not_null_stg_stripe__plan_plan_id.f59445523e": ["model.stripe_source.stg_stripe__plan"], "test.stripe_source.unique_stg_stripe__plan_plan_id.b21f08031c": ["model.stripe_source.stg_stripe__plan"], "test.stripe_source.unique_stg_stripe__credit_note_credit_note_id.135c7cd4a0": [], "test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd": [], "test.stripe_source.unique_stg_stripe__credit_note_line_item_credit_note_line_item_id.3972a0829e": [], "test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7": [], "test.stripe.unique_stripe__balance_transactions_balance_transaction_id.313ec591b5": ["model.stripe.stripe__balance_transactions"], "test.stripe.unique_stripe__invoice_line_items_invoice_line_item_id.6d4544857c": ["model.stripe.stripe__invoice_line_items"], "test.stripe.unique_stripe__subscription_line_items_invoice_line_item_id.a4a7f94547": ["model.stripe.stripe__subscription_line_items"], "test.stripe.unique_stripe__subscription_details_subscription_id.8c3bcf1f61": ["model.stripe.stripe__subscription_details"], "source.stripe_source.stripe.balance_transaction": [], "source.stripe_source.stripe.card": [], "source.stripe_source.stripe.charge": [], "source.stripe_source.stripe.customer": [], "source.stripe_source.stripe.fee": [], "source.stripe_source.stripe.payment_intent": [], "source.stripe_source.stripe.payment_method_card": [], "source.stripe_source.stripe.payment_method": [], "source.stripe_source.stripe.payout": [], "source.stripe_source.stripe.refund": [], "source.stripe_source.stripe.invoice_line_item": [], "source.stripe_source.stripe.invoice": [], "source.stripe_source.stripe.subscription_history": [], "source.stripe_source.stripe.subscription": [], "source.stripe_source.stripe.plan": [], "source.stripe_source.stripe.credit_note": [], "source.stripe_source.stripe.credit_note_line_item": []}, "child_map": {"seed.stripe_integration_tests.fee_data": [], "seed.stripe_integration_tests.refund_data": [], "seed.stripe_integration_tests.invoice_data": [], "seed.stripe_integration_tests.invoice_line_item_data": [], "seed.stripe_integration_tests.subscription_history_data": [], "seed.stripe_integration_tests.charge_data": [], "seed.stripe_integration_tests.balance_transaction_data": [], "seed.stripe_integration_tests.payment_method_data": [], "seed.stripe_integration_tests.plan_data": [], "seed.stripe_integration_tests.customer_data": [], "seed.stripe_integration_tests.card_data": [], "seed.stripe_integration_tests.payment_intent_data": [], "seed.stripe_integration_tests.payout_data": [], "seed.stripe_integration_tests.payment_method_card_data": [], "seed.stripe_integration_tests.subscription_data": [], "model.stripe_source.stg_stripe__invoice_line_item": ["model.stripe.stripe__invoice_line_items", "model.stripe.stripe__subscription_details", "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_id.e8805346de"], "model.stripe_source.stg_stripe__payment_intent": ["model.stripe.stripe__balance_transactions", "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb", "test.stripe_source.unique_stg_stripe__payment_intent_payment_intent_id.02430feefd"], "model.stripe_source.stg_stripe__payment_method": ["model.stripe.stripe__balance_transactions", "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471", "test.stripe_source.unique_stg_stripe__payment_method_payment_method_id.b12d5fcf1b"], "model.stripe_source.stg_stripe__refund": ["model.stripe.stripe__balance_transactions", "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0", "test.stripe_source.unique_stg_stripe__refund_refund_id.0b7c337204"], "model.stripe_source.stg_stripe__subscription": ["model.stripe.stripe__invoice_line_items", "model.stripe.stripe__subscription_details"], "model.stripe_source.stg_stripe__card": ["model.stripe.stripe__balance_transactions", "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a", "test.stripe_source.unique_stg_stripe__card_card_id.000d85b677"], "model.stripe_source.stg_stripe__invoice": ["model.stripe.stripe__invoice_line_items", "model.stripe.stripe__subscription_details", "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095", "test.stripe_source.unique_stg_stripe__invoice_invoice_id.63b5714c58"], "model.stripe_source.stg_stripe__payout": ["model.stripe.stripe__balance_transactions", "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc", "test.stripe_source.unique_stg_stripe__payout_payout_id.9d9065d2c5"], "model.stripe_source.stg_stripe__charge": ["model.stripe.int_stripe__incomplete_charges", "model.stripe.stripe__balance_transactions", "model.stripe.stripe__invoice_line_items", "model.stripe.stripe__subscription_details", "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a", "test.stripe_source.unique_stg_stripe__charge_charge_id.04b21ec6e0"], "model.stripe_source.stg_stripe__balance_transaction": ["model.stripe.stripe__balance_transactions", "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f", "test.stripe_source.unique_stg_stripe__balance_transaction_balance_transaction_id.2f29c783d0"], "model.stripe_source.stg_stripe__fee": [], "model.stripe_source.stg_stripe__plan": ["model.stripe.stripe__invoice_line_items", "test.stripe_source.not_null_stg_stripe__plan_plan_id.f59445523e", "test.stripe_source.unique_stg_stripe__plan_plan_id.b21f08031c"], "model.stripe_source.stg_stripe__payment_method_card": ["model.stripe.stripe__balance_transactions"], "model.stripe_source.stg_stripe__customer": ["model.stripe.stripe__balance_transactions", "model.stripe.stripe__customer_overview", "model.stripe.stripe__invoice_line_items", "model.stripe.stripe__subscription_details", "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0", "test.stripe_source.unique_stg_stripe__customer_customer_id.a06a928db2"], "model.stripe_source.stg_stripe__payment_method_card_tmp": ["model.stripe_source.stg_stripe__payment_method_card", "model.stripe_source.stg_stripe__payment_method_card"], "model.stripe_source.stg_stripe__payment_method_tmp": ["model.stripe_source.stg_stripe__payment_method", "model.stripe_source.stg_stripe__payment_method"], "model.stripe_source.stg_stripe__refund_tmp": ["model.stripe_source.stg_stripe__refund", "model.stripe_source.stg_stripe__refund"], "model.stripe_source.stg_stripe__payout_tmp": ["model.stripe_source.stg_stripe__payout", "model.stripe_source.stg_stripe__payout"], "model.stripe_source.stg_stripe__invoice_tmp": ["model.stripe_source.stg_stripe__invoice", "model.stripe_source.stg_stripe__invoice"], "model.stripe_source.stg_stripe__invoice_line_item_tmp": ["model.stripe_source.stg_stripe__invoice_line_item", "model.stripe_source.stg_stripe__invoice_line_item"], "model.stripe_source.stg_stripe__charge_tmp": ["model.stripe_source.stg_stripe__charge", "model.stripe_source.stg_stripe__charge"], "model.stripe_source.stg_stripe__fee_tmp": ["model.stripe_source.stg_stripe__fee", "model.stripe_source.stg_stripe__fee"], "model.stripe_source.stg_stripe__payment_intent_tmp": ["model.stripe_source.stg_stripe__payment_intent", "model.stripe_source.stg_stripe__payment_intent"], "model.stripe_source.stg_stripe__plan_tmp": ["model.stripe_source.stg_stripe__plan", "model.stripe_source.stg_stripe__plan"], "model.stripe_source.stg_stripe__card_tmp": ["model.stripe_source.stg_stripe__card", "model.stripe_source.stg_stripe__card"], "model.stripe_source.stg_stripe__balance_transaction_tmp": ["model.stripe_source.stg_stripe__balance_transaction", "model.stripe_source.stg_stripe__balance_transaction"], "model.stripe_source.stg_stripe__customer_tmp": ["model.stripe_source.stg_stripe__customer", "model.stripe_source.stg_stripe__customer"], "model.stripe_source.stg_stripe__subscription_tmp": ["model.stripe_source.stg_stripe__subscription", "model.stripe_source.stg_stripe__subscription"], "model.stripe.stripe__customer_overview": [], "model.stripe.stripe__balance_transactions": ["model.stripe.stripe__customer_overview", "model.stripe.stripe__daily_overview", "test.stripe.unique_stripe__balance_transactions_balance_transaction_id.313ec591b5"], "model.stripe.stripe__invoice_line_items": ["model.stripe.stripe__subscription_line_items", "test.stripe.unique_stripe__invoice_line_items_invoice_line_item_id.6d4544857c"], "model.stripe.stripe__subscription_details": ["test.stripe.unique_stripe__subscription_details_subscription_id.8c3bcf1f61"], "model.stripe.stripe__subscription_line_items": ["test.stripe.unique_stripe__subscription_line_items_invoice_line_item_id.a4a7f94547"], "model.stripe.stripe__monthly_overview": [], "model.stripe.stripe__weekly_overview": [], "model.stripe.stripe__quarterly_overview": [], "model.stripe.stripe__daily_overview": ["model.stripe.stripe__monthly_overview", "model.stripe.stripe__quarterly_overview", "model.stripe.stripe__weekly_overview"], "model.stripe.int_stripe__incomplete_charges": ["model.stripe.stripe__customer_overview", "model.stripe.stripe__daily_overview"], "test.stripe_source.unique_stg_stripe__balance_transaction_balance_transaction_id.2f29c783d0": [], "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f": [], "test.stripe_source.unique_stg_stripe__card_card_id.000d85b677": [], "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a": [], "test.stripe_source.unique_stg_stripe__charge_charge_id.04b21ec6e0": [], "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a": [], "test.stripe_source.unique_stg_stripe__customer_customer_id.a06a928db2": [], "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0": [], "test.stripe_source.unique_stg_stripe__payment_intent_payment_intent_id.02430feefd": [], "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb": [], "test.stripe_source.unique_stg_stripe__payment_method_payment_method_id.b12d5fcf1b": [], "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471": [], "test.stripe_source.unique_stg_stripe__payout_payout_id.9d9065d2c5": [], "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc": [], "test.stripe_source.unique_stg_stripe__refund_refund_id.0b7c337204": [], "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0": [], "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_id.e8805346de": [], "test.stripe_source.unique_stg_stripe__invoice_invoice_id.63b5714c58": [], "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095": [], "test.stripe_source.not_null_stg_stripe__plan_plan_id.f59445523e": [], "test.stripe_source.unique_stg_stripe__plan_plan_id.b21f08031c": [], "test.stripe_source.unique_stg_stripe__credit_note_credit_note_id.135c7cd4a0": [], "test.stripe_source.not_null_stg_stripe__credit_note_credit_note_id.d3e7f781dd": [], "test.stripe_source.unique_stg_stripe__credit_note_line_item_credit_note_line_item_id.3972a0829e": [], "test.stripe_source.not_null_stg_stripe__credit_note_line_item_credit_note_line_item_id.4a26fbafe7": [], "test.stripe.unique_stripe__balance_transactions_balance_transaction_id.313ec591b5": [], "test.stripe.unique_stripe__invoice_line_items_invoice_line_item_id.6d4544857c": [], "test.stripe.unique_stripe__subscription_line_items_invoice_line_item_id.a4a7f94547": [], "test.stripe.unique_stripe__subscription_details_subscription_id.8c3bcf1f61": [], "source.stripe_source.stripe.balance_transaction": ["model.stripe_source.stg_stripe__balance_transaction_tmp"], "source.stripe_source.stripe.card": ["model.stripe_source.stg_stripe__card_tmp"], "source.stripe_source.stripe.charge": ["model.stripe_source.stg_stripe__charge_tmp"], "source.stripe_source.stripe.customer": ["model.stripe_source.stg_stripe__customer_tmp"], "source.stripe_source.stripe.fee": ["model.stripe_source.stg_stripe__fee_tmp"], "source.stripe_source.stripe.payment_intent": ["model.stripe_source.stg_stripe__payment_intent_tmp"], "source.stripe_source.stripe.payment_method_card": ["model.stripe_source.stg_stripe__payment_method_card_tmp"], "source.stripe_source.stripe.payment_method": ["model.stripe_source.stg_stripe__payment_method_tmp"], "source.stripe_source.stripe.payout": ["model.stripe_source.stg_stripe__payout_tmp"], "source.stripe_source.stripe.refund": ["model.stripe_source.stg_stripe__refund_tmp"], "source.stripe_source.stripe.invoice_line_item": ["model.stripe_source.stg_stripe__invoice_line_item_tmp"], "source.stripe_source.stripe.invoice": ["model.stripe_source.stg_stripe__invoice_tmp"], "source.stripe_source.stripe.subscription_history": [], "source.stripe_source.stripe.subscription": ["model.stripe_source.stg_stripe__subscription_tmp"], "source.stripe_source.stripe.plan": ["model.stripe_source.stg_stripe__plan_tmp"], "source.stripe_source.stripe.credit_note": [], "source.stripe_source.stripe.credit_note_line_item": []}}