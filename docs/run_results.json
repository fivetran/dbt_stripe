{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.8", "generated_at": "2024-02-29T18:13:11.571699Z", "invocation_id": "7b26ef71-490f-4fb6-8aee-24614d0825cc", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.121113Z", "completed_at": "2024-02-29T18:12:58.131703Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.133722Z", "completed_at": "2024-02-29T18:12:58.133740Z"}], "thread_id": "Thread-2", "execution_time": 0.04498624801635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__balance_transaction_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`balance_transaction_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__balance_transaction_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.127732Z", "completed_at": "2024-02-29T18:12:58.132008Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.134000Z", "completed_at": "2024-02-29T18:12:58.134003Z"}], "thread_id": "Thread-4", "execution_time": 0.04394698143005371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__charge_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`charge_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.092494Z", "completed_at": "2024-02-29T18:12:58.132297Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.134252Z", "completed_at": "2024-02-29T18:12:58.134255Z"}], "thread_id": "Thread-1", "execution_time": 0.04728293418884277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__account_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`account_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.124646Z", "completed_at": "2024-02-29T18:12:58.132547Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.134504Z", "completed_at": "2024-02-29T18:12:58.134508Z"}], "thread_id": "Thread-3", "execution_time": 0.045493125915527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__card_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`card_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__card_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.184062Z", "completed_at": "2024-02-29T18:12:58.201261Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.201805Z", "completed_at": "2024-02-29T18:12:58.201812Z"}], "thread_id": "Thread-4", "execution_time": 0.06377768516540527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__dispute_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`dispute_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__dispute_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.187818Z", "completed_at": "2024-02-29T18:12:58.206860Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.208441Z", "completed_at": "2024-02-29T18:12:58.208446Z"}], "thread_id": "Thread-1", "execution_time": 0.07084131240844727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__fee_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`fee_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__fee_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.191376Z", "completed_at": "2024-02-29T18:12:58.207276Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.208955Z", "completed_at": "2024-02-29T18:12:58.208958Z"}], "thread_id": "Thread-3", "execution_time": 0.07122921943664551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_line_item_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`invoice_line_item_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.140408Z", "completed_at": "2024-02-29T18:12:58.208124Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.210780Z", "completed_at": "2024-02-29T18:12:58.210784Z"}], "thread_id": "Thread-2", "execution_time": 0.07401609420776367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__customer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`customer_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.203432Z", "completed_at": "2024-02-29T18:12:58.208689Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.211365Z", "completed_at": "2024-02-29T18:12:58.211368Z"}], "thread_id": "Thread-4", "execution_time": 0.010169029235839844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`invoice_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.215071Z", "completed_at": "2024-02-29T18:12:58.228341Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.229741Z", "completed_at": "2024-02-29T18:12:58.229746Z"}], "thread_id": "Thread-1", "execution_time": 0.01857304573059082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_intent_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`payment_intent_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_intent_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.218378Z", "completed_at": "2024-02-29T18:12:58.228700Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.230288Z", "completed_at": "2024-02-29T18:12:58.230291Z"}], "thread_id": "Thread-3", "execution_time": 0.018413066864013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_card_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`payment_method_card_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_card_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.222083Z", "completed_at": "2024-02-29T18:12:58.229466Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.232058Z", "completed_at": "2024-02-29T18:12:58.232061Z"}], "thread_id": "Thread-2", "execution_time": 0.018651962280273438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`payment_method_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.225676Z", "completed_at": "2024-02-29T18:12:58.230039Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.232615Z", "completed_at": "2024-02-29T18:12:58.232617Z"}], "thread_id": "Thread-4", "execution_time": 0.01622772216796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payout_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`payout_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payout_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.246116Z", "completed_at": "2024-02-29T18:12:58.258861Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.260028Z", "completed_at": "2024-02-29T18:12:58.260033Z"}], "thread_id": "Thread-3", "execution_time": 0.026721954345703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__refund_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`refund_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__refund_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.236296Z", "completed_at": "2024-02-29T18:12:58.259148Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.260808Z", "completed_at": "2024-02-29T18:12:58.260811Z"}], "thread_id": "Thread-1", "execution_time": 0.028590917587280273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__price_plan_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`price_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__price_plan_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.255394Z", "completed_at": "2024-02-29T18:12:58.260302Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.262921Z", "completed_at": "2024-02-29T18:12:58.262924Z"}], "thread_id": "Thread-4", "execution_time": 0.018651962280273438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__transfer_tmp", "compiled": true, "compiled_code": "\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`transfer_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__transfer_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.249489Z", "completed_at": "2024-02-29T18:12:58.260547Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.263219Z", "completed_at": "2024-02-29T18:12:58.263222Z"}], "thread_id": "Thread-2", "execution_time": 0.028922080993652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__subscription_tmp", "compiled": true, "compiled_code": "\n\n\n    \n    \n        \n        \n        \n        select * \n    from `dbt-package-testing`.`stripe_testing`.`subscription_history_data`", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription_tmp`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.266559Z", "completed_at": "2024-02-29T18:12:58.267818Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.271164Z", "completed_at": "2024-02-29T18:12:58.271168Z"}], "thread_id": "Thread-3", "execution_time": 0.010762929916381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.account_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.268859Z", "completed_at": "2024-02-29T18:12:58.270024Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.274056Z", "completed_at": "2024-02-29T18:12:58.274060Z"}], "thread_id": "Thread-1", "execution_time": 0.010249137878417969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.balance_transaction_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.271417Z", "completed_at": "2024-02-29T18:12:58.272484Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.275938Z", "completed_at": "2024-02-29T18:12:58.275942Z"}], "thread_id": "Thread-4", "execution_time": 0.00917506217956543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.card_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.272741Z", "completed_at": "2024-02-29T18:12:58.273793Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.276228Z", "completed_at": "2024-02-29T18:12:58.276231Z"}], "thread_id": "Thread-2", "execution_time": 0.009245872497558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.charge_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.279295Z", "completed_at": "2024-02-29T18:12:58.280481Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.284421Z", "completed_at": "2024-02-29T18:12:58.284424Z"}], "thread_id": "Thread-3", "execution_time": 0.01098775863647461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.credit_note_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.282272Z", "completed_at": "2024-02-29T18:12:58.283344Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.287277Z", "completed_at": "2024-02-29T18:12:58.287281Z"}], "thread_id": "Thread-1", "execution_time": 0.01055908203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.credit_note_line_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.284662Z", "completed_at": "2024-02-29T18:12:58.285720Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.289109Z", "completed_at": "2024-02-29T18:12:58.289112Z"}], "thread_id": "Thread-4", "execution_time": 0.00967097282409668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.customer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.285970Z", "completed_at": "2024-02-29T18:12:58.287028Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.289371Z", "completed_at": "2024-02-29T18:12:58.289374Z"}], "thread_id": "Thread-2", "execution_time": 0.008967161178588867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.dispute_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.292447Z", "completed_at": "2024-02-29T18:12:58.293620Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.296795Z", "completed_at": "2024-02-29T18:12:58.296798Z"}], "thread_id": "Thread-3", "execution_time": 0.010987043380737305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.fee_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.294615Z", "completed_at": "2024-02-29T18:12:58.295719Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.300410Z", "completed_at": "2024-02-29T18:12:58.300414Z"}], "thread_id": "Thread-1", "execution_time": 0.010549068450927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.invoice_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.297031Z", "completed_at": "2024-02-29T18:12:58.298846Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.302250Z", "completed_at": "2024-02-29T18:12:58.302254Z"}], "thread_id": "Thread-4", "execution_time": 0.009647130966186523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.invoice_line_item_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.299108Z", "completed_at": "2024-02-29T18:12:58.300152Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.302514Z", "completed_at": "2024-02-29T18:12:58.302517Z"}], "thread_id": "Thread-2", "execution_time": 0.00974893569946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.payment_intent_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.305694Z", "completed_at": "2024-02-29T18:12:58.306771Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.309901Z", "completed_at": "2024-02-29T18:12:58.309905Z"}], "thread_id": "Thread-3", "execution_time": 0.010892868041992188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.payment_method_card_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.307739Z", "completed_at": "2024-02-29T18:12:58.308819Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.313444Z", "completed_at": "2024-02-29T18:12:58.313448Z"}], "thread_id": "Thread-1", "execution_time": 0.010541915893554688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.payment_method_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.310144Z", "completed_at": "2024-02-29T18:12:58.311189Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.315389Z", "completed_at": "2024-02-29T18:12:58.315392Z"}], "thread_id": "Thread-4", "execution_time": 0.009634733200073242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.payout_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.311439Z", "completed_at": "2024-02-29T18:12:58.313193Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.315649Z", "completed_at": "2024-02-29T18:12:58.315652Z"}], "thread_id": "Thread-2", "execution_time": 0.009734869003295898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.plan_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.318660Z", "completed_at": "2024-02-29T18:12:58.319778Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.322920Z", "completed_at": "2024-02-29T18:12:58.322924Z"}], "thread_id": "Thread-3", "execution_time": 0.010102033615112305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.price_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.320758Z", "completed_at": "2024-02-29T18:12:58.321845Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.325799Z", "completed_at": "2024-02-29T18:12:58.325802Z"}], "thread_id": "Thread-1", "execution_time": 0.009699106216430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.refund_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.323162Z", "completed_at": "2024-02-29T18:12:58.324214Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.327635Z", "completed_at": "2024-02-29T18:12:58.327638Z"}], "thread_id": "Thread-4", "execution_time": 0.008866071701049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.subscription_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.324465Z", "completed_at": "2024-02-29T18:12:58.325545Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.327896Z", "completed_at": "2024-02-29T18:12:58.327898Z"}], "thread_id": "Thread-2", "execution_time": 0.008962869644165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.subscription_history_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.330912Z", "completed_at": "2024-02-29T18:12:58.332757Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:58.337812Z", "completed_at": "2024-02-29T18:12:58.337817Z"}], "thread_id": "Thread-3", "execution_time": 0.01650691032409668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.stripe_integration_tests.transfer_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.333751Z", "completed_at": "2024-02-29T18:12:59.052484Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:59.053059Z", "completed_at": "2024-02-29T18:12:59.053066Z"}], "thread_id": "Thread-1", "execution_time": 0.7244689464569092, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__balance_transaction", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__balance_transaction_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    available_on\n    \n as \n    \n    available_on\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    fee\n    \n as \n    \n    fee\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    net\n    \n as \n    \n    net\n    \n, \n    \n    \n    payout_id\n    \n as \n    \n    payout_id\n    \n, \n    cast(null as string) as \n    \n    reporting_category\n    \n , \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as balance_transaction_id,\n        amount,\n        cast(available_on as timestamp) as available_on,\n        cast(created as timestamp) as created_at,\n        connected_account_id,\n        currency,\n        description,\n        exchange_rate,\n        fee,\n        net,\n        reporting_category,\n        source,\n        status,\n        type,\n        source_relation\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__balance_transaction`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.341537Z", "completed_at": "2024-02-29T18:12:59.053333Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:59.055568Z", "completed_at": "2024-02-29T18:12:59.055575Z"}], "thread_id": "Thread-2", "execution_time": 0.7234909534454346, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__account", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    business_profile_name\n    \n as \n    \n    business_profile_name\n    \n, \n    \n    \n    business_profile_mcc\n    \n as \n    \n    business_profile_mcc\n    \n, \n    \n    \n    business_type\n    \n as \n    \n    business_type\n    \n, \n    \n    \n    charges_enabled\n    \n as \n    \n    charges_enabled\n    \n, \n    \n    \n    company_address_city\n    \n as \n    \n    company_address_city\n    \n, \n    \n    \n    company_address_country\n    \n as \n    \n    company_address_country\n    \n, \n    \n    \n    company_address_line_1\n    \n as \n    \n    company_address_line_1\n    \n, \n    \n    \n    company_address_line_2\n    \n as \n    \n    company_address_line_2\n    \n, \n    \n    \n    company_address_postal_code\n    \n as \n    \n    company_address_postal_code\n    \n, \n    \n    \n    company_address_state\n    \n as \n    \n    company_address_state\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    company_phone\n    \n as \n    \n    company_phone\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    default_currency\n    \n as \n    \n    default_currency\n    \n, \n    \n    \n    details_submitted\n    \n as \n    \n    details_submitted\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    payouts_enabled\n    \n as \n    \n    payouts_enabled\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        business_profile_mcc,\n        business_profile_name,\n        business_type,\n        charges_enabled,\n        company_address_city,\n        company_address_country,\n        company_address_line_1,\n        company_address_line_2,\n        company_address_postal_code,\n        company_address_state,\n        company_name,\n        company_phone,\n        country,\n        cast(created as timestamp) as created_at,\n        default_currency,\n        email,\n        is_deleted,\n        metadata,\n        payouts_enabled as is_payouts_enabled,\n        type as account_type,\n        source_relation\n\n        \n\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.338078Z", "completed_at": "2024-02-29T18:12:59.053638Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:59.056055Z", "completed_at": "2024-02-29T18:12:59.056058Z"}], "thread_id": "Thread-4", "execution_time": 0.7246189117431641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__charge", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_refunded\n    \n as \n    \n    amount_refunded\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    calculated_statement_descriptor\n    \n as \n    \n    calculated_statement_descriptor\n    \n, \n    \n    \n    captured\n    \n as \n    \n    captured\n    \n, \n    \n    \n    card_id\n    \n as \n    \n    card_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    fraud_details_stripe_report\n    \n as \n    \n    fraud_details_stripe_report\n    \n, \n    \n    \n    fraud_details_user_report\n    \n as \n    \n    fraud_details_user_report\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    outcome_network_status\n    \n as \n    \n    outcome_network_status\n    \n, \n    \n    \n    outcome_reason\n    \n as \n    \n    outcome_reason\n    \n, \n    \n    \n    outcome_risk_level\n    \n as \n    \n    outcome_risk_level\n    \n, \n    \n    \n    outcome_risk_score\n    \n as \n    \n    outcome_risk_score\n    \n, \n    \n    \n    outcome_seller_message\n    \n as \n    \n    outcome_seller_message\n    \n, \n    \n    \n    outcome_type\n    \n as \n    \n    outcome_type\n    \n, \n    \n    \n    paid\n    \n as \n    \n    paid\n    \n, \n    \n    \n    payment_intent_id\n    \n as \n    \n    payment_intent_id\n    \n, \n    cast(null as string) as \n    \n    payment_method_id\n    \n , \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    receipt_url\n    \n as \n    \n    receipt_url\n    \n, \n    \n    \n    refunded\n    \n as \n    \n    refunded\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    source_transfer\n    \n as \n    \n    source_transfer\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n, \n    \n    \n    transfer_id\n    \n as \n    \n    transfer_id\n    \n, \n    cast(null as string) as \n    \n    billing_detail_address_city\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_country\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_line1\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_line2\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_postal_code\n    \n , \n    cast(null as string) as \n    \n    billing_detail_address_state\n    \n , \n    cast(null as string) as \n    \n    billing_detail_email\n    \n , \n    cast(null as string) as \n    \n    billing_detail_name\n    \n , \n    cast(null as string) as \n    \n    billing_detail_phone\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n\n    select \n        id as charge_id, \n        amount,\n        amount_refunded,\n        application_fee_amount,\n        balance_transaction_id,\n        captured as is_captured,\n        card_id,\n        cast(created as timestamp) as created_at,\n        connected_account_id,\n        customer_id,\n        currency,\n        description,\n        failure_code,\n        failure_message,\n        metadata,\n        paid as is_paid,\n        payment_intent_id,\n        payment_method_id,\n        receipt_email,\n        receipt_number,\n        refunded as is_refunded,\n        status,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_carrier,\n        shipping_name,\n        shipping_phone,\n        shipping_tracking_number,\n        source_id,\n        source_transfer,\n        statement_descriptor,\n        invoice_id,\n        calculated_statement_descriptor,\n        billing_detail_address_city,\n        billing_detail_address_country,\n        billing_detail_address_line1,\n        billing_detail_address_line2,\n        billing_detail_address_postal_code,\n        billing_detail_address_state,\n        billing_detail_email,\n        billing_detail_name,\n        billing_detail_phone,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:58.347610Z", "completed_at": "2024-02-29T18:12:59.054712Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:59.057202Z", "completed_at": "2024-02-29T18:12:59.057205Z"}], "thread_id": "Thread-3", "execution_time": 0.7119486331939697, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__card", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__card_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_1_check\n    \n as \n    \n    address_line_1_check\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    address_zip\n    \n as \n    \n    address_zip\n    \n, \n    \n    \n    address_zip_check\n    \n as \n    \n    address_zip_check\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    cvc_check\n    \n as \n    \n    cvc_check\n    \n, \n    \n    \n    dynamic_last_4\n    \n as \n    \n    dynamic_last_4\n    \n, \n    \n    \n    exp_month\n    \n as \n    \n    exp_month\n    \n, \n    \n    \n    exp_year\n    \n as \n    \n    exp_year\n    \n, \n    \n    \n    fingerprint\n    \n as \n    \n    fingerprint\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_4\n    \n as \n    \n    last_4\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    network\n    \n as \n    \n    network\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    tokenization_method\n    \n as \n    \n    tokenization_method\n    \n, \n    cast(null as string) as \n    \n    wallet_type\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as card_id,\n        account_id,\n        address_city as card_address_city,\n        address_country as card_address_country,\n        address_line_1 as card_address_line_1,\n        address_line_2 as card_address_line_2,\n        address_state as card_address_state,\n        address_zip as card_address_postal_code,\n        wallet_type,\n        brand,\n        country,\n        cast(created as timestamp) as created_at,\n        customer_id,\n        name as card_name,\n        recipient,\n        funding,\n        source_relation\n        \n        \n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__card`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:59.069074Z", "completed_at": "2024-02-29T18:12:59.749330Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:59.749880Z", "completed_at": "2024-02-29T18:12:59.749886Z"}], "thread_id": "Thread-4", "execution_time": 0.686614990234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice_line_item", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discountable\n    \n as \n    \n    discountable\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    cast(null as string) as \n    \n    invoice_item_id\n    \n , \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    \n    \n    plan_id\n    \n as \n    \n    plan_id\n    \n, \n    cast(null as string) as \n    \n    price_id\n    \n , \n    \n    \n    proration\n    \n as \n    \n    proration\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    subscription_item_id\n    \n as \n    \n    subscription_item_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unique_id\n    \n as \n    \n    unique_id\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_line_item_id,\n        invoice_id,\n        invoice_item_id,\n        amount,\n        currency,\n        description,\n        discountable as is_discountable,\n        plan_id,\n        price_id,\n        proration,\n        quantity,\n        subscription_id,\n        subscription_item_id,\n        type,\n        unique_id as unique_invoice_line_item_id,\n        period_start,\n        period_end,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n\n    \n    and id not like 'sub%' -- ids starting with 'sub' are temporary and are replaced by permanent ids starting with 'sli' \n    \n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:59.065711Z", "completed_at": "2024-02-29T18:12:59.756014Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:59.758508Z", "completed_at": "2024-02-29T18:12:59.758514Z"}], "thread_id": "Thread-2", "execution_time": 0.6964311599731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__fee", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__fee_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        balance_transaction_id,\n        index,\n        amount,\n        application,\n        currency,\n        description,\n        type,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__fee`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:59.059249Z", "completed_at": "2024-02-29T18:12:59.756931Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:59.759008Z", "completed_at": "2024-02-29T18:12:59.759011Z"}], "thread_id": "Thread-1", "execution_time": 0.7040061950683594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__dispute", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__dispute_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction\n    \n as \n    \n    balance_transaction\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    evidence_access_activity_log\n    \n as \n    \n    evidence_access_activity_log\n    \n, \n    \n    \n    evidence_billing_address\n    \n as \n    \n    evidence_billing_address\n    \n, \n    \n    \n    evidence_cancellation_policy\n    \n as \n    \n    evidence_cancellation_policy\n    \n, \n    \n    \n    evidence_cancellation_policy_disclosure\n    \n as \n    \n    evidence_cancellation_policy_disclosure\n    \n, \n    \n    \n    evidence_cancellation_rebuttal\n    \n as \n    \n    evidence_cancellation_rebuttal\n    \n, \n    \n    \n    evidence_customer_communication\n    \n as \n    \n    evidence_customer_communication\n    \n, \n    \n    \n    evidence_customer_email_address\n    \n as \n    \n    evidence_customer_email_address\n    \n, \n    \n    \n    evidence_customer_name\n    \n as \n    \n    evidence_customer_name\n    \n, \n    \n    \n    evidence_customer_purchase_ip\n    \n as \n    \n    evidence_customer_purchase_ip\n    \n, \n    \n    \n    evidence_customer_signature\n    \n as \n    \n    evidence_customer_signature\n    \n, \n    \n    \n    evidence_details_due_by\n    \n as \n    \n    evidence_details_due_by\n    \n, \n    \n    \n    evidence_details_has_evidence\n    \n as \n    \n    evidence_details_has_evidence\n    \n, \n    \n    \n    evidence_details_past_due\n    \n as \n    \n    evidence_details_past_due\n    \n, \n    \n    \n    evidence_details_submission_count\n    \n as \n    \n    evidence_details_submission_count\n    \n, \n    \n    \n    evidence_duplicate_charge_documentation\n    \n as \n    \n    evidence_duplicate_charge_documentation\n    \n, \n    \n    \n    evidence_duplicate_charge_explanation\n    \n as \n    \n    evidence_duplicate_charge_explanation\n    \n, \n    \n    \n    evidence_duplicate_charge_id\n    \n as \n    \n    evidence_duplicate_charge_id\n    \n, \n    \n    \n    evidence_product_description\n    \n as \n    \n    evidence_product_description\n    \n, \n    \n    \n    evidence_receipt\n    \n as \n    \n    evidence_receipt\n    \n, \n    \n    \n    evidence_refund_policy\n    \n as \n    \n    evidence_refund_policy\n    \n, \n    \n    \n    evidence_refund_policy_disclosure\n    \n as \n    \n    evidence_refund_policy_disclosure\n    \n, \n    \n    \n    evidence_refund_refusal_explanation\n    \n as \n    \n    evidence_refund_refusal_explanation\n    \n, \n    \n    \n    evidence_service_date\n    \n as \n    \n    evidence_service_date\n    \n, \n    \n    \n    evidence_service_documentation\n    \n as \n    \n    evidence_service_documentation\n    \n, \n    \n    \n    evidence_shipping_address\n    \n as \n    \n    evidence_shipping_address\n    \n, \n    \n    \n    evidence_shipping_carrier\n    \n as \n    \n    evidence_shipping_carrier\n    \n, \n    \n    \n    evidence_shipping_date\n    \n as \n    \n    evidence_shipping_date\n    \n, \n    \n    \n    evidence_shipping_documentation\n    \n as \n    \n    evidence_shipping_documentation\n    \n, \n    \n    \n    evidence_shipping_tracking_number\n    \n as \n    \n    evidence_shipping_tracking_number\n    \n, \n    \n    \n    evidence_uncategorized_file\n    \n as \n    \n    evidence_uncategorized_file\n    \n, \n    \n    \n    evidence_uncategorized_text\n    \n as \n    \n    evidence_uncategorized_text\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_charge_refundable\n    \n as \n    \n    is_charge_refundable\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as dispute_id,\n        amount as dispute_amount,\n        balance_transaction,\n        charge_id,\n        connected_account_id,\n        cast(created as timestamp) as dispute_created_at,\n        currency as dispute_currency,\n        evidence_access_activity_log,\n        evidence_billing_address,\n        evidence_cancellation_policy,\n        evidence_cancellation_policy_disclosure,\n        evidence_cancellation_rebuttal,\n        evidence_customer_communication,\n        evidence_customer_email_address,\n        evidence_customer_name,\n        evidence_customer_purchase_ip,\n        evidence_customer_signature,\n        evidence_details_due_by,\n        evidence_details_has_evidence,\n        evidence_details_past_due,\n        evidence_details_submission_count,\n        evidence_duplicate_charge_documentation,\n        evidence_duplicate_charge_explanation,\n        evidence_duplicate_charge_id,\n        evidence_product_description,\n        evidence_receipt,\n        evidence_refund_policy,\n        evidence_refund_policy_disclosure,\n        evidence_refund_refusal_explanation,\n        evidence_service_date,\n        evidence_service_documentation,\n        evidence_shipping_address,\n        evidence_shipping_carrier,\n        evidence_shipping_date,\n        evidence_shipping_documentation,\n        evidence_shipping_tracking_number,\n        evidence_uncategorized_file,\n        evidence_uncategorized_text,\n        is_charge_refundable,\n        metadata as dispute_metadata,\n        reason as dispute_reason,\n        status as dispute_status,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__dispute`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:59.073212Z", "completed_at": "2024-02-29T18:12:59.757595Z"}, {"name": "execute", "started_at": "2024-02-29T18:12:59.759810Z", "completed_at": "2024-02-29T18:12:59.759814Z"}], "thread_id": "Thread-3", "execution_time": 0.6963660717010498, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__customer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_balance\n    \n as \n    \n    account_balance\n    \n, \n    \n    \n    address_city\n    \n as \n    \n    address_city\n    \n, \n    \n    \n    address_country\n    \n as \n    \n    address_country\n    \n, \n    \n    \n    address_line_1\n    \n as \n    \n    address_line_1\n    \n, \n    \n    \n    address_line_2\n    \n as \n    \n    address_line_2\n    \n, \n    \n    \n    address_postal_code\n    \n as \n    \n    address_postal_code\n    \n, \n    \n    \n    address_state\n    \n as \n    \n    address_state\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bank_account_id\n    \n as \n    \n    bank_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    default_card_id\n    \n as \n    \n    default_card_id\n    \n, \n    \n    \n    delinquent\n    \n as \n    \n    delinquent\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_prefix\n    \n as \n    \n    invoice_prefix\n    \n, \n    \n    \n    invoice_settings_default_payment_method\n    \n as \n    \n    invoice_settings_default_payment_method\n    \n, \n    \n    \n    invoice_settings_footer\n    \n as \n    \n    invoice_settings_footer\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as string) as \n    \n    metadata\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    shipping_address_city\n    \n as \n    \n    shipping_address_city\n    \n, \n    \n    \n    shipping_address_country\n    \n as \n    \n    shipping_address_country\n    \n, \n    \n    \n    shipping_address_line_1\n    \n as \n    \n    shipping_address_line_1\n    \n, \n    \n    \n    shipping_address_line_2\n    \n as \n    \n    shipping_address_line_2\n    \n, \n    \n    \n    shipping_address_postal_code\n    \n as \n    \n    shipping_address_postal_code\n    \n, \n    \n    \n    shipping_address_state\n    \n as \n    \n    shipping_address_state\n    \n, \n    \n    \n    shipping_carrier\n    \n as \n    \n    shipping_carrier\n    \n, \n    \n    \n    shipping_name\n    \n as \n    \n    shipping_name\n    \n, \n    \n    \n    shipping_phone\n    \n as \n    \n    shipping_phone\n    \n, \n    \n    \n    shipping_tracking_number\n    \n as \n    \n    shipping_tracking_number\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    tax_exempt\n    \n as \n    \n    tax_exempt\n    \n, \n    \n    \n    tax_info_tax_id\n    \n as \n    \n    tax_info_tax_id\n    \n, \n    \n    \n    tax_info_type\n    \n as \n    \n    tax_info_type\n    \n, \n    \n    \n    tax_info_verification_status\n    \n as \n    \n    tax_info_verification_status\n    \n, \n    \n    \n    tax_info_verification_verified_name\n    \n as \n    \n    tax_info_verification_verified_name\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as customer_id,\n        account_balance,\n        address_city as customer_address_city,\n        address_country as customer_address_country,\n        address_line_1 as customer_address_line_1,\n        address_line_2 as customer_address_line_2,\n        address_postal_code as customer_address_postal_code,\n        address_state as customer_address_state,\n        balance as customer_balance,\n        bank_account_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        default_card_id,\n        delinquent as is_delinquent,\n        description,\n        email,\n        metadata,\n        name as customer_name,\n        phone,\n        shipping_address_city,\n        shipping_address_country,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_postal_code,\n        shipping_address_state,\n        shipping_name,\n        shipping_phone,\n        source_relation,\n        coalesce(is_deleted, false) as is_deleted\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:59.751557Z", "completed_at": "2024-02-29T18:13:00.325916Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.326980Z", "completed_at": "2024-02-29T18:13:00.326989Z"}], "thread_id": "Thread-4", "execution_time": 0.5879397392272949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__invoice", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as INT64) as \n    \n    amount_due\n    \n , \n    cast(null as INT64) as \n    \n    amount_paid\n    \n , \n    cast(null as INT64) as \n    \n    amount_remaining\n    \n , \n    cast(null as INT64) as \n    \n    application_fee_amount\n    \n , \n    cast(null as INT64) as \n    \n    post_payment_credit_notes_amount\n    \n , \n    cast(null as INT64) as \n    \n    pre_payment_credit_notes_amount\n    \n , \n    cast(null as INT64) as \n    \n    attempt_count\n    \n , \n    cast(null as boolean) as \n    \n    attempted\n    \n , \n    cast(null as boolean) as \n    \n    auto_advance\n    \n , \n    cast(null as string) as \n    \n    billing\n    \n , \n    cast(null as string) as \n    \n    billing_reason\n    \n , \n    cast(null as string) as \n    \n    charge_id\n    \n , \n    cast(null as timestamp) as \n    \n    created\n    \n , \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    cast(null as string) as \n    \n    default_source_id\n    \n , \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    cast(null as timestamp) as \n    \n    due_date\n    \n , \n    cast(null as INT64) as \n    \n    ending_balance\n    \n , \n    cast(null as timestamp) as \n    \n    finalized_at\n    \n , \n    cast(null as string) as \n    \n    footer\n    \n , \n    cast(null as string) as \n    \n    hosted_invoice_url\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as string) as \n    \n    invoice_pdf\n    \n , \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as string) as \n    \n    metadata\n    \n , \n    cast(null as timestamp) as \n    \n    next_payment_attempt\n    \n , \n    cast(null as string) as \n    \n    number\n    \n , \n    cast(null as boolean) as \n    \n    paid\n    \n , \n    cast(null as string) as \n    \n    default_payment_method_id\n    \n , \n    cast(null as string) as \n    \n    payment_intent_id\n    \n , \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    period_end\n    \n as \n    \n    period_end\n    \n, \n    \n    \n    period_start\n    \n as \n    \n    period_start\n    \n, \n    cast(null as string) as \n    \n    receipt_number\n    \n , \n    cast(null as INT64) as \n    \n    starting_balance\n    \n , \n    cast(null as string) as \n    \n    statement_descriptor\n    \n , \n    cast(null as string) as \n    \n    status\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_finalized_at\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_marked_uncollectible_at\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_paid_at\n    \n , \n    cast(null as timestamp) as \n    \n    status_transitions_voided_at\n    \n , \n    cast(null as INT64) as \n    \n    subscription_proration_date\n    \n , \n    cast(null as INT64) as \n    \n    subtotal\n    \n , \n    cast(null as INT64) as \n    \n    tax\n    \n , \n    cast(null as numeric) as \n    \n    tax_percent\n    \n , \n    cast(null as INT64) as \n    \n    threshold_reason_amount_gte\n    \n , \n    cast(null as INT64) as \n    \n    total\n    \n , \n    cast(null as timestamp) as \n    \n    webhooks_delivered_at\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        default_payment_method_id,\n        payment_intent_id,\n        subscription_id,\n        amount_due,\n        amount_paid,\n        amount_remaining,\n        post_payment_credit_notes_amount,\n        pre_payment_credit_notes_amount,\n        attempt_count,\n        auto_advance,\n        billing_reason,\n        charge_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        customer_id,\n        description,\n        due_date,\n        metadata,\n        number,\n        paid as is_paid,\n        receipt_number,\n        status,\n        subtotal,\n        tax,\n        tax_percent,\n        total,\n        period_start,\n        period_end,\n        cast(status_transitions_finalized_at as timestamp) as status_transitions_finalized_at,\n        cast(status_transitions_marked_uncollectible_at as timestamp) as status_transitions_marked_uncollectible_at,\n        cast(status_transitions_paid_at as timestamp) as status_transitions_paid_at,\n        cast(status_transitions_voided_at as timestamp) as status_transitions_voided_at,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n    and not coalesce(is_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:59.771006Z", "completed_at": "2024-02-29T18:13:00.358731Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.363848Z", "completed_at": "2024-02-29T18:13:00.363853Z"}], "thread_id": "Thread-3", "execution_time": 0.601553201675415, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    billing_detail_address_city\n    \n as \n    \n    billing_detail_address_city\n    \n, \n    \n    \n    billing_detail_address_country\n    \n as \n    \n    billing_detail_address_country\n    \n, \n    \n    \n    billing_detail_address_line_1\n    \n as \n    \n    billing_detail_address_line_1\n    \n, \n    \n    \n    billing_detail_address_line_2\n    \n as \n    \n    billing_detail_address_line_2\n    \n, \n    \n    \n    billing_detail_address_postal_code\n    \n as \n    \n    billing_detail_address_postal_code\n    \n, \n    \n    \n    billing_detail_address_state\n    \n as \n    \n    billing_detail_address_state\n    \n, \n    \n    \n    billing_detail_email\n    \n as \n    \n    billing_detail_email\n    \n, \n    \n    \n    billing_detail_name\n    \n as \n    \n    billing_detail_name\n    \n, \n    \n    \n    billing_detail_phone\n    \n as \n    \n    billing_detail_phone\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as string) as \n    \n    metadata\n    \n , \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        cast(created as timestamp) as created_at,\n        customer_id,\n        metadata,\n        type,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:59.763805Z", "completed_at": "2024-02-29T18:13:00.363170Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.365098Z", "completed_at": "2024-02-29T18:13:00.365101Z"}], "thread_id": "Thread-2", "execution_time": 0.6041269302368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_intent", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_intent_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_capturable\n    \n as \n    \n    amount_capturable\n    \n, \n    \n    \n    amount_received\n    \n as \n    \n    amount_received\n    \n, \n    \n    \n    application\n    \n as \n    \n    application\n    \n, \n    \n    \n    application_fee_amount\n    \n as \n    \n    application_fee_amount\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    cancellation_reason\n    \n as \n    \n    cancellation_reason\n    \n, \n    \n    \n    capture_method\n    \n as \n    \n    capture_method\n    \n, \n    \n    \n    confirmation_method\n    \n as \n    \n    confirmation_method\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_payment_error_charge_id\n    \n as \n    \n    last_payment_error_charge_id\n    \n, \n    \n    \n    last_payment_error_code\n    \n as \n    \n    last_payment_error_code\n    \n, \n    \n    \n    last_payment_error_decline_code\n    \n as \n    \n    last_payment_error_decline_code\n    \n, \n    \n    \n    last_payment_error_doc_url\n    \n as \n    \n    last_payment_error_doc_url\n    \n, \n    \n    \n    last_payment_error_message\n    \n as \n    \n    last_payment_error_message\n    \n, \n    \n    \n    last_payment_error_param\n    \n as \n    \n    last_payment_error_param\n    \n, \n    \n    \n    last_payment_error_source_id\n    \n as \n    \n    last_payment_error_source_id\n    \n, \n    \n    \n    last_payment_error_type\n    \n as \n    \n    last_payment_error_type\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    cast(null as string) as \n    \n    metadata\n    \n , \n    \n    \n    on_behalf_of\n    \n as \n    \n    on_behalf_of\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    receipt_email\n    \n as \n    \n    receipt_email\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transfer_data_destination\n    \n as \n    \n    transfer_data_destination\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_intent_id,\n        amount,\n        amount_capturable,\n        amount_received,\n        application,\n        application_fee_amount,\n        cast(canceled_at as timestamp) as canceled_at,\n        cancellation_reason,\n        capture_method,\n        confirmation_method,\n        cast(created as timestamp) as created_at,\n        currency,\n        customer_id,\n        description,\n        metadata,\n        payment_method_id,\n        receipt_email,\n        statement_descriptor,\n        status,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_intent`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:12:59.767772Z", "completed_at": "2024-02-29T18:13:00.576040Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.576853Z", "completed_at": "2024-02-29T18:13:00.576861Z"}], "thread_id": "Thread-1", "execution_time": 0.8150229454040527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payment_method_card", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_card_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    brand\n    \n as \n    \n    brand\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    \n    \n    funding\n    \n as \n    \n    funding\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    wallet_type\n    \n as \n    \n    wallet_type\n    \n, \n    cast(null as string) as \n    \n    three_d_secure_authentication_flow\n    \n , \n    cast(null as string) as \n    \n    three_d_secure_result\n    \n , \n    cast(null as string) as \n    \n    three_d_secure_result_reason\n    \n , \n    cast(null as string) as \n    \n    three_d_secure_version\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        payment_method_id,\n        brand,\n        funding,\n        charge_id,\n        type,\n        wallet_type,\n        three_d_secure_authentication_flow,\n        three_d_secure_result,\n        three_d_secure_result_reason,\n        three_d_secure_version,\n        source_relation\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_card`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.371790Z", "completed_at": "2024-02-29T18:13:00.923225Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.923910Z", "completed_at": "2024-02-29T18:13:00.923918Z"}], "thread_id": "Thread-2", "execution_time": 0.5571489334106445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__price_plan", "compiled": true, "compiled_code": "\n\nwith price_plan as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__price_plan_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as is_active , \n    \n    \n    billing_scheme\n    \n as \n    \n    billing_scheme\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    nickname\n    \n as \n    \n    nickname\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    recurring_aggregate_usage\n    \n as \n    \n    recurring_aggregate_usage\n    \n, \n    \n    \n    recurring_interval\n    \n as \n    \n    recurring_interval\n    \n, \n    \n    \n    recurring_interval_count\n    \n as \n    \n    recurring_interval_count\n    \n, \n    \n    \n    recurring_usage_type\n    \n as \n    \n    recurring_usage_type\n    \n, \n    \n    \n    unit_amount\n    \n as \n    \n    unit_amount\n    \n, \n    \n    \n    unit_amount_decimal\n    \n as \n    \n    unit_amount_decimal\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from price_plan\n),\n\nfinal as (\n\n    select \n        id as price_plan_id,\n        is_active,\n        unit_amount,\n        currency,\n        recurring_interval,\n        recurring_interval_count,\n        recurring_usage_type,\n        recurring_aggregate_usage,\n        metadata,\n        nickname,\n        product_id,\n        billing_scheme,\n        cast(created as timestamp) as created_at,\n        is_deleted,\n        source_relation\n\n        \n        \n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__price_plan`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.367754Z", "completed_at": "2024-02-29T18:13:00.931175Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.933024Z", "completed_at": "2024-02-29T18:13:00.933029Z"}], "thread_id": "Thread-3", "execution_time": 0.5676589012145996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__refund", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__refund_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    charge_id\n    \n as \n    \n    charge_id\n    \n, \n    cast(null as string) as \n    \n    payment_intent_id\n    \n , \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_reason\n    \n as \n    \n    failure_reason\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reason\n    \n as \n    \n    reason\n    \n, \n    \n    \n    receipt_number\n    \n as \n    \n    receipt_number\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        payment_intent_id,\n        balance_transaction_id,\n        charge_id,\n        amount,\n        cast(created as timestamp) as created_at,\n        currency,\n        description,\n        metadata,\n        reason,\n        receipt_number,\n        status,\n        source_relation\n\n        \n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__refund`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.359011Z", "completed_at": "2024-02-29T18:13:00.931955Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.933488Z", "completed_at": "2024-02-29T18:13:00.933492Z"}], "thread_id": "Thread-4", "execution_time": 0.5766410827636719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__payout", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payout_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    arrival_date\n    \n as \n    \n    arrival_date\n    \n, \n    \n    \n    automatic\n    \n as \n    \n    automatic\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    connected_account_id\n    \n as \n    \n    connected_account_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination_bank_account_id\n    \n as \n    \n    destination_bank_account_id\n    \n, \n    \n    \n    destination_card_id\n    \n as \n    \n    destination_card_id\n    \n, \n    \n    \n    failure_balance_transaction_id\n    \n as \n    \n    failure_balance_transaction_id\n    \n, \n    \n    \n    failure_code\n    \n as \n    \n    failure_code\n    \n, \n    \n    \n    failure_message\n    \n as \n    \n    failure_message\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    method\n    \n as \n    \n    method\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    statement_descriptor\n    \n as \n    \n    statement_descriptor\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as payout_id,\n        amount,\n        cast(arrival_date as timestamp) as arrival_date_at,\n        automatic as is_automatic,\n        balance_transaction_id,\n        cast(created as timestamp) as created_at,\n        currency,\n        description,\n        destination_bank_account_id,\n        destination_card_id,\n        metadata,\n        method,\n        source_type,\n        status,\n        type,\n        source_relation\n\n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payout`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.946804Z", "completed_at": "2024-02-29T18:13:00.953121Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.953765Z", "completed_at": "2024-02-29T18:13:00.953772Z"}], "thread_id": "Thread-4", "execution_time": 0.018178224563598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__balance_transaction_balance_transaction_id.0ac20e778f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__balance_transaction`\nwhere balance_transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.937067Z", "completed_at": "2024-02-29T18:13:00.954621Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.955917Z", "completed_at": "2024-02-29T18:13:00.955921Z"}], "thread_id": "Thread-3", "execution_time": 0.020960092544555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__balance_transaction_balance_transaction_id__source_relation.e83fa67eba", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__balance_transaction`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.956928Z", "completed_at": "2024-02-29T18:13:00.964673Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.965178Z", "completed_at": "2024-02-29T18:13:00.965181Z"}], "thread_id": "Thread-4", "execution_time": 0.010119915008544922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__account_account_id__source_relation.822bb93896", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account`\n    group by account_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.961548Z", "completed_at": "2024-02-29T18:13:00.969243Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.969754Z", "completed_at": "2024-02-29T18:13:00.969758Z"}], "thread_id": "Thread-3", "execution_time": 0.009276866912841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__account_account_id.374858379a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account`\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.966803Z", "completed_at": "2024-02-29T18:13:00.975306Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.975862Z", "completed_at": "2024-02-29T18:13:00.975866Z"}], "thread_id": "Thread-4", "execution_time": 0.010164022445678711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__incomplete_charges", "compiled": true, "compiled_code": "with charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`\n\n)\n\nselect \n  balance_transaction_id,\n  created_at,\n  customer_id,\n  connected_account_id,\n  amount,\n  source_relation\nfrom charge\nwhere not is_captured", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__incomplete_charges`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.971432Z", "completed_at": "2024-02-29T18:13:00.980648Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.981159Z", "completed_at": "2024-02-29T18:13:00.981163Z"}], "thread_id": "Thread-3", "execution_time": 0.010820150375366211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__charge_charge_id__source_relation.4616b292a1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        charge_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`\n    group by charge_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.977704Z", "completed_at": "2024-02-29T18:13:00.986077Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.986567Z", "completed_at": "2024-02-29T18:13:00.986571Z"}], "thread_id": "Thread-4", "execution_time": 0.010126113891601562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__charge_charge_id.8941bc704a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect charge_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`\nwhere charge_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.982825Z", "completed_at": "2024-02-29T18:13:00.988100Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.991704Z", "completed_at": "2024-02-29T18:13:00.991708Z"}], "thread_id": "Thread-3", "execution_time": 0.01002812385559082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__card_card_id__source_relation.6e04594797", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        card_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__card`\n    group by card_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.988874Z", "completed_at": "2024-02-29T18:13:00.997449Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.997956Z", "completed_at": "2024-02-29T18:13:00.997960Z"}], "thread_id": "Thread-4", "execution_time": 0.011073112487792969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__card_card_id.edadd3106a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect card_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__card`\nwhere card_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.993610Z", "completed_at": "2024-02-29T18:13:00.998195Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:00.999587Z", "completed_at": "2024-02-29T18:13:00.999590Z"}], "thread_id": "Thread-3", "execution_time": 0.0074498653411865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_line_item_invoice_line_item_id__invoice_id__source_relation.d2ff4b8aed", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_line_item_id, invoice_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item`\n    group by invoice_line_item_id, invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.001241Z", "completed_at": "2024-02-29T18:13:01.009851Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.010674Z", "completed_at": "2024-02-29T18:13:01.010680Z"}], "thread_id": "Thread-4", "execution_time": 0.011548995971679688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_line_item_invoice_line_item_id.5b9c83b5f3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_line_item_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item`\nwhere invoice_line_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.005464Z", "completed_at": "2024-02-29T18:13:01.010402Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.011760Z", "completed_at": "2024-02-29T18:13:01.011764Z"}], "thread_id": "Thread-3", "execution_time": 0.00770878791809082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.unique_stg_stripe__invoice_line_item_unique_invoice_line_item_id.a59523b7b7", "compiled": true, "compiled_code": "\n    \n    \n\nwith dbt_test__target as (\n\n  select unique_invoice_line_item_id as unique_field\n  from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item`\n  where unique_invoice_line_item_id is not null\n\n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.017687Z", "completed_at": "2024-02-29T18:13:01.020788Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.021542Z", "completed_at": "2024-02-29T18:13:01.021546Z"}], "thread_id": "Thread-3", "execution_time": 0.008503913879394531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__fee_balance_transaction_id.725d4ac005", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect balance_transaction_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__fee`\nwhere balance_transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.014068Z", "completed_at": "2024-02-29T18:13:01.021283Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.022515Z", "completed_at": "2024-02-29T18:13:01.022518Z"}], "thread_id": "Thread-4", "execution_time": 0.010420083999633789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__fee_balance_transaction_id__index__source_relation.d2b1cfff07", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, index, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__fee`\n    group by balance_transaction_id, index, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.024864Z", "completed_at": "2024-02-29T18:13:01.032703Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.033221Z", "completed_at": "2024-02-29T18:13:01.033225Z"}], "thread_id": "Thread-3", "execution_time": 0.010371208190917969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__dispute_dispute_id__source_relation.3fe3205476", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        dispute_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__dispute`\n    group by dispute_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.028468Z", "completed_at": "2024-02-29T18:13:01.033472Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.034755Z", "completed_at": "2024-02-29T18:13:01.034758Z"}], "thread_id": "Thread-4", "execution_time": 0.011088132858276367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__customer_customer_id__source_relation.3fa0f43271", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        customer_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`\n    group by customer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.036363Z", "completed_at": "2024-02-29T18:13:01.042954Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.043449Z", "completed_at": "2024-02-29T18:13:01.043453Z"}], "thread_id": "Thread-3", "execution_time": 0.008868932723999023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__customer_customer_id.2e70421da0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`\nwhere customer_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.039883Z", "completed_at": "2024-02-29T18:13:01.047837Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.048331Z", "completed_at": "2024-02-29T18:13:01.048334Z"}], "thread_id": "Thread-4", "execution_time": 0.00954294204711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__invoice_invoice_id__source_relation.f632654e72", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice`\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.044973Z", "completed_at": "2024-02-29T18:13:01.053945Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.054416Z", "completed_at": "2024-02-29T18:13:01.054419Z"}], "thread_id": "Thread-3", "execution_time": 0.010421991348266602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__invoice_invoice_id.34cc0ff095", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice`\nwhere invoice_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.049954Z", "completed_at": "2024-02-29T18:13:01.100827Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.119016Z", "completed_at": "2024-02-29T18:13:01.119023Z"}], "thread_id": "Thread-4", "execution_time": 0.08094310760498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_payment_method_id__source_relation.02a8143517", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_method_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method`\n    group by payment_method_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.579630Z", "completed_at": "2024-02-29T18:13:01.135121Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.135618Z", "completed_at": "2024-02-29T18:13:01.135622Z"}], "thread_id": "Thread-1", "execution_time": 0.5575389862060547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__transfer", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__transfer_tmp`\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_reversed\n    \n as \n    \n    amount_reversed\n    \n, \n    \n    \n    balance_transaction_id\n    \n as \n    \n    balance_transaction_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    destination\n    \n as \n    \n    destination\n    \n, \n    \n    \n    destination_payment\n    \n as \n    \n    destination_payment\n    \n, \n    \n    \n    destination_payment_id\n    \n as \n    \n    destination_payment_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    reversed\n    \n as \n    \n    reversed\n    \n, \n    \n    \n    source_transaction\n    \n as \n    \n    source_transaction\n    \n, \n    \n    \n    source_transaction_id\n    \n as \n    \n    source_transaction_id\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    transfer_group\n    \n as \n    \n    transfer_group\n    \n\n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        id as transfer_id,\n        amount as transfer_amount,\n        amount_reversed as transfer_amount_reversed,\n        balance_transaction_id,\n        cast(created as timestamp) as transfer_created_at,\n        currency as transfer_currency,\n        description as transfer_description,\n        destination as transfer_destination,\n        destination_payment,\n        destination_payment_id,\n        metadata as transfer_metadata,\n        reversed as transfer_is_reversed,\n        source_transaction,\n        source_transaction_id,\n        source_type,\n        transfer_group,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n)\n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__transfer`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.055935Z", "completed_at": "2024-02-29T18:13:01.136668Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.138312Z", "completed_at": "2024-02-29T18:13:01.138316Z"}], "thread_id": "Thread-3", "execution_time": 0.08651494979858398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_payment_method_id.0a8907c471", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method`\nwhere payment_method_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.131619Z", "completed_at": "2024-02-29T18:13:01.137394Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.141412Z", "completed_at": "2024-02-29T18:13:01.141416Z"}], "thread_id": "Thread-4", "execution_time": 0.011433124542236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_intent_payment_intent_id__source_relation.046730da02", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_intent_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_intent`\n    group by payment_intent_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.138571Z", "completed_at": "2024-02-29T18:13:01.144138Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.150806Z", "completed_at": "2024-02-29T18:13:01.150810Z"}], "thread_id": "Thread-1", "execution_time": 0.014386892318725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_intent_payment_intent_id.cb5b4d09eb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_intent_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_intent`\nwhere payment_intent_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.145036Z", "completed_at": "2024-02-29T18:13:01.156841Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.157860Z", "completed_at": "2024-02-29T18:13:01.157864Z"}], "thread_id": "Thread-3", "execution_time": 0.015443801879882812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payment_method_card_payment_method_id__source_relation.fe1f48acd0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payment_method_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_card`\n    group by payment_method_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.148051Z", "completed_at": "2024-02-29T18:13:01.157126Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.158375Z", "completed_at": "2024-02-29T18:13:01.158378Z"}], "thread_id": "Thread-4", "execution_time": 0.015774965286254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payment_method_card_payment_method_id.f246b11438", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_card`\nwhere payment_method_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.152614Z", "completed_at": "2024-02-29T18:13:01.158134Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.160122Z", "completed_at": "2024-02-29T18:13:01.160125Z"}], "thread_id": "Thread-1", "execution_time": 0.009206056594848633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__price_plan_price_plan_id__source_relation.3d189cd99d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        price_plan_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__price_plan`\n    group by price_plan_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.162597Z", "completed_at": "2024-02-29T18:13:01.172710Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.173495Z", "completed_at": "2024-02-29T18:13:01.173499Z"}], "thread_id": "Thread-3", "execution_time": 0.013774871826171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__payout_payout_id__source_relation.f9897a29ec", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payout_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payout`\n    group by payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.166259Z", "completed_at": "2024-02-29T18:13:01.173247Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.174735Z", "completed_at": "2024-02-29T18:13:01.174738Z"}], "thread_id": "Thread-4", "execution_time": 0.014150857925415039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__refund_refund_id__source_relation.93aa6111ec", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        refund_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__refund`\n    group by refund_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.169807Z", "completed_at": "2024-02-29T18:13:01.173983Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.175988Z", "completed_at": "2024-02-29T18:13:01.175991Z"}], "thread_id": "Thread-1", "execution_time": 0.011202812194824219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__payout_payout_id.6864a8acfc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payout_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payout`\nwhere payout_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.177991Z", "completed_at": "2024-02-29T18:13:01.185348Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.186298Z", "completed_at": "2024-02-29T18:13:01.186302Z"}], "thread_id": "Thread-3", "execution_time": 0.010743141174316406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__refund_refund_id.7c6dcedec0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect refund_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__refund`\nwhere refund_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.181918Z", "completed_at": "2024-02-29T18:13:01.185621Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.186544Z", "completed_at": "2024-02-29T18:13:01.186547Z"}], "thread_id": "Thread-4", "execution_time": 0.00989389419555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__transfer_transfer_id__source_relation.ade160ba67", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__transfer`\n    group by transfer_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:00.925895Z", "completed_at": "2024-02-29T18:13:01.635033Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.635634Z", "completed_at": "2024-02-29T18:13:01.635640Z"}], "thread_id": "Thread-2", "execution_time": 0.7109699249267578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe_source.stg_stripe__subscription", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription_tmp`\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _fivetran_active\n    \n as \n    \n    _fivetran_active\n    \n, \n    \n    \n    application_fee_percent\n    \n as \n    \n    application_fee_percent\n    \n, \n    \n    \n    billing\n    \n as \n    \n    billing\n    \n, \n    \n    \n    billing_cycle_anchor\n    \n as \n    \n    billing_cycle_anchor\n    \n, \n    \n    \n    billing_threshold_amount_gte\n    \n as \n    \n    billing_threshold_amount_gte\n    \n, \n    \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n as \n    \n    billing_threshold_reset_billing_cycle_anchor\n    \n, \n    \n    \n    cancel_at\n    \n as \n    \n    cancel_at\n    \n, \n    \n    \n    cancel_at_period_end\n    \n as \n    \n    cancel_at_period_end\n    \n, \n    \n    \n    canceled_at\n    \n as \n    \n    canceled_at\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    current_period_end\n    \n as \n    \n    current_period_end\n    \n, \n    \n    \n    current_period_start\n    \n as \n    \n    current_period_start\n    \n, \n    \n    \n    customer_id\n    \n as \n    \n    customer_id\n    \n, \n    \n    \n    days_until_due\n    \n as \n    \n    days_until_due\n    \n, \n    \n    \n    default_source_id\n    \n as \n    \n    default_source_id\n    \n, \n    \n    \n    ended_at\n    \n as \n    \n    ended_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as string) as \n    \n    latest_invoice_id\n    \n , \n    cast(null as string) as \n    \n    default_payment_method_id\n    \n , \n    cast(null as string) as \n    \n    pending_setup_intent_id\n    \n , \n    \n    \n    livemode\n    \n as \n    \n    livemode\n    \n, \n    \n    \n    metadata\n    \n as \n    \n    metadata\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tax_percent\n    \n as \n    \n    tax_percent\n    \n, \n    \n    \n    trial_end\n    \n as \n    \n    trial_end\n    \n, \n    \n    \n    trial_start\n    \n as \n    \n    trial_start\n    \n, \n    cast(null as string) as \n    \n    pause_collection_behavior\n    \n , \n    cast(null as timestamp) as \n    \n    pause_collection_resumes_at\n    \n \n\n\n\n        \n\n\n, cast('' as string) as source_relation\n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as subscription_id,\n        latest_invoice_id,\n        customer_id,\n        default_payment_method_id,\n        pending_setup_intent_id,\n        status,\n        billing,\n        billing_cycle_anchor,\n        cast(cancel_at as timestamp) as cancel_at,\n        cancel_at_period_end as is_cancel_at_period_end,\n        cast(canceled_at as timestamp) as canceled_at,\n        cast(created as timestamp) as created_at,\n        current_period_start,\n        current_period_end,\n        days_until_due,\n        metadata,\n        cast(start_date as timestamp) as start_date_at,\n        cast(ended_at as timestamp) as ended_at,\n        pause_collection_behavior,\n        cast(pause_collection_resumes_at as timestamp) as pause_collection_resumes_at,\n        source_relation\n        \n        \n\n    from fields\n    \n\n    where cast(livemode as boolean ) = True\n\n\n    \n        and coalesce(_fivetran_active, true)\n    \n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.639088Z", "completed_at": "2024-02-29T18:13:01.672358Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.672952Z", "completed_at": "2024-02-29T18:13:01.672957Z"}], "thread_id": "Thread-1", "execution_time": 0.03624677658081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__balance_transactions", "compiled": true, "compiled_code": "with balance_transaction as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__balance_transaction`\n\n), account as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account`\n\n), cards as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__card`\n\n), charge as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`\n\n), customer as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`\n\n), dispute as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__dispute`\n\n\n), invoice as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice`\n\n\n), payment_intent as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_intent`\n\n\n), payment_method as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method`\n\n), payment_method_card as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payment_method_card`\n\n\n), payout as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__payout`\n\n), refund as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__refund`\n\n\n), subscription as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`\n\n\n), transfers as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__transfer`\n\n)\n\nselect\n    balance_transaction.balance_transaction_id,\n    balance_transaction.created_at as balance_transaction_created_at,\n    balance_transaction.available_on as balance_transaction_available_on,\n    balance_transaction.currency as balance_transaction_currency,\n    balance_transaction.amount as balance_transaction_amount,\n    balance_transaction.fee as balance_transaction_fee,\n    balance_transaction.net as balance_transaction_net,\n    balance_transaction.source as balance_transaction_source_id,\n    balance_transaction.description as balance_transaction_description,\n    balance_transaction.type as balance_transaction_type,\n    coalesce(balance_transaction.reporting_category,\n        case\n            when balance_transaction.type in ('charge', 'payment') then 'charge'\n            when balance_transaction.type in ('refund', 'payment_refund') then 'refund'\n            when balance_transaction.type in ('payout_cancel', 'payout_failure') then 'payout_reversal'\n            when balance_transaction.type in ('transfer', 'recipient_transfer') then 'transfer'\n            when balance_transaction.type in ('transfer_cancel', 'transfer_failure', 'recipient_transfer_cancel', 'recipient_transfer_failure') then 'transfer_reversal'\n            else balance_transaction.type end)\n    as balance_transaction_reporting_category,\n    case\n        when balance_transaction.type in ('charge', 'payment') then charge.amount \n        when balance_transaction.type in ('refund', 'payment_refund') then refund.amount\n        when dispute_id is not null then dispute.dispute_amount\n        else null\n    end as customer_facing_amount,\n    case \n        when balance_transaction.type = 'charge' then charge.currency \n    end as customer_facing_currency,\n    \n\n        datetime_add(\n            cast( balance_transaction.available_on as datetime),\n        interval 1 day\n        )\n\n as effective_at,\n    case\n        when payout.is_automatic = true then payout.payout_id \n        else null\n    end as automatic_payout_id,\n    payout.payout_id,\n    payout.created_at as payout_created_at,\n    payout.currency as payout_currency,\n    payout.is_automatic as payout_is_automatic,\n    payout.arrival_date_at as payout_arrival_date_at,\n    case\n        when payout.is_automatic = true then payout.arrival_date_at\n        else null\n    end as automatic_payout_effective_at,\n    payout.type as payout_type,\n    payout.status as payout_status,\n    payout.description as payout_description,\n    payout.destination_bank_account_id,\n    payout.destination_card_id,\n    coalesce(charge.customer_id, refund_charge.customer_id) as customer_id,\n    charge.receipt_email,\n    customer.email as customer_email,\n    customer.customer_name,\n    customer.description as customer_description,\n    customer.shipping_address_line_1 as customer_shipping_address_line_1,\n    customer.shipping_address_line_2 as customer_shipping_address_line_2,\n    customer.shipping_address_city as customer_shipping_address_city,\n    customer.shipping_address_state as customer_shipping_address_state,\n    customer.shipping_address_postal_code as customer_shipping_address_postal_code,\n    customer.shipping_address_country as customer_shipping_address_country,\n    customer.customer_address_line_1,\n    customer.customer_address_line_2,\n    customer.customer_address_city,\n    customer.customer_address_state,\n    customer.customer_address_postal_code,\n    customer.customer_address_country,\n    charge.shipping_address_line_1 as charge_shipping_address_line_1,\n    charge.shipping_address_line_2 as charge_shipping_address_line_2,\n    charge.shipping_address_city as charge_shipping_address_city,\n    charge.shipping_address_state as charge_shipping_address_state,\n    charge.shipping_address_postal_code as charge_shipping_address_postal_code,\n    charge.shipping_address_country as charge_shipping_address_country,\n    cards.card_address_line_1,\n    cards.card_address_line_2,\n    cards.card_address_city,\n    cards.card_address_state,\n    cards.card_address_postal_code,\n    cards.card_address_country,\n    coalesce(charge.charge_id, refund.charge_id, dispute.charge_id) as charge_id,\n    charge.created_at as charge_created_at,\n    payment_intent.payment_intent_id,\n\n    \n    invoice.invoice_id,\n    invoice.number as invoice_number,\n    \n\n    \n    subscription.subscription_id,\n    \n\n    \n    payment_method.type as payment_method_type,\n    payment_method_card.brand as payment_method_brand,\n    payment_method_card.funding as payment_method_funding,\n    \n\n    cards.brand as card_brand,\n    cards.funding as card_funding,\n    cards.country as card_country,\n    charge.statement_descriptor as charge_statement_descriptor ,\n    dispute.dispute_id,\n    dispute.dispute_reason,\n    refund.refund_id,\n    refund.reason as refund_reason,\n    transfers.transfer_id,\n    coalesce(balance_transaction.connected_account_id, charge.connected_account_id) as connected_account_id,\n    connected_account.country as connected_account_country,\n    case \n        when charge.connected_account_id is not null then charge.charge_id\n        else null\n    end as connected_account_direct_charge_id,\n    balance_transaction.source_relation\n\nfrom balance_transaction\n\nleft join payout \n    on payout.balance_transaction_id = balance_transaction.balance_transaction_id\n    and payout.source_relation = balance_transaction.source_relation\nleft join account connected_account\n    on balance_transaction.connected_account_id = connected_account.account_id\n    and balance_transaction.source_relation = connected_account.source_relation\nleft join charge\n    on charge.balance_transaction_id = balance_transaction.balance_transaction_id\n    and charge.source_relation = balance_transaction.source_relation\nleft join customer \n    on charge.customer_id = customer.customer_id\n    and charge.source_relation = customer.source_relation\nleft join cards\n    on charge.card_id = cards.card_id\n    and charge.source_relation = cards.source_relation\nleft join payment_intent\n    on charge.payment_intent_id = payment_intent.payment_intent_id\n    and charge.source_relation = payment_intent.source_relation\n\n\nleft join payment_method\n    on charge.payment_method_id = payment_method.payment_method_id\n    and charge.source_relation = payment_method.source_relation\nleft join payment_method_card \n    on payment_method_card.payment_method_id = payment_method.payment_method_id\n    and charge.source_relation = balance_transaction.source_relation\n\n\n\nleft join invoice \n    on charge.invoice_id = invoice.invoice_id\n    and charge.source_relation = invoice.source_relation\n\n\n\nleft join subscription\n    on subscription.latest_invoice_id =  charge.invoice_id\n    and subscription.source_relation =  charge.source_relation\n\n\nleft join refund\n    on refund.balance_transaction_id = balance_transaction.balance_transaction_id\n    and refund.source_relation = balance_transaction.source_relation\nleft join transfers \n    on transfers.balance_transaction_id = balance_transaction.balance_transaction_id\n    and transfers.source_relation = balance_transaction.source_relation\nleft join charge as refund_charge \n    on refund.charge_id = refund_charge.charge_id\n    and refund.source_relation = refund_charge.source_relation\nleft join dispute\n    on charge.charge_id = dispute.charge_id\n    and charge.source_relation = dispute.source_relation", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.667984Z", "completed_at": "2024-02-29T18:13:01.674064Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.676236Z", "completed_at": "2024-02-29T18:13:01.676240Z"}], "thread_id": "Thread-2", "execution_time": 0.025441884994506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.dbt_utils_unique_combination_of_columns_stg_stripe__subscription_subscription_id__source_relation.1b87d4205c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`\n    group by subscription_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.661674Z", "completed_at": "2024-02-29T18:13:01.674325Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.676491Z", "completed_at": "2024-02-29T18:13:01.676494Z"}], "thread_id": "Thread-4", "execution_time": 0.03522086143493652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__subscription_details", "compiled": true, "compiled_code": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice`  \n\n), charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`  \n\n), invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item`  \n\n), subscription as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`  \n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`  \n\n), line_items_groups as (\n\n  select\n    invoice.invoice_id,\n    invoice.amount_due,\n    invoice.amount_paid,\n    invoice.amount_remaining,\n    invoice.created_at,\n    invoice.source_relation,\n    max(invoice_line_item.subscription_id) as subscription_id,\n    coalesce(sum(invoice_line_item.amount),0) as total_line_item_amount,\n    coalesce(count(distinct invoice_line_item.unique_invoice_line_item_id),0) as number_of_line_items\n  from invoice_line_item\n  join invoice \n    on invoice.invoice_id = invoice_line_item.invoice_id\n  group by 1, 2, 3, 4, 5, 6\n\n), grouped_by_subscription as (\n\n  select\n    subscription_id,\n    source_relation,\n    count(distinct invoice_id) as number_invoices_generated,\n    sum(amount_due) as total_amount_billed,\n    sum(amount_paid) as total_amount_paid,\n    sum(amount_remaining) total_amount_remaining,\n    max(created_at) as most_recent_invoice_created_at,\n    avg(amount_due) as average_invoice_amount,\n    avg(total_line_item_amount) as average_line_item_amount,\n    avg(number_of_line_items) as avg_num_line_items\n  from line_items_groups\n  group by 1, 2\n\n)\n\n\nselect\n  subscription.subscription_id,\n  subscription.customer_id,\n  customer.description as customer_description,\n  customer.email as customer_email,\n  subscription.status,\n  subscription.start_date_at,\n  subscription.ended_at,\n  subscription.billing,\n  subscription.billing_cycle_anchor,\n  subscription.canceled_at,\n  subscription.created_at,\n  subscription.current_period_start,\n  subscription.current_period_end,\n  subscription.days_until_due,\n  subscription.is_cancel_at_period_end,\n  subscription.cancel_at,\n  number_invoices_generated,\n  total_amount_billed,\n  total_amount_paid,\n  total_amount_remaining,\n  most_recent_invoice_created_at,\n  average_invoice_amount,\n  average_line_item_amount,\n  avg_num_line_items,\n  subscription.source_relation\nfrom subscription\nleft join grouped_by_subscription \n  on subscription.subscription_id = grouped_by_subscription.subscription_id\n  and subscription.source_relation = grouped_by_subscription.source_relation\nleft join customer\n  on subscription.customer_id = customer.customer_id\n  and subscription.source_relation = customer.source_relation", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__subscription_details`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.655929Z", "completed_at": "2024-02-29T18:13:01.675122Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.679753Z", "completed_at": "2024-02-29T18:13:01.679757Z"}], "thread_id": "Thread-3", "execution_time": 0.0425877571105957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__invoice_details", "compiled": true, "compiled_code": "\n\nwith invoice as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice`  \n\n), charge as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__charge`  \n\n), invoice_line_item as (\n\n    select\n        invoice_id,\n        source_relation,\n        coalesce(count(distinct unique_invoice_line_item_id),0) as number_of_line_items,\n        coalesce(sum(quantity),0) as total_quantity\n\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item`  \n    group by 1,2\n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`  \n\n\n\n), subscription as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`  \n\n), price_plan as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__price_plan`  \n\n\n)\n\nselect \n    invoice.invoice_id,\n    invoice.number as invoice_number,\n    invoice.created_at as invoice_created_at,\n    invoice.period_start,\n    invoice.period_end,\n    invoice.status,\n    invoice.due_date,\n    invoice.currency,\n    coalesce(invoice.amount_due,0) as amount_due,\n    coalesce(invoice.amount_paid,0) as amount_paid,\n    coalesce(invoice.subtotal,0) as subtotal,\n    coalesce(invoice.tax,0) as tax,\n    coalesce(invoice.total,0) as total,\n    coalesce(invoice.amount_remaining,0) as amount_remaining,\n    coalesce(invoice.attempt_count,0) as attempt_count,\n    invoice.description as invoice_memo,\n    invoice_line_item.number_of_line_items,\n    invoice_line_item.total_quantity,\n    charge.balance_transaction_id,\n    charge.amount as charge_amount, \n    charge.status as charge_status,\n    charge.connected_account_id, \n    charge.created_at as charge_created_at,\n    charge.is_refunded as charge_is_refunded,\n    customer.customer_id,\n    customer.description as customer_description,\n    customer.account_balance as customer_account_balance,\n    customer.currency as customer_currency,\n    customer.is_delinquent as customer_is_delinquent,\n    customer.email as customer_email,\n    \n    \n    subscription.subscription_id,\n    subscription.billing as subscription_billing,\n    subscription.start_date_at as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n\n    \n    invoice.source_relation\n\nfrom invoice\n\nleft join invoice_line_item \n    on invoice.invoice_id = invoice_line_item.invoice_id\n    and invoice.source_relation = invoice_line_item.source_relation\n\nleft join charge \n    on invoice.charge_id = charge.charge_id\n    and invoice.invoice_id = charge.invoice_id\n    and invoice.source_relation = charge.source_relation\n\n\nleft join subscription\n    on invoice.subscription_id = subscription.subscription_id\n    and invoice.source_relation = subscription.source_relation\n\n\n\nleft join customer \n    on invoice.customer_id = customer.customer_id\n    and invoice.source_relation = customer.source_relation", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__invoice_details`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.676744Z", "completed_at": "2024-02-29T18:13:01.682139Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.684506Z", "completed_at": "2024-02-29T18:13:01.684510Z"}], "thread_id": "Thread-1", "execution_time": 0.02557206153869629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe_source.not_null_stg_stripe__subscription_subscription_id.b242b1f7bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`\nwhere subscription_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.700518Z", "completed_at": "2024-02-29T18:13:01.722824Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.738466Z", "completed_at": "2024-02-29T18:13:01.738473Z"}], "thread_id": "Thread-3", "execution_time": 0.055567026138305664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__balance_change_from_activity_itemized_3", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n\n)\n\nselect \n    balance_transaction_id,\n    balance_transaction_created_at as created,\n    balance_transaction_available_on as available_on,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_source_id as source_id,\n    balance_transaction_description as description,\n    customer_facing_amount,\n    customer_facing_currency,\n    automatic_payout_id,\n    automatic_payout_effective_at,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    charge_id,\n    payment_intent_id,\n    charge_created_at as charge_created,\n\n    \n    invoice_id,\n    invoice_number,\n    \n\n    \n    subscription_id,\n    \n    \n    \n    payment_method_type,\n    \n\n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    dispute_reason,\n    connected_account_id,\n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_change_from_activity_itemized_3`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.697273Z", "completed_at": "2024-02-29T18:13:01.723166Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.738749Z", "completed_at": "2024-02-29T18:13:01.738752Z"}], "thread_id": "Thread-4", "execution_time": 0.056672096252441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__activity_itemized_2", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n\n)\n\nselect \n    balance_transaction_id,\n    balance_transaction_created_at,\n    balance_transaction_reporting_category,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as amount,\n    charge_id,\n    payment_intent_id,\n    refund_id,\n    dispute_id,\n\n    \n    invoice_id,\n    invoice_number,\n    \n\n    \n    subscription_id,\n    \n\n    transfer_id,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    automatic_payout_id,\n    automatic_payout_effective_at,\n\n    \n    payment_method_type,\n    \n    \n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    customer_facing_amount,\n    balance_transaction_description,\n    connected_account_id,\n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__activity_itemized_2`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.742425Z", "completed_at": "2024-02-29T18:13:01.747549Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.748061Z", "completed_at": "2024-02-29T18:13:01.748066Z"}], "thread_id": "Thread-3", "execution_time": 0.007513999938964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__ending_balance_reconciliation_itemized_4", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n    where automatic_payout_id is not null\n\n)\n\nselect\n    automatic_payout_id,\n    payout_arrival_date_at as automatic_payout_effective_at,\n    balance_transaction_id,\n    balance_transaction_created_at as created,\n    balance_transaction_available_on as available_on,\n    balance_transaction_currency as currency,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_source_id as source_id,\n    balance_transaction_description as description,\n    customer_facing_amount,\n    customer_facing_currency,\n    customer_id,\n    customer_email,\n    customer_name,\n    customer_description,\n    customer_shipping_address_line_1,\n    customer_shipping_address_line_2,\n    customer_shipping_address_city,\n    customer_shipping_address_state,\n    customer_shipping_address_postal_code,\n    customer_shipping_address_country,\n    customer_address_line_1,\n    customer_address_line_2,\n    customer_address_city,\n    customer_address_state,\n    customer_address_postal_code,\n    customer_address_country,\n    charge_shipping_address_line_1 as shipping_address_line_1,\n    charge_shipping_address_line_2 as shipping_address_line_2,\n    charge_shipping_address_city as shipping_address_city,\n    charge_shipping_address_state as shipping_address_state,\n    charge_shipping_address_postal_code as shipping_address_postal_code,\n    charge_shipping_address_country as shipping_address_country,\n    card_address_line_1,\n    card_address_line_2,\n    card_address_city,\n    card_address_state,\n    card_address_postal_code,\n    card_address_country,\n    charge_id,\n    payment_intent_id,\n    charge_created_at as charge_created,\n\n    \n    invoice_id,\n    invoice_number,\n    \n\n    \n    subscription_id,\n    \n    \n    \n    payment_method_type,\n    \n    \n    card_brand,\n    card_funding,\n    card_country,\n    charge_statement_descriptor as statement_descriptor,\n    dispute_reason,\n    connected_account_id, \n    connected_account_country,\n    connected_account_direct_charge_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__ending_balance_reconciliation_itemized_4`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.745302Z", "completed_at": "2024-02-29T18:13:01.748831Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.749996Z", "completed_at": "2024-02-29T18:13:01.750000Z"}], "thread_id": "Thread-4", "execution_time": 0.009090900421142578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__payout_itemized_3", "compiled": true, "compiled_code": "with balance_transaction_enhanced as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n    where payout_id is not null\n\n)\n\nselect\n    payout_id,\n    case \n        when payout_is_automatic = true then payout_arrival_date_at \n        else payout_created_at\n    end as effective_at,\n    payout_currency as currency,\n    balance_transaction_id,\n    balance_transaction_amount as gross,\n    balance_transaction_fee as fee,\n    balance_transaction_net as net,\n    balance_transaction_reporting_category as reporting_category,\n    balance_transaction_description as description,\n    payout_arrival_date_at as payout_expected_arrival_date,\n    payout_status,\n    case \n        when lower(payout_status) in ('canceled','failed') then payout_created_at\n        else null\n    end as payout_reversed_at,\n    payout_type,\n    payout_description,\n    coalesce(destination_bank_account_id, destination_card_id) as payout_destination_id,\n    source_relation\n\nfrom balance_transaction_enhanced", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__payout_itemized_3`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.750964Z", "completed_at": "2024-02-29T18:13:01.757889Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.758359Z", "completed_at": "2024-02-29T18:13:01.758363Z"}], "thread_id": "Thread-3", "execution_time": 0.009176015853881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_transactions_balance_transaction_id__source_relation.e7b1075064", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.754824Z", "completed_at": "2024-02-29T18:13:01.767393Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.767912Z", "completed_at": "2024-02-29T18:13:01.767916Z"}], "thread_id": "Thread-4", "execution_time": 0.014245748519897461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__subscription_details_subscription_id__source_relation.a1aa0c421a", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        subscription_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__subscription_details`\n    group by subscription_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.759900Z", "completed_at": "2024-02-29T18:13:01.772644Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.773144Z", "completed_at": "2024-02-29T18:13:01.773148Z"}], "thread_id": "Thread-3", "execution_time": 0.014249086380004883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__invoice_line_item_details", "compiled": true, "compiled_code": "\n\nwith invoice_line_item as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__invoice_line_item` \n\n), invoice_details as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__invoice_details`\n\n\n), subscription as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__subscription`  \n\n), price_plan as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__price_plan`  \n\n\n)\n\nselect \n    invoice_line_item.invoice_line_item_id,\n    invoice_line_item.invoice_id,\n    invoice_line_item.invoice_item_id,\n    coalesce(invoice_line_item.amount,0) as invoice_line_item_amount,\n    invoice_line_item.currency,\n    invoice_line_item.description as invoice_line_item_memo,\n    invoice_line_item.is_discountable,\n    invoice_line_item.plan_id,\n    invoice_line_item.price_id,\n    invoice_line_item.proration,\n    invoice_line_item.quantity,\n    invoice_line_item.subscription_id,\n    invoice_line_item.subscription_item_id,\n    invoice_line_item.type,\n    invoice_line_item.unique_invoice_line_item_id,\n    invoice_line_item.period_start,\n    invoice_line_item.period_end,\n    invoice_details.invoice_created_at,\n    invoice_details.status as invoice_status,\n    invoice_details.due_date as invoice_due_date,\n    coalesce(invoice_details.amount_due,0) as invoice_amount_due,\n    coalesce(invoice_details.amount_paid,0) as invoice_amount_paid,\n    coalesce(invoice_details.subtotal,0) as invoice_subtotal,\n    coalesce(invoice_details.tax,0) as invoice_tax,\n    coalesce(invoice_details.total,0) as invoice_total,\n    invoice_details.connected_account_id as connected_account_id,\n    invoice_details.customer_id as customer_id,\n\n    \n\n    subscription.billing as subscription_billing,\n    subscription.start_date_at as subscription_start_date,\n    subscription.ended_at as subscription_ended_at,\n    price_plan.is_active as price_plan_is_active,\n    price_plan.unit_amount as price_plan_amount,\n    price_plan.recurring_interval as price_plan_interval,\n    price_plan.recurring_interval_count as price_plan_interval_count,\n    price_plan.nickname as price_plan_nickname,\n    price_plan.product_id as price_plan_product_id,\n    \n\n    invoice_line_item.source_relation\n    \nfrom invoice_line_item\n\nleft join invoice_details \n    on invoice_line_item.invoice_id = invoice_details.invoice_id\n    and invoice_line_item.source_relation = invoice_details.source_relation\n\n\n\nleft join subscription\n    on invoice_line_item.subscription_id = subscription.subscription_id\n    and invoice_line_item.source_relation = subscription.source_relation\n\nleft join price_plan\n\n\n    on invoice_line_item.price_id = price_plan.price_plan_id\n\n\n    and invoice_line_item.source_relation = price_plan.source_relation\n\n", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__invoice_line_item_details`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.769694Z", "completed_at": "2024-02-29T18:13:01.774164Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.775309Z", "completed_at": "2024-02-29T18:13:01.775312Z"}], "thread_id": "Thread-4", "execution_time": 0.009674072265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_details_invoice_id__source_relation.77a5fcff44", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__invoice_details`\n    group by invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.775569Z", "completed_at": "2024-02-29T18:13:01.783009Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.783507Z", "completed_at": "2024-02-29T18:13:01.783510Z"}], "thread_id": "Thread-3", "execution_time": 0.009512901306152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__balance_change_from_activity_itemized_3_balance_transaction_id__source_relation.042900aa7d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_change_from_activity_itemized_3`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.780092Z", "completed_at": "2024-02-29T18:13:01.785169Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.789661Z", "completed_at": "2024-02-29T18:13:01.789665Z"}], "thread_id": "Thread-4", "execution_time": 0.010690927505493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__activity_itemized_2_balance_transaction_id__source_relation.bfde3a7d9b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        balance_transaction_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__activity_itemized_2`\n    group by balance_transaction_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.785416Z", "completed_at": "2024-02-29T18:13:01.794355Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.794990Z", "completed_at": "2024-02-29T18:13:01.794994Z"}], "thread_id": "Thread-3", "execution_time": 0.010906219482421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__ending_balance_reconciliation_itemized_4_automatic_payout_id__source_relation.a4e66a7386", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        automatic_payout_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__ending_balance_reconciliation_itemized_4`\n    group by automatic_payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.791372Z", "completed_at": "2024-02-29T18:13:01.796635Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.800543Z", "completed_at": "2024-02-29T18:13:01.800547Z"}], "thread_id": "Thread-4", "execution_time": 0.010455131530761719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__payout_itemized_3_payout_id__source_relation.db08f37862", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        payout_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__payout_itemized_3`\n    group by payout_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.797414Z", "completed_at": "2024-02-29T18:13:01.801739Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:01.802263Z", "completed_at": "2024-02-29T18:13:01.802266Z"}], "thread_id": "Thread-3", "execution_time": 0.00649714469909668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__invoice_line_item_details_invoice_line_item_id__invoice_id__source_relation.c9a57418fb", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        invoice_line_item_id, invoice_id, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__invoice_line_item_details`\n    group by invoice_line_item_id, invoice_id, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.705057Z", "completed_at": "2024-02-29T18:13:02.604427Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:02.606037Z", "completed_at": "2024-02-29T18:13:02.606058Z"}], "thread_id": "Thread-1", "execution_time": 0.9030768871307373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__customer_overview", "compiled": true, "compiled_code": "with balance_transaction_joined as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`  \n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__incomplete_charges`  \n\n), customer as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__customer`  \n\n), transactions_grouped as (\n\n    select\n      customer_id,\n      source_relation,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then balance_transaction_amount\n          else 0 \n        end) \n      as total_sales,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') \n          then balance_transaction_amount\n          else 0 \n        end) \n      as total_refunds,    \n      sum(balance_transaction_amount) as total_gross_transaction_amount,\n      sum(balance_transaction_fee) as total_fees,\n      sum(balance_transaction_net) as total_net_transaction_amount,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then 1\n          else 0 \n          end) \n      as total_sales_count, \n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') \n          then 1\n          else 0 \n        end) \n      as total_refund_count,   \n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') and timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_amount \n          else 0 \n        end) \n      as sales_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') and timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_amount \n          else 0 \n        end) \n      as refunds_this_month,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_amount \n          else 0 \n        end) \n      as gross_transaction_amount_this_month,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_fee \n          else 0 \n        end) \n      as fees_this_month,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then balance_transaction_net \n          else 0 \n        end) \n      as net_transaction_amount_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('charge', 'payment') and timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then 1 \n          else 0 \n        end) \n      as sales_count_this_month,\n      sum(\n        case \n          when balance_transaction_type in ('payment_refund', 'refund') and timestamp_trunc(\n        cast(date(\n    balance_transaction_created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then 1 \n          else 0 \n        end) \n      as refund_count_this_month,\n      min(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then date(\n    balance_transaction_created_at\n    \n    )\n          else null \n        end) \n      as first_sale_date,\n      max(\n        case \n          when balance_transaction_type in ('charge', 'payment') \n          then date(\n    balance_transaction_created_at\n    \n    )\n          else null \n        end) \n      as most_recent_sale_date\n    from balance_transaction_joined\n    where balance_transaction_type in ('payment', 'charge', 'payment_refund', 'refund')\n    group by 1,2\n\n), failed_charges_by_customer as (\n\n    select\n      customer_id,\n      source_relation,\n      count(*) as total_failed_charge_count,\n      sum(amount) as total_failed_charge_amount,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then 1\n          else 0 \n        end) \n      as failed_charge_count_this_month,\n      sum(\n        case \n          when timestamp_trunc(\n        cast(date(\n    created_at\n    \n    ) as timestamp),\n        month\n    ) = timestamp_trunc(\n        cast(date(\n    current_timestamp\n    \n    ) as timestamp),\n        month\n    )\n          then amount\n          else 0 \n        end) \n      as failed_charge_amount_this_month\n    from incomplete_charges\n    group by 1,2\n\n), transactions_not_associated_with_customer as (\n\n    select\n      'No Customer ID' as customer_id,\n      'No Associated Customer' as customer_description,\n      customer.created_at as customer_created_at,\n      customer.currency as customer_currency,\n      customer.`account_balance`,\n  customer.`customer_address_city`,\n  customer.`customer_address_country`,\n  customer.`customer_address_line_1`,\n  customer.`customer_address_line_2`,\n  customer.`customer_address_postal_code`,\n  customer.`customer_address_state`,\n  customer.`customer_balance`,\n  customer.`bank_account_id`,\n  customer.`default_card_id`,\n  customer.`is_delinquent`,\n  customer.`email`,\n  customer.`customer_name`,\n  customer.`phone`,\n  customer.`shipping_address_city`,\n  customer.`shipping_address_country`,\n  customer.`shipping_address_line_1`,\n  customer.`shipping_address_line_2`,\n  customer.`shipping_address_postal_code`,\n  customer.`shipping_address_state`,\n  customer.`shipping_name`,\n  customer.`shipping_phone`,\n  customer.`is_deleted`,\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      0 as total_failed_charge_count,\n      0 as total_failed_charge_amount,\n      0 as failed_charge_count_this_month,\n      0 as failed_charge_amount_this_month,\n      transactions_grouped.source_relation\n\n    from transactions_grouped\n    left join customer \n        on transactions_grouped.customer_id = customer.customer_id\n        and transactions_grouped.source_relation = customer.source_relation\n    where customer.customer_id is null and customer.description is null\n\n\n), customer_transactions_overview as (\n\n    select\n      customer.customer_id,\n      customer.description as customer_description,\n      customer.created_at as customer_created_at,\n      customer.currency as customer_currency,\n      customer.`account_balance`,\n  customer.`customer_address_city`,\n  customer.`customer_address_country`,\n  customer.`customer_address_line_1`,\n  customer.`customer_address_line_2`,\n  customer.`customer_address_postal_code`,\n  customer.`customer_address_state`,\n  customer.`customer_balance`,\n  customer.`bank_account_id`,\n  customer.`default_card_id`,\n  customer.`is_delinquent`,\n  customer.`email`,\n  customer.`customer_name`,\n  customer.`phone`,\n  customer.`shipping_address_city`,\n  customer.`shipping_address_country`,\n  customer.`shipping_address_line_1`,\n  customer.`shipping_address_line_2`,\n  customer.`shipping_address_postal_code`,\n  customer.`shipping_address_state`,\n  customer.`shipping_name`,\n  customer.`shipping_phone`,\n  customer.`is_deleted`,\n      coalesce(transactions_grouped.total_sales/100.0, 0) as total_sales,\n      coalesce(transactions_grouped.total_refunds/100.0, 0) as total_refunds,\n      coalesce(transactions_grouped.total_gross_transaction_amount/100.0, 0) as total_gross_transaction_amount,\n      coalesce(transactions_grouped.total_fees/100.0, 0) as total_fees,\n      coalesce(transactions_grouped.total_net_transaction_amount/100.0, 0) as total_net_transaction_amount,\n      coalesce(transactions_grouped.total_sales_count, 0) as total_sales_count,\n      coalesce(transactions_grouped.total_refund_count, 0) as total_refund_count,    \n      coalesce(transactions_grouped.sales_this_month/100.0, 0) as sales_this_month,\n      coalesce(transactions_grouped.refunds_this_month/100.0, 0) as refunds_this_month,\n      coalesce(transactions_grouped.gross_transaction_amount_this_month/100.0, 0) as gross_transaction_amount_this_month,\n      coalesce(transactions_grouped.fees_this_month/100.0, 0) as fees_this_month,\n      coalesce(transactions_grouped.net_transaction_amount_this_month/100.0, 0) as net_transaction_amount_this_month,\n      coalesce(transactions_grouped.sales_count_this_month, 0) as sales_count_this_month,\n      coalesce(transactions_grouped.refund_count_this_month, 0) as refund_count_this_month,\n      transactions_grouped.first_sale_date,\n      transactions_grouped.most_recent_sale_date,\n      coalesce(failed_charges_by_customer.total_failed_charge_count, 0) as total_failed_charge_count,\n      coalesce(failed_charges_by_customer.total_failed_charge_amount/100, 0) as total_failed_charge_amount,\n      coalesce(failed_charges_by_customer.failed_charge_count_this_month, 0) as failed_charge_count_this_month,\n      coalesce(failed_charges_by_customer.failed_charge_amount_this_month/100, 0) as failed_charge_amount_this_month,\n      customer.source_relation\n      \n    from customer\n    left join transactions_grouped\n        on customer.customer_id = transactions_grouped.customer_id\n        and customer.source_relation = transactions_grouped.source_relation\n    left join failed_charges_by_customer \n        on customer.customer_id = failed_charges_by_customer.customer_id\n        and customer.source_relation = failed_charges_by_customer.source_relation\n)\n\nselect *\nfrom transactions_not_associated_with_customer\nunion all \nselect *\nfrom customer_transactions_overview", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__customer_overview`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:01.684973Z", "completed_at": "2024-02-29T18:13:11.520323Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:11.521268Z", "completed_at": "2024-02-29T18:13:11.521278Z"}], "thread_id": "Thread-2", "execution_time": 9.839409112930298, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__date_spine", "compiled": true, "compiled_code": "with spine as (\n\n    \n    \n    \n    \n        \n            \n\n        \n\n    \n\n    \n    \n\n    \n\n     \n    \n        \n    \n        \n\n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1131\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n        datetime_add(\n            cast( '2021-01-25' as datetime),\n        interval row_number() over (order by 1) - 1 day\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n        datetime_add(\n            cast( '2024-02-29' as datetime),\n        interval 1 day\n        )\n\n\n\n)\n\nselect * from filtered\n\n\n),\n\nbalance_transactions as (\n    \n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n),\n\naccount as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stg_stripe`.`stg_stripe__account`\n),\n\ndate_spine as (\n\n    select\n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        day\n    ) as date) as date_day, \n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        week\n    ) as date) as date_week, \n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        month\n    ) as date) as date_month,\n        cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        year\n    ) as date) as date_year,  \n        row_number() over (order by cast(timestamp_trunc(\n        cast(date_day as timestamp),\n        day\n    ) as date)) as date_index\n    from spine\n),\n\nfinal as (\n\n    select distinct\n        account.account_id,\n        account.source_relation,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        date_spine.date_index\n    from account \n    cross join date_spine\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__date_spine`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:11.524622Z", "completed_at": "2024-02-29T18:13:11.531295Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:11.532072Z", "completed_at": "2024-02-29T18:13:11.532078Z"}], "thread_id": "Thread-4", "execution_time": 0.009340763092041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__account_daily", "compiled": true, "compiled_code": "with date_spine as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__date_spine`\n\n), balance_transaction as (\n\n    select *,\n        case \n            when balance_transaction_type = 'payout' \n            then date(\n    balance_transaction_available_on\n    \n    )  \n            else date(\n    balance_transaction_created_at\n    \n    )\n        end as date\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__balance_transactions`\n\n), incomplete_charges as (\n\n    select *\n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__incomplete_charges`  \n\n), daily_account_balance_transactions as (\n\n    select\n        date_spine.date_day,\n        date_spine.account_id,\n        date_spine.source_relation,\n        sum(case when balance_transaction.balance_transaction_type in ('charge', 'payment') \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_sales_amount,\n        sum(case when balance_transaction.balance_transaction_type in ('payment_refund', 'refund') \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_refunds_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'adjustment' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_adjustments_amount,\n        sum(case when balance_transaction.balance_transaction_type not in ('charge', 'payment', 'payment_refund', 'refund', 'adjustment', 'payout') and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_other_transactions_amount,\n        sum(case when balance_transaction.balance_transaction_type <> 'payout' and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_gross_transaction_amount,\n        sum(case when balance_transaction.balance_transaction_type <> 'payout' and balance_transaction.balance_transaction_type not like '%transfer%' \n            then balance_transaction_net \n            else 0 end) as total_daily_net_transactions_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction_fee * -1.0\n            else 0 end) as total_daily_payout_fee_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction.balance_transaction_amount\n            else 0 end) as total_daily_gross_payout_amount,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' or balance_transaction.balance_transaction_type like '%transfer%' \n            then balance_transaction_fee * -1.0 \n            else balance_transaction_net end) as daily_net_activity_amount,\n        sum(case when balance_transaction.balance_transaction_type in ('payment', 'charge') \n            then 1 \n            else 0 end) as total_daily_sales_count,\n        sum(case when balance_transaction.balance_transaction_type = 'payout' \n            then 1\n            else 0 end) as total_daily_payouts_count,\n        count(distinct case when balance_transaction.balance_transaction_type = 'adjustment' \n                then coalesce(balance_transaction_source_id, payout_id) \n                else null end) as total_daily_adjustments_count\n    from date_spine\n    left join balance_transaction\n        on cast(timestamp_trunc(\n        cast(balance_transaction.date as timestamp),\n        day\n    ) as date) = date_spine.date_day\n        and balance_transaction.source_relation = date_spine.source_relation\n    group by 1,2,3\n\n), daily_failed_charges as (\n\n    select\n        date(\n    created_at\n    \n    ) as date,\n        source_relation,\n        count(*) as total_daily_failed_charge_count,\n        sum(amount) as total_daily_failed_charge_amount\n    from incomplete_charges\n    group by 1,2\n)\n\nselect\n    daily_account_balance_transactions.date_day,\n    daily_account_balance_transactions.account_id,\n    daily_account_balance_transactions.source_relation,\n    coalesce(daily_account_balance_transactions.total_daily_sales_amount/100.0,0) as total_daily_sales_amount,\n    coalesce(daily_account_balance_transactions.total_daily_refunds_amount/100.0,0) as total_daily_refunds_amount,\n    coalesce(daily_account_balance_transactions.total_daily_adjustments_amount/100.0,0) as total_daily_adjustments_amount,\n    coalesce(daily_account_balance_transactions.total_daily_other_transactions_amount/100.0,0) as total_daily_other_transactions_amount,\n    coalesce(daily_account_balance_transactions.total_daily_gross_transaction_amount/100.0,0) as total_daily_gross_transaction_amount,\n    coalesce(daily_account_balance_transactions.total_daily_net_transactions_amount/100.0,0) as total_daily_net_transactions_amount,\n    coalesce(daily_account_balance_transactions.total_daily_payout_fee_amount/100.0,0) as total_daily_payout_fee_amount,\n    coalesce(daily_account_balance_transactions.total_daily_gross_payout_amount/100.0,0) as total_daily_gross_payout_amount,\n    coalesce(daily_account_balance_transactions.daily_net_activity_amount/100.0,0) as daily_net_activity_amount,\n    coalesce((daily_account_balance_transactions.daily_net_activity_amount + daily_account_balance_transactions.total_daily_gross_payout_amount)/100.0, 0) as daily_end_balance_amount,\n    coalesce(daily_account_balance_transactions.total_daily_sales_count, 0) as total_daily_sales_count,\n    coalesce(daily_account_balance_transactions.total_daily_payouts_count, 0) as total_daily_payouts_count,\n    coalesce(daily_account_balance_transactions.total_daily_adjustments_count, 0) as total_daily_adjustments_count,\n    coalesce(daily_failed_charges.total_daily_failed_charge_count, 0) as total_daily_failed_charge_count,\n    coalesce(daily_failed_charges.total_daily_failed_charge_amount/100, 0) as total_daily_failed_charge_amount\n\nfrom daily_account_balance_transactions\nleft join daily_failed_charges\n    on daily_account_balance_transactions.date_day = daily_failed_charges.date\n    and daily_account_balance_transactions.source_relation = daily_failed_charges.source_relation", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__account_daily`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:11.534788Z", "completed_at": "2024-02-29T18:13:11.541674Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:11.542314Z", "completed_at": "2024-02-29T18:13:11.542319Z"}], "thread_id": "Thread-1", "execution_time": 0.008939027786254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__account_rolling_totals", "compiled": true, "compiled_code": "\n\n\nwith date_spine as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__date_spine`\n\n), account_daily_balances_by_type as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__account_daily`\n\n), account_rolling_totals as (\n\n    select\n        *\n\n        \n        , sum(total_daily_sales_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_amount\n        \n        , sum(total_daily_refunds_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_refunds_amount\n        \n        , sum(total_daily_adjustments_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_amount\n        \n        , sum(total_daily_other_transactions_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_other_transactions_amount\n        \n        , sum(total_daily_gross_transaction_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_transaction_amount\n        \n        , sum(total_daily_net_transactions_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_net_transactions_amount\n        \n        , sum(total_daily_payout_fee_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_payout_fee_amount\n        \n        , sum(total_daily_gross_payout_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_payout_amount\n        \n        , sum(daily_net_activity_amount) over (order by date_day rows unbounded preceding) as rolling_daily_net_activity_amount\n        \n        , sum(daily_end_balance_amount) over (order by date_day rows unbounded preceding) as rolling_daily_end_balance_amount\n        \n        , sum(total_daily_sales_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_count\n        \n        , sum(total_daily_payouts_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_payouts_count\n        \n        , sum(total_daily_adjustments_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_count\n        \n        , sum(total_daily_failed_charge_count) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_count\n        \n        , sum(total_daily_failed_charge_amount) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_amount\n        \n\n    from account_daily_balances_by_type\n\n), final as (\n\n    select\n        date_spine.account_id,\n        date_spine.date_day,\n        date_spine.date_week,\n        date_spine.date_month,\n        date_spine.date_year,\n        \n        coalesce(round(account_rolling_totals.total_daily_sales_amount,2),0) as total_daily_sales_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_refunds_amount,2),0) as total_daily_refunds_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_adjustments_amount,2),0) as total_daily_adjustments_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_other_transactions_amount,2),0) as total_daily_other_transactions_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_gross_transaction_amount,2),0) as total_daily_gross_transaction_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_net_transactions_amount,2),0) as total_daily_net_transactions_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_payout_fee_amount,2),0) as total_daily_payout_fee_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_gross_payout_amount,2),0) as total_daily_gross_payout_amount,\n        \n        coalesce(round(account_rolling_totals.daily_net_activity_amount,2),0) as daily_net_activity_amount,\n        \n        coalesce(round(account_rolling_totals.daily_end_balance_amount,2),0) as daily_end_balance_amount,\n        \n        coalesce(round(account_rolling_totals.total_daily_sales_count,2),0) as total_daily_sales_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_payouts_count,2),0) as total_daily_payouts_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_adjustments_count,2),0) as total_daily_adjustments_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_failed_charge_count,2),0) as total_daily_failed_charge_count,\n        \n        coalesce(round(account_rolling_totals.total_daily_failed_charge_amount,2),0) as total_daily_failed_charge_amount,\n        \n\n        \n        case when account_rolling_totals.rolling_total_daily_sales_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_sales_amount,2),0)\n            end as rolling_total_daily_sales_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_refunds_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_refunds_amount,2),0)\n            end as rolling_total_daily_refunds_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_adjustments_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_adjustments_amount,2),0)\n            end as rolling_total_daily_adjustments_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_other_transactions_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_other_transactions_amount,2),0)\n            end as rolling_total_daily_other_transactions_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_gross_transaction_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_gross_transaction_amount,2),0)\n            end as rolling_total_daily_gross_transaction_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_net_transactions_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_net_transactions_amount,2),0)\n            end as rolling_total_daily_net_transactions_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_payout_fee_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_payout_fee_amount,2),0)\n            end as rolling_total_daily_payout_fee_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_gross_payout_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_gross_payout_amount,2),0)\n            end as rolling_total_daily_gross_payout_amount,\n        \n        case when account_rolling_totals.rolling_daily_net_activity_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_daily_net_activity_amount,2),0)\n            end as rolling_daily_net_activity_amount,\n        \n        case when account_rolling_totals.rolling_daily_end_balance_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_daily_end_balance_amount,2),0)\n            end as rolling_daily_end_balance_amount,\n        \n        case when account_rolling_totals.rolling_total_daily_sales_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_sales_count,2),0)\n            end as rolling_total_daily_sales_count,\n        \n        case when account_rolling_totals.rolling_total_daily_payouts_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_payouts_count,2),0)\n            end as rolling_total_daily_payouts_count,\n        \n        case when account_rolling_totals.rolling_total_daily_adjustments_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_adjustments_count,2),0)\n            end as rolling_total_daily_adjustments_count,\n        \n        case when account_rolling_totals.rolling_total_daily_failed_charge_count is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_failed_charge_count,2),0)\n            end as rolling_total_daily_failed_charge_count,\n        \n        case when account_rolling_totals.rolling_total_daily_failed_charge_amount is null and date_index = 1\n            then 0\n            else coalesce(round(account_rolling_totals.rolling_total_daily_failed_charge_amount,2),0)\n            end as rolling_total_daily_failed_charge_amount,\n        \n\n        date_spine.date_index,\n        account_rolling_totals.source_relation\n\n    from date_spine\n    left join account_rolling_totals\n        on account_rolling_totals.date_day = date_spine.date_day\n        and account_rolling_totals.account_id = date_spine.account_id\n        and account_rolling_totals.source_relation = date_spine.source_relation\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__account_rolling_totals`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:11.544520Z", "completed_at": "2024-02-29T18:13:11.548376Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:11.548988Z", "completed_at": "2024-02-29T18:13:11.548993Z"}], "thread_id": "Thread-3", "execution_time": 0.005755901336669922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.int_stripe__account_partitions", "compiled": true, "compiled_code": "\n\nwith account_rolling_totals as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__account_rolling_totals`\n),\n\nfinal as (\n\n    select\n        *,\n        \n        sum(case when rolling_total_daily_sales_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_amount_partition,\n        sum(case when rolling_total_daily_refunds_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_refunds_amount_partition,\n        sum(case when rolling_total_daily_adjustments_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_amount_partition,\n        sum(case when rolling_total_daily_other_transactions_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_other_transactions_amount_partition,\n        sum(case when rolling_total_daily_gross_transaction_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_transaction_amount_partition,\n        sum(case when rolling_total_daily_net_transactions_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_net_transactions_amount_partition,\n        sum(case when rolling_total_daily_payout_fee_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_payout_fee_amount_partition,\n        sum(case when rolling_total_daily_gross_payout_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_gross_payout_amount_partition,\n        sum(case when rolling_daily_net_activity_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_daily_net_activity_amount_partition,\n        sum(case when rolling_daily_end_balance_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_daily_end_balance_amount_partition,\n        sum(case when rolling_total_daily_sales_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_sales_count_partition,\n        sum(case when rolling_total_daily_payouts_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_payouts_count_partition,\n        sum(case when rolling_total_daily_adjustments_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_adjustments_count_partition,\n        sum(case when rolling_total_daily_failed_charge_count is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_count_partition,\n        sum(case when rolling_total_daily_failed_charge_amount is null  \n            then 0  \n            else 1  \n                end) over (order by date_day rows unbounded preceding) as rolling_total_daily_failed_charge_amount_partition                  \n    from account_rolling_totals\n)\n\nselect * \nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__account_partitions`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:11.551231Z", "completed_at": "2024-02-29T18:13:11.562772Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:11.563344Z", "completed_at": "2024-02-29T18:13:11.563349Z"}], "thread_id": "Thread-2", "execution_time": 0.013395071029663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.stripe.stripe__daily_overview", "compiled": true, "compiled_code": "\n\nwith account_partitions as (\n\n    select * \n    from `dbt-package-testing`.`stripe_testing_stripe`.`int_stripe__account_partitions`\n),\n\nfinal as (\n\n    select\n        account_id,\n        to_hex(md5(cast(coalesce(cast(account_id as string), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date_day as string), '_dbt_utils_surrogate_key_null_') as string))) as account_daily_id,\n\n        date_day,        \n        date_week,\n        date_month, \n        date_year,  \n        date_index,\n        source_relation,\n        coalesce(total_daily_sales_amount,0) as total_daily_sales_amount,\n        coalesce(total_daily_refunds_amount,0) as total_daily_refunds_amount,\n        coalesce(total_daily_adjustments_amount,0) as total_daily_adjustments_amount,\n        coalesce(total_daily_other_transactions_amount,0) as total_daily_other_transactions_amount,\n        coalesce(total_daily_gross_transaction_amount,0) as total_daily_gross_transaction_amount,\n        coalesce(total_daily_net_transactions_amount,0) as total_daily_net_transactions_amount,\n        coalesce(total_daily_payout_fee_amount,0) as total_daily_payout_fee_amount,\n        coalesce(total_daily_gross_payout_amount,0) as total_daily_gross_payout_amount,\n        coalesce(daily_net_activity_amount,0) as daily_net_activity_amount,\n        coalesce(daily_end_balance_amount,0) as daily_end_balance_amount,\n        coalesce(total_daily_sales_count,0) as total_daily_sales_count,\n        coalesce(total_daily_payouts_count,0) as total_daily_payouts_count,\n        coalesce(total_daily_adjustments_count,0) as total_daily_adjustments_count,\n        coalesce(total_daily_failed_charge_count,0) as total_daily_failed_charge_count,\n        coalesce(total_daily_failed_charge_amount,0) as total_daily_failed_charge_amount,\n        \n        coalesce(rolling_total_daily_sales_amount,   \n            first_value(rolling_total_daily_sales_amount) over (partition by rolling_total_daily_sales_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_sales_amount,\n        coalesce(rolling_total_daily_refunds_amount,   \n            first_value(rolling_total_daily_refunds_amount) over (partition by rolling_total_daily_refunds_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_refunds_amount,\n        coalesce(rolling_total_daily_adjustments_amount,   \n            first_value(rolling_total_daily_adjustments_amount) over (partition by rolling_total_daily_adjustments_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_adjustments_amount,\n        coalesce(rolling_total_daily_other_transactions_amount,   \n            first_value(rolling_total_daily_other_transactions_amount) over (partition by rolling_total_daily_other_transactions_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_other_transactions_amount,\n        coalesce(rolling_total_daily_gross_transaction_amount,   \n            first_value(rolling_total_daily_gross_transaction_amount) over (partition by rolling_total_daily_gross_transaction_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_gross_transaction_amount,\n        coalesce(rolling_total_daily_net_transactions_amount,   \n            first_value(rolling_total_daily_net_transactions_amount) over (partition by rolling_total_daily_net_transactions_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_net_transactions_amount,\n        coalesce(rolling_total_daily_payout_fee_amount,   \n            first_value(rolling_total_daily_payout_fee_amount) over (partition by rolling_total_daily_payout_fee_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_payout_fee_amount,\n        coalesce(rolling_total_daily_gross_payout_amount,   \n            first_value(rolling_total_daily_gross_payout_amount) over (partition by rolling_total_daily_gross_payout_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_gross_payout_amount,\n        coalesce(rolling_daily_net_activity_amount,   \n            first_value(rolling_daily_net_activity_amount) over (partition by rolling_daily_net_activity_amount_partition order by date_day rows unbounded preceding)) as rolling_daily_net_activity_amount,\n        coalesce(rolling_daily_end_balance_amount,   \n            first_value(rolling_daily_end_balance_amount) over (partition by rolling_daily_end_balance_amount_partition order by date_day rows unbounded preceding)) as rolling_daily_end_balance_amount,\n        coalesce(rolling_total_daily_sales_count,   \n            first_value(rolling_total_daily_sales_count) over (partition by rolling_total_daily_sales_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_sales_count,\n        coalesce(rolling_total_daily_payouts_count,   \n            first_value(rolling_total_daily_payouts_count) over (partition by rolling_total_daily_payouts_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_payouts_count,\n        coalesce(rolling_total_daily_adjustments_count,   \n            first_value(rolling_total_daily_adjustments_count) over (partition by rolling_total_daily_adjustments_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_adjustments_count,\n        coalesce(rolling_total_daily_failed_charge_count,   \n            first_value(rolling_total_daily_failed_charge_count) over (partition by rolling_total_daily_failed_charge_count_partition order by date_day rows unbounded preceding)) as rolling_total_daily_failed_charge_count,\n        coalesce(rolling_total_daily_failed_charge_amount,   \n            first_value(rolling_total_daily_failed_charge_amount) over (partition by rolling_total_daily_failed_charge_amount_partition order by date_day rows unbounded preceding)) as rolling_total_daily_failed_charge_amount\n\n    from account_partitions\n)    \n\nselect *\nfrom final", "relation_name": "`dbt-package-testing`.`stripe_testing_stripe`.`stripe__daily_overview`"}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-29T18:13:11.565295Z", "completed_at": "2024-02-29T18:13:11.569016Z"}, {"name": "execute", "started_at": "2024-02-29T18:13:11.569553Z", "completed_at": "2024-02-29T18:13:11.569557Z"}], "thread_id": "Thread-4", "execution_time": 0.0054416656494140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.stripe.dbt_utils_unique_combination_of_columns_stripe__daily_overview_account_id__date_day__source_relation.81c846ac71", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        account_id, date_day, source_relation\n    from `dbt-package-testing`.`stripe_testing_stripe`.`stripe__daily_overview`\n    group by account_id, date_day, source_relation\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 14.82030177116394, "args": {"profiles_dir": "/Users/jamie.rodriguez/.dbt", "exclude": [], "use_colors": true, "partial_parse": true, "defer": false, "quiet": false, "invocation_command": "dbt docs generate", "introspect": true, "favor_state": false, "show_resource_report": false, "write_json": true, "log_format": "default", "log_level_file": "debug", "printer_width": 80, "project_dir": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests", "which": "generate", "macro_debugging": false, "partial_parse_file_diff": true, "populate_cache": true, "version_check": true, "enable_legacy_logger": false, "log_level": "info", "use_colors_file": true, "select": [], "empty_catalog": false, "log_path": "/Users/jamie.rodriguez/Desktop/dbt_repos/Finance/Stripe/dbt_stripe/integration_tests/logs", "send_anonymous_usage_stats": true, "static_parser": true, "vars": {}, "compile": true, "indirect_selection": "eager", "print": true, "static": false, "cache_selected_only": false, "log_format_file": "debug", "warn_error_options": {"include": [], "exclude": []}, "strict_mode": false, "log_file_max_bytes": 10485760}}